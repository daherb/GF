module AbsCFG where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data Grammars =
   Grammars [Grammar]
  deriving (Eq,Ord,Show)

data Grammar =
   Grammar Ident [Flag] [Rule]
  deriving (Eq,Ord,Show)

data Flag =
   StartCat Category
  deriving (Eq,Ord,Show)

data Rule =
   Rule Ident Name Profile Category [Symbol]
  deriving (Eq,Ord,Show)

data Profile =
   Profile [Ints]
  deriving (Eq,Ord,Show)

data Ints =
   Ints [Integer]
  deriving (Eq,Ord,Show)

data Symbol =
   CatS Category
 | TermS String
  deriving (Eq,Ord,Show)

data Name =
   Name [IdentParam] Category
  deriving (Eq,Ord,Show)

data Category =
   Category IdentParam Ident [Proj]
  deriving (Eq,Ord,Show)

data IdentParam =
   IdentParam Ident [Field]
  deriving (Eq,Ord,Show)

data Field =
   Field KeyValue
  deriving (Eq,Ord,Show)

data Proj =
   Proj Param
  deriving (Eq,Ord,Show)

data KeyValue =
   KeyValue Ident Param
  deriving (Eq,Ord,Show)

data Param =
   ParamSimple Ident
 | ParamPatt Ident [Param]
 | ParamRec [KeyValue]
  deriving (Eq,Ord,Show)

