{- 
   **************************************************************
    GF Module
   
    Description   : This module prints a CFG as a Nuance GSL 2.0
                    grammar.

    Author        : Björn Bringert (bringert@cs.chalmers.se)

    License       : GPL (GNU General Public License)

    Created       : September 13, 2004

    Modified      : October 1, 2004
   ************************************************************** 
-}

-- FIXME: remove / warn / fail if there are int / string literal
-- categories in the grammar

module PrGSL (gslPrinter) where

import SRG
import Ident
import CFGrammar
import Parser (Symbol(..))
import GrammarTypes
import PrintParser
import Option

gslPrinter :: Ident -- ^ Grammar name
	   -> Options -> CFGrammar -> String
gslPrinter name opts cfg = prGSL srg ""
    where srg = makeSRG name opts cfg

prGSL :: SRG -> ShowS
prGSL (SRG{grammarName=name,startCat=start,origStartCat=origStart,rules=rs})
    = header . mainCat . unlinesS (map prRule rs)
    where
    header = showString ";GSL2.0" . nl 
	     . comments ["Nuance speech recognition grammar for " ++ name,
			 "Generated by GF"] . nl . nl
    mainCat = showString ("; Start category: " ++ origStart) . nl 
	      . showString ".MAIN " . prCat start . nl . nl
    prRule (SRGRule cat origCat rhs) = 
	showString "; " . prtS origCat . nl
        . prCat cat . sp . wrap "[" (unwordsS (map prAlt rhs)) "]" . nl
    prAlt rhs = wrap "(" (unwordsS (map prSymbol rhs')) ")"
		   where rhs' = rmPunct rhs
    prSymbol (Cat c) = prCat c
    prSymbol (Tok t) = wrap "\"" (prtS t) "\""
    prCat c = showString c

rmPunct :: [Symbol String Token] -> [Symbol String Token] 
rmPunct [] = []
rmPunct (Tok t:ss) | all isPunct (prt t) = rmPunct ss
rmPunct (s:ss) = s : rmPunct ss

isPunct :: Char -> Bool
isPunct c = c `elem` "-_.;.,?!()[]{}"

comments :: [String] -> ShowS
comments = unlinesS . map (showString . ("; " ++))
