entrypoints Module, Exp ;

layout "let", "where", "of","rec", "sig", "do" ;
layout stop "in" ;
layout toplevel ;

comment "--" ;
comment "{-" "-}" ;

Module. Module ::= [Import] [Decl] ;

Import. Import ::= "import" Ident ;
separator Import ";" ;

DataDecl.  Decl ::= "data" Ident ":" Exp "where" "{" [ConsDecl] "}" ;
TypeDecl.  Decl ::= Ident ":" Exp ;
ValueDecl. Decl ::= Ident [Pattern] "=" Exp ;
DeriveDecl. Decl ::= "derive" Ident Ident ;
separator Decl ";" ;

ConsDecl. ConsDecl ::= Ident ":" Exp ;
separator ConsDecl ";" ;

-- Hack: constructor applied to at least one pattern
-- this is to separate it from variable patterns
PConsTop. Pattern ::= Ident Pattern1 [Pattern] ;
_.        Pattern ::= Pattern1 ;
-- Constructor pattern with parantheses
PCons.    Pattern1 ::= "(" Ident [Pattern] ")" ;
-- Record patterns
PRec.     Pattern1 ::= "rec" "{" [FieldPattern] "}";
-- The pattern matching the Type constant
PType.    Pattern1 ::= "Type" ;
-- String literal patterns
PStr.     Pattern1 ::= String ;
-- Integer literal patterns
PInt.     Pattern1 ::= Integer ;
-- Variable patterns
PVar.     Pattern1 ::= Ident ;
-- Wild card patterns
PWild.    Pattern1 ::= "_" ;

[].  [Pattern] ::= ;
(:). [Pattern] ::= Pattern1 [Pattern] ;

FieldPattern. FieldPattern ::= Ident "=" Pattern ;
separator FieldPattern ";" ;

ELet.      Exp  ::= "let" "{" [LetDef] "}" "in" Exp ;
LetDef.    LetDef ::= Ident ":" Exp "=" Exp ;
separator LetDef ";" ;

ECase.     Exp  ::= "case" Exp "of" "{" [Case] "}" ;
Case. Case ::= Pattern "->" Exp ;
separator Case ";" ;

EIf.       Exp  ::= "if" Exp "then" Exp "else" Exp ;

EDo.       Exp  ::= "do" "{" [Bind] Exp "}" ;
BindVar.   Bind ::= VarOrWild "<-" Exp ;
BindNoVar. Bind ::= Exp ;
terminator Bind ";" ;

EAbs.      Exp2 ::= "\\" VarOrWild "->" Exp ;
EPi.       Exp2 ::= "(" VarOrWild ":" Exp ")" "->" Exp ;
EPiNoVar.  Exp2 ::= Exp3 "->" Exp ;
VVar.      VarOrWild ::= Ident ;
VWild.     VarOrWild ::= "_" ;

EBind.     Exp3 ::= Exp3 ">>=" Exp4 ;
EBindC.    Exp3 ::= Exp3 ">>"  Exp4 ;

EOr.       Exp4 ::= Exp5 "||" Exp4 ;

EAnd.      Exp5 ::= Exp6 "&&" Exp5 ;

EEq.       Exp6 ::= Exp7 "==" Exp7 ;
ENe.       Exp6 ::= Exp7 "/=" Exp7 ;
ELt.       Exp6 ::= Exp7 "<"  Exp7 ;
ELe.       Exp6 ::= Exp7 "<=" Exp7 ;
EGt.       Exp6 ::= Exp7 ">"  Exp7 ;
EGe.       Exp6 ::= Exp7 ">=" Exp7 ;

EListCons. Exp7 ::= Exp8 "::" Exp7 ;

EAdd.      Exp8 ::= Exp8 "+" Exp9 ;
ESub.      Exp8 ::= Exp8 "-" Exp9 ;

EMul.      Exp9 ::= Exp9 "*" Exp10 ;
EDiv.      Exp9 ::= Exp9 "/" Exp10 ;
EMod.      Exp9 ::= Exp9 "%" Exp10 ;

ENeg.      Exp10 ::= "-" Exp10 ;

EApp.      Exp11 ::= Exp11 Exp12 ;

EProj.     Exp12 ::= Exp12 "." Ident ;

ERecType.  Exp13 ::= "sig" "{" [FieldType] "}" ;
FieldType. FieldType  ::= Ident ":" Exp ;
separator FieldType ";" ;

ERec.      Exp13 ::= "rec" "{" [FieldValue] "}" ;
FieldValue.FieldValue ::= Ident "=" Exp ;
separator FieldValue ";" ;

EList.     Exp13 ::= "[" [Exp] "]" ;

EVar.      Exp13 ::= Ident ;
EType.     Exp13 ::= "Type" ;
EStr.      Exp13 ::= String ;
EInt.      Exp13 ::= Integer ;
EMeta.     Exp13 ::= "?" ;

coercions Exp 13 ;

separator Exp "," ;
