--# -path=.:../romance:../abstract:../../prelude

resource BeschSpa = open TypesSpa in {

oper Verbum = {s : VForm => Str} ;

-- machine-generated GF file from FM source by Inger Andersson and Therese Söderberg

oper ser_1 : Str -> Verbum = \ser -> 
  let x_ = Predef.tk 3 ser in
 {s = table {
    VI Infn=> x_ + "ser" ;
    VI Ger => x_ + "siendo" ;
    VI Part => x_ + "sido" ;
    VP (Pres Ind Sg P1) => x_ + "soy" ;
    VP (Pres Ind Sg P2) => x_ + "eres" ;
    VP (Pres Ind Sg P3) => x_ + "es" ;
    VP (Pres Ind Pl P1) => x_ + "somos" ;
    VP (Pres Ind Pl P2) => x_ + "sois" ;
    VP (Pres Ind Pl P3) => x_ + "son" ;
    VP (Pres Subj Sg P1) => x_ + "sea" ;
    VP (Pres Subj Sg P2) => x_ + "seas" ;
    VP (Pres Subj Sg P3) => x_ + "sea" ;
    VP (Pres Subj Pl P1) => x_ + "seamos" ;
    VP (Pres Subj Pl P2) => x_ + "seáis" ;
    VP (Pres Subj Pl P3) => x_ + "sean" ;
    VP (Past Ind Sg P1) => x_ + "era" ;
    VP (Past Ind Sg P2) => x_ + "eras" ;
    VP (Past Ind Sg P3) => x_ + "era" ;
    VP (Past Ind Pl P1) => x_ + "éramos" ;
    VP (Past Ind Pl P2) => x_ + "erais" ;
    VP (Past Ind Pl P3) => x_ + "eran" ;
    VP (Past Subj Sg P1) => variants {x_ + "fuera" ; x_ + "fuese"} ;
    VP (Past Subj Sg P2) => variants {x_ + "fueras" ; x_ + "fueses"} ;
    VP (Past Subj Sg P3) => variants {x_ + "fuera" ; x_ + "fuese"} ;
    VP (Past Subj Pl P1) => variants {x_ + "fuéramos" ; x_ + "fuésemos"} ;
    VP (Past Subj Pl P2) => variants {x_ + "fuerais" ; x_ + "fueseis"} ;
    VP (Past Subj Pl P3) => variants {x_ + "fueran" ; x_ + "fuesen"} ;
    VP (Pret Sg P1) => x_ + "fui" ;
    VP (Pret Sg P2) => x_ + "fuiste" ;
    VP (Pret Sg P3) => x_ + "fue" ;
    VP (Pret Pl P1) => x_ + "fuimos" ;
    VP (Pret Pl P2) => x_ + "fuisteis" ;
    VP (Pret Pl P3) => x_ + "fueron" ;
    VP (Fut Ind Sg P1) => x_ + "seré" ;
    VP (Fut Ind Sg P2) => x_ + "serás" ;
    VP (Fut Ind Sg P3) => x_ + "será" ;
    VP (Fut Ind Pl P1) => x_ + "seremos" ;
    VP (Fut Ind Pl P2) => x_ + "seréis" ;
    VP (Fut Ind Pl P3) => x_ + "serán" ;
    VP (Fut Subj Sg P1) => x_ + "fuere" ;
    VP (Fut Subj Sg P2) => x_ + "fueres" ;
    VP (Fut Subj Sg P3) => x_ + "fuere" ;
    VP (Fut Subj Pl P1) => x_ + "fuéremos" ;
    VP (Fut Subj Pl P2) => x_ + "fuereis" ;
    VP (Fut Subj Pl P3) => x_ + "fueren" ;
    VP (Cond Sg P1) => x_ + "sería" ;
    VP (Cond Sg P2) => x_ + "serías" ;
    VP (Cond Sg P3) => x_ + "sería" ;
    VP (Cond Pl P1) => x_ + "seríamos" ;
    VP (Cond Pl P2) => x_ + "seríais" ;
    VP (Cond Pl P3) => x_ + "serían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => x_ + "sé" ;
    VP (Imp Sg P3) => x_ + "sea" ;
    VP (Imp Pl P1) => x_ + "seamos" ;
    VP (Imp Pl P2) => x_ + "sed" ;
    VP (Imp Pl P3) => x_ + "sean" ;
    VP (Pass Sg Masc) => x_ + "sido" ;
    VP (Pass Sg Fem) => x_ + "sida" ;
    VP (Pass Pl Masc) => x_ + "sidos" ;
    VP (Pass Pl Fem) => x_ + "sidas"
    }
  } ;

oper estar_2 : Str -> Verbum = \estar -> 
  let est_ = Predef.tk 2 estar in
 {s = table {
    VI Infn=> est_ + "ar" ;
    VI Ger => est_ + "ando" ;
    VI Part => est_ + "ado" ;
    VP (Pres Ind Sg P1) => est_ + "oy" ;
    VP (Pres Ind Sg P2) => est_ + "ás" ;
    VP (Pres Ind Sg P3) => est_ + "á" ;
    VP (Pres Ind Pl P1) => est_ + "amos" ;
    VP (Pres Ind Pl P2) => est_ + "áis" ;
    VP (Pres Ind Pl P3) => est_ + "án" ;
    VP (Pres Subj Sg P1) => est_ + "é" ;
    VP (Pres Subj Sg P2) => est_ + "és" ;
    VP (Pres Subj Sg P3) => est_ + "é" ;
    VP (Pres Subj Pl P1) => est_ + "emos" ;
    VP (Pres Subj Pl P2) => est_ + "éis" ;
    VP (Pres Subj Pl P3) => est_ + "én" ;
    VP (Past Ind Sg P1) => est_ + "aba" ;
    VP (Past Ind Sg P2) => est_ + "abas" ;
    VP (Past Ind Sg P3) => est_ + "aba" ;
    VP (Past Ind Pl P1) => est_ + "ábamos" ;
    VP (Past Ind Pl P2) => est_ + "abais" ;
    VP (Past Ind Pl P3) => est_ + "aban" ;
    VP (Past Subj Sg P1) => variants {est_ + "uviera" ; est_ + "uviese"} ;
    VP (Past Subj Sg P2) => variants {est_ + "uvieras" ; est_ + "uvieses"} ;
    VP (Past Subj Sg P3) => variants {est_ + "uviera" ; est_ + "uviese"} ;
    VP (Past Subj Pl P1) => variants {est_ + "uviéramos" ; est_ + "uviésemos"} ;
    VP (Past Subj Pl P2) => variants {est_ + "uvierais" ; est_ + "uvieseis"} ;
    VP (Past Subj Pl P3) => variants {est_ + "uvieran" ; est_ + "uviesen"} ;
    VP (Pret Sg P1) => est_ + "uve" ;
    VP (Pret Sg P2) => est_ + "uviste" ;
    VP (Pret Sg P3) => est_ + "uvo" ;
    VP (Pret Pl P1) => est_ + "uvimos" ;
    VP (Pret Pl P2) => est_ + "uvisteis" ;
    VP (Pret Pl P3) => est_ + "uvieron" ;
    VP (Fut Ind Sg P1) => est_ + "aré" ;
    VP (Fut Ind Sg P2) => est_ + "arás" ;
    VP (Fut Ind Sg P3) => est_ + "ará" ;
    VP (Fut Ind Pl P1) => est_ + "aremos" ;
    VP (Fut Ind Pl P2) => est_ + "aréis" ;
    VP (Fut Ind Pl P3) => est_ + "arán" ;
    VP (Fut Subj Sg P1) => est_ + "uviere" ;
    VP (Fut Subj Sg P2) => est_ + "uvieres" ;
    VP (Fut Subj Sg P3) => est_ + "uviere" ;
    VP (Fut Subj Pl P1) => est_ + "uviéremos" ;
    VP (Fut Subj Pl P2) => est_ + "uviereis" ;
    VP (Fut Subj Pl P3) => est_ + "uvieren" ;
    VP (Cond Sg P1) => est_ + "aría" ;
    VP (Cond Sg P2) => est_ + "arías" ;
    VP (Cond Sg P3) => est_ + "aría" ;
    VP (Cond Pl P1) => est_ + "aríamos" ;
    VP (Cond Pl P2) => est_ + "aríais" ;
    VP (Cond Pl P3) => est_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => est_ + "á" ;
    VP (Imp Sg P3) => est_ + "é" ;
    VP (Imp Pl P1) => est_ + "emos" ;
    VP (Imp Pl P2) => est_ + "ad" ;
    VP (Imp Pl P3) => est_ + "én" ;
    VP (Pass Sg Masc) => est_ + "ado" ;
    VP (Pass Sg Fem) => est_ + "ada" ;
    VP (Pass Pl Masc) => est_ + "ados" ;
    VP (Pass Pl Fem) => est_ + "adas"
    }
  } ;

oper haber_3 : Str -> Verbum = \haber -> 
  let h_ = Predef.tk 4 haber in
 {s = table {
    VI Infn=> h_ + "aber" ;
    VI Ger => h_ + "abiendo" ;
    VI Part => h_ + "abido" ;
    VP (Pres Ind Sg P1) => h_ + "e" ;
    VP (Pres Ind Sg P2) => h_ + "as" ;
    VP (Pres Ind Sg P3) => variants {h_ + "a"} ; ---- h_ + "ay"} ;
    VP (Pres Ind Pl P1) => h_ + "emos" ;
    VP (Pres Ind Pl P2) => h_ + "abéis" ;
    VP (Pres Ind Pl P3) => h_ + "an" ;
    VP (Pres Subj Sg P1) => h_ + "aya" ;
    VP (Pres Subj Sg P2) => h_ + "ayas" ;
    VP (Pres Subj Sg P3) => h_ + "aya" ;
    VP (Pres Subj Pl P1) => h_ + "ayamos" ;
    VP (Pres Subj Pl P2) => h_ + "ayáis" ;
    VP (Pres Subj Pl P3) => h_ + "ayan" ;
    VP (Past Ind Sg P1) => h_ + "abía" ;
    VP (Past Ind Sg P2) => h_ + "abías" ;
    VP (Past Ind Sg P3) => h_ + "abía" ;
    VP (Past Ind Pl P1) => h_ + "abíamos" ;
    VP (Past Ind Pl P2) => h_ + "abíais" ;
    VP (Past Ind Pl P3) => h_ + "abían" ;
    VP (Past Subj Sg P1) => variants {h_ + "ubiera" ; h_ + "ubiese"} ;
    VP (Past Subj Sg P2) => variants {h_ + "ubieras" ; h_ + "ubieses"} ;
    VP (Past Subj Sg P3) => variants {h_ + "ubiera" ; h_ + "ubiese"} ;
    VP (Past Subj Pl P1) => variants {h_ + "ubiéramos" ; h_ + "ubiésemos"} ;
    VP (Past Subj Pl P2) => variants {h_ + "ubierais" ; h_ + "ubieseis"} ;
    VP (Past Subj Pl P3) => variants {h_ + "ubieran" ; h_ + "ubiesen"} ;
    VP (Pret Sg P1) => h_ + "ube" ;
    VP (Pret Sg P2) => h_ + "ubiste" ;
    VP (Pret Sg P3) => h_ + "ubo" ;
    VP (Pret Pl P1) => h_ + "ubimos" ;
    VP (Pret Pl P2) => h_ + "ubisteis" ;
    VP (Pret Pl P3) => h_ + "ubieron" ;
    VP (Fut Ind Sg P1) => h_ + "abré" ;
    VP (Fut Ind Sg P2) => h_ + "abrás" ;
    VP (Fut Ind Sg P3) => h_ + "abrá" ;
    VP (Fut Ind Pl P1) => h_ + "abremos" ;
    VP (Fut Ind Pl P2) => h_ + "abréis" ;
    VP (Fut Ind Pl P3) => h_ + "abrán" ;
    VP (Fut Subj Sg P1) => h_ + "ubiere" ;
    VP (Fut Subj Sg P2) => h_ + "ubieres" ;
    VP (Fut Subj Sg P3) => h_ + "ubiere" ;
    VP (Fut Subj Pl P1) => h_ + "ubiéremos" ;
    VP (Fut Subj Pl P2) => h_ + "ubiereis" ;
    VP (Fut Subj Pl P3) => h_ + "ubieren" ;
    VP (Cond Sg P1) => h_ + "abría" ;
    VP (Cond Sg P2) => h_ + "abrías" ;
    VP (Cond Sg P3) => h_ + "abría" ;
    VP (Cond Pl P1) => h_ + "abríamos" ;
    VP (Cond Pl P2) => h_ + "abríais" ;
    VP (Cond Pl P3) => h_ + "abrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => variants {} ;
    VP (Imp Sg P3) => variants {} ;
    VP (Imp Pl P1) => variants {} ;
    VP (Imp Pl P2) => variants {} ;
    VP (Imp Pl P3) => variants {} ;
    VP (Pass Sg Masc) => h_ + "abido" ;
    VP (Pass Sg Fem) => h_ + "abida" ;
    VP (Pass Pl Masc) => h_ + "abidos" ;
    VP (Pass Pl Fem) => h_ + "abidas"
    }
  } ;

oper tener_4 : Str -> Verbum = \tener ->
  let t_ = Predef.tk 4 tener in
 {s = table {
    VI Infn => t_ + "ener" ;
    VI Ger => t_ + "eniendo" ;
    VI Part => t_ + "enido" ;
    VP (Pres Ind Sg P1) => t_ + "engo" ;
    VP (Pres Ind Sg P2) => t_ + "ienes" ;
    VP (Pres Ind Sg P3) => t_ + "iene" ;
    VP (Pres Ind Pl P1) => t_ + "enemos" ;
    VP (Pres Ind Pl P2) => t_ + "enéis" ;
    VP (Pres Ind Pl P3) => t_ + "ienen" ;
    VP (Pres Subj Sg P1) => t_ + "enga" ;
    VP (Pres Subj Sg P2) => t_ + "engas" ;
    VP (Pres Subj Sg P3) => t_ + "enga" ;
    VP (Pres Subj Pl P1) => t_ + "engamos" ;
    VP (Pres Subj Pl P2) => t_ + "engáis" ;
    VP (Pres Subj Pl P3) => t_ + "engan" ;
    VP (Past Ind Sg P1) => t_ + "enía" ;
    VP (Past Ind Sg P2) => t_ + "enías" ;
    VP (Past Ind Sg P3) => t_ + "enía" ;
    VP (Past Ind Pl P1) => t_ + "eníamos" ;
    VP (Past Ind Pl P2) => t_ + "eníais" ;
    VP (Past Ind Pl P3) => t_ + "enían" ;
    VP (Past Subj Sg P1) => variants {t_ + "uviera" ; t_ + "uviese"} ;
    VP (Past Subj Sg P2) => variants {t_ + "uvieras" ; t_ + "uvieses"} ;
    VP (Past Subj Sg P3) => variants {t_ + "uviera" ; t_ + "uviese"} ;
    VP (Past Subj Pl P1) => variants {t_ + "uviéramos" ; t_ + "uviésemos"} ;
    VP (Past Subj Pl P2) => variants {t_ + "uvierais" ; t_ + "uvieseis"} ;
    VP (Past Subj Pl P3) => variants {t_ + "uvieran" ; t_ + "uviesen"} ;
    VP (Pret Sg P1) => t_ + "uve" ;
    VP (Pret Sg P2) => t_ + "uviste" ;
    VP (Pret Sg P3) => t_ + "uvo" ;
    VP (Pret Pl P1) => t_ + "uvimos" ;
    VP (Pret Pl P2) => t_ + "uvisteis" ;
    VP (Pret Pl P3) => t_ + "uvieron" ;
    VP (Fut Ind Sg P1) => t_ + "endré" ;
    VP (Fut Ind Sg P2) => t_ + "endrás" ;
    VP (Fut Ind Sg P3) => t_ + "endrá" ;
    VP (Fut Ind Pl P1) => t_ + "endremos" ;
    VP (Fut Ind Pl P2) => t_ + "endréis" ;
    VP (Fut Ind Pl P3) => t_ + "endrán" ;
    VP (Fut Subj Sg P1) => t_ + "uviere" ;
    VP (Fut Subj Sg P2) => t_ + "uvieres" ;
    VP (Fut Subj Sg P3) => t_ + "uviere" ;
    VP (Fut Subj Pl P1) => t_ + "uviéremos" ;
    VP (Fut Subj Pl P2) => t_ + "uviereis" ;
    VP (Fut Subj Pl P3) => t_ + "uvieren" ;
    VP (Cond Sg P1) => t_ + "endría" ;
    VP (Cond Sg P2) => t_ + "endrías" ;
    VP (Cond Sg P3) => t_ + "endría" ;
    VP (Cond Pl P1) => t_ + "endríamos" ;
    VP (Cond Pl P2) => t_ + "endríais" ;
    VP (Cond Pl P3) => t_ + "endrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => t_ + "en" ;
    VP (Imp Sg P3) => t_ + "enga" ;
    VP (Imp Pl P1) => t_ + "engamos" ;
    VP (Imp Pl P2) => t_ + "ened" ;
    VP (Imp Pl P3) => t_ + "engan" ;
    VP (Pass Sg Masc) => t_ + "enido" ;
    VP (Pass Sg Fem) => t_ + "enida" ;
    VP (Pass Pl Masc) => t_ + "enidos" ;
    VP (Pass Pl Fem) => t_ + "enidas"
    }
  } ;
oper deber_6 : Str -> Verbum = \deber ->
  let deb_ = Predef.tk 2 deber in
 {s = table {
    VI Infn => deb_ + "er" ;
    VI Ger => deb_ + "iendo" ;
    VI Part => deb_ + "ido" ;
    VP (Pres Ind Sg P1) => deb_ + "o" ;
    VP (Pres Ind Sg P2) => deb_ + "es" ;
    VP (Pres Ind Sg P3) => deb_ + "e" ;
    VP (Pres Ind Pl P1) => deb_ + "emos" ;
    VP (Pres Ind Pl P2) => deb_ + "éis" ;
    VP (Pres Ind Pl P3) => deb_ + "en" ;
    VP (Pres Subj Sg P1) => deb_ + "a" ;
    VP (Pres Subj Sg P2) => deb_ + "as" ;
    VP (Pres Subj Sg P3) => deb_ + "a" ;
    VP (Pres Subj Pl P1) => deb_ + "amos" ;
    VP (Pres Subj Pl P2) => deb_ + "áis" ;
    VP (Pres Subj Pl P3) => deb_ + "an" ;
    VP (Past Ind Sg P1) => deb_ + "ía" ;
    VP (Past Ind Sg P2) => deb_ + "ías" ;
    VP (Past Ind Sg P3) => deb_ + "ía" ;
    VP (Past Ind Pl P1) => deb_ + "íamos" ;
    VP (Past Ind Pl P2) => deb_ + "íais" ;
    VP (Past Ind Pl P3) => deb_ + "ían" ;
    VP (Past Subj Sg P1) => variants {deb_ + "iera" ; deb_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {deb_ + "ieras" ; deb_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {deb_ + "iera" ; deb_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {deb_ + "iéramos" ; deb_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {deb_ + "ierais" ; deb_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {deb_ + "ieran" ; deb_ + "iesen"} ;
    VP (Pret Sg P1) => deb_ + "í" ;
    VP (Pret Sg P2) => deb_ + "iste" ;
    VP (Pret Sg P3) => deb_ + "ió" ;
    VP (Pret Pl P1) => deb_ + "imos" ;
    VP (Pret Pl P2) => deb_ + "isteis" ;
    VP (Pret Pl P3) => deb_ + "ieron" ;
    VP (Fut Ind Sg P1) => deb_ + "eré" ;
    VP (Fut Ind Sg P2) => deb_ + "erás" ;
    VP (Fut Ind Sg P3) => deb_ + "erá" ;
    VP (Fut Ind Pl P1) => deb_ + "eremos" ;
    VP (Fut Ind Pl P2) => deb_ + "eréis" ;
    VP (Fut Ind Pl P3) => deb_ + "erán" ;
    VP (Fut Subj Sg P1) => deb_ + "iere" ;
    VP (Fut Subj Sg P2) => deb_ + "ieres" ;
    VP (Fut Subj Sg P3) => deb_ + "iere" ;
    VP (Fut Subj Pl P1) => deb_ + "iéremos" ;
    VP (Fut Subj Pl P2) => deb_ + "iereis" ;
    VP (Fut Subj Pl P3) => deb_ + "ieren" ;
    VP (Cond Sg P1) => deb_ + "ería" ;
    VP (Cond Sg P2) => deb_ + "erías" ;
    VP (Cond Sg P3) => deb_ + "ería" ;
    VP (Cond Pl P1) => deb_ + "eríamos" ;
    VP (Cond Pl P2) => deb_ + "eríais" ;
    VP (Cond Pl P3) => deb_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => deb_ + "e" ;
    VP (Imp Sg P3) => deb_ + "a" ;
    VP (Imp Pl P1) => deb_ + "amos" ;
    VP (Imp Pl P2) => deb_ + "ed" ;
    VP (Imp Pl P3) => deb_ + "an" ;
    VP (Pass Sg Masc) => deb_ + "ido" ;
    VP (Pass Sg Fem) => deb_ + "ida" ;
    VP (Pass Pl Masc) => deb_ + "idos" ;
    VP (Pass Pl Fem) => deb_ + "idas"
    }
  } ;
oper vivir_7 : Str -> Verbum = \vivir ->
  let viv_ = Predef.tk 2 vivir in
 {s = table {
    VI Infn => viv_ + "ir" ;
    VI Ger => viv_ + "iendo" ;
    VI Part => viv_ + "ido" ;
    VP (Pres Ind Sg P1) => viv_ + "o" ;
    VP (Pres Ind Sg P2) => viv_ + "es" ;
    VP (Pres Ind Sg P3) => viv_ + "e" ;
    VP (Pres Ind Pl P1) => viv_ + "imos" ;
    VP (Pres Ind Pl P2) => viv_ + "ís" ;
    VP (Pres Ind Pl P3) => viv_ + "en" ;
    VP (Pres Subj Sg P1) => viv_ + "a" ;
    VP (Pres Subj Sg P2) => viv_ + "as" ;
    VP (Pres Subj Sg P3) => viv_ + "a" ;
    VP (Pres Subj Pl P1) => viv_ + "amos" ;
    VP (Pres Subj Pl P2) => viv_ + "áis" ;
    VP (Pres Subj Pl P3) => viv_ + "an" ;
    VP (Past Ind Sg P1) => viv_ + "ía" ;
    VP (Past Ind Sg P2) => viv_ + "ías" ;
    VP (Past Ind Sg P3) => viv_ + "ía" ;
    VP (Past Ind Pl P1) => viv_ + "íamos" ;
    VP (Past Ind Pl P2) => viv_ + "íais" ;
    VP (Past Ind Pl P3) => viv_ + "ían" ;
    VP (Past Subj Sg P1) => variants {viv_ + "iera" ; viv_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {viv_ + "ieras" ; viv_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {viv_ + "iera" ; viv_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {viv_ + "iéramos" ; viv_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {viv_ + "ierais" ; viv_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {viv_ + "ieran" ; viv_ + "iesen"} ;
    VP (Pret Sg P1) => viv_ + "í" ;
    VP (Pret Sg P2) => viv_ + "iste" ;
    VP (Pret Sg P3) => viv_ + "ió" ;
    VP (Pret Pl P1) => viv_ + "imos" ;
    VP (Pret Pl P2) => viv_ + "isteis" ;
    VP (Pret Pl P3) => viv_ + "ieron" ;
    VP (Fut Ind Sg P1) => viv_ + "iré" ;
    VP (Fut Ind Sg P2) => viv_ + "irás" ;
    VP (Fut Ind Sg P3) => viv_ + "irá" ;
    VP (Fut Ind Pl P1) => viv_ + "iremos" ;
    VP (Fut Ind Pl P2) => viv_ + "iréis" ;
    VP (Fut Ind Pl P3) => viv_ + "irán" ;
    VP (Fut Subj Sg P1) => viv_ + "iere" ;
    VP (Fut Subj Sg P2) => viv_ + "ieres" ;
    VP (Fut Subj Sg P3) => viv_ + "iere" ;
    VP (Fut Subj Pl P1) => viv_ + "iéremos" ;
    VP (Fut Subj Pl P2) => viv_ + "iereis" ;
    VP (Fut Subj Pl P3) => viv_ + "ieren" ;
    VP (Cond Sg P1) => viv_ + "iría" ;
    VP (Cond Sg P2) => viv_ + "irías" ;
    VP (Cond Sg P3) => viv_ + "iría" ;
    VP (Cond Pl P1) => viv_ + "iríamos" ;
    VP (Cond Pl P2) => viv_ + "iríais" ;
    VP (Cond Pl P3) => viv_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => viv_ + "e" ;
    VP (Imp Sg P3) => viv_ + "a" ;
    VP (Imp Pl P1) => viv_ + "amos" ;
    VP (Imp Pl P2) => viv_ + "id" ;
    VP (Imp Pl P3) => viv_ + "an" ;
    VP (Pass Sg Masc) => viv_ + "ido" ;
    VP (Pass Sg Fem) => viv_ + "ida" ;
    VP (Pass Pl Masc) => viv_ + "idos" ;
    VP (Pass Pl Fem) => viv_ + "idas"
    }
  } ;
oper abolir_8 : Str -> Verbum = \abolir ->
  let abol_ = Predef.tk 2 abolir in
 {s = table {
    VI Infn => abol_ + "ir" ;
    VI Ger => abol_ + "iendo" ;
    VI Part => abol_ + "ido" ;
    VP (Pres Ind Sg P1) => variants {} ;
    VP (Pres Ind Sg P2) => variants {} ;
    VP (Pres Ind Sg P3) => variants {} ;
    VP (Pres Ind Pl P1) => abol_ + "imos" ;
    VP (Pres Ind Pl P2) => abol_ + "ís" ;
    VP (Pres Ind Pl P3) => variants {} ;
    VP (Pres Subj Sg P1) => variants {} ;
    VP (Pres Subj Sg P2) => variants {} ;
    VP (Pres Subj Sg P3) => variants {} ;
    VP (Pres Subj Pl P1) => variants {} ;
    VP (Pres Subj Pl P2) => variants {} ;
    VP (Pres Subj Pl P3) => variants {} ;
    VP (Past Ind Sg P1) => abol_ + "ía" ;
    VP (Past Ind Sg P2) => abol_ + "ías" ;
    VP (Past Ind Sg P3) => abol_ + "ía" ;
    VP (Past Ind Pl P1) => abol_ + "íamos" ;
    VP (Past Ind Pl P2) => abol_ + "íais" ;
    VP (Past Ind Pl P3) => abol_ + "ían" ;
    VP (Past Subj Sg P1) => variants {abol_ + "iera" ; abol_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {abol_ + "ieras" ; abol_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {abol_ + "iera" ; abol_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {abol_ + "iéramos" ; abol_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {abol_ + "ierais" ; abol_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {abol_ + "ieran" ; abol_ + "iesen"} ;
    VP (Pret Sg P1) => abol_ + "í" ;
    VP (Pret Sg P2) => abol_ + "iste" ;
    VP (Pret Sg P3) => abol_ + "ió" ;
    VP (Pret Pl P1) => abol_ + "imos" ;
    VP (Pret Pl P2) => abol_ + "isteis" ;
    VP (Pret Pl P3) => abol_ + "ieron" ;
    VP (Fut Ind Sg P1) => abol_ + "iré" ;
    VP (Fut Ind Sg P2) => abol_ + "irás" ;
    VP (Fut Ind Sg P3) => abol_ + "irá" ;
    VP (Fut Ind Pl P1) => abol_ + "iremos" ;
    VP (Fut Ind Pl P2) => abol_ + "iréis" ;
    VP (Fut Ind Pl P3) => abol_ + "irán" ;
    VP (Fut Subj Sg P1) => abol_ + "iere" ;
    VP (Fut Subj Sg P2) => abol_ + "ieres" ;
    VP (Fut Subj Sg P3) => abol_ + "iere" ;
    VP (Fut Subj Pl P1) => abol_ + "iéremos" ;
    VP (Fut Subj Pl P2) => abol_ + "iereis" ;
    VP (Fut Subj Pl P3) => abol_ + "ieren" ;
    VP (Cond Sg P1) => abol_ + "iría" ;
    VP (Cond Sg P2) => abol_ + "irías" ;
    VP (Cond Sg P3) => abol_ + "iría" ;
    VP (Cond Pl P1) => abol_ + "iríamos" ;
    VP (Cond Pl P2) => abol_ + "iríais" ;
    VP (Cond Pl P3) => abol_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => variants {} ;
    VP (Imp Sg P3) => variants {} ;
    VP (Imp Pl P1) => variants {} ;
    VP (Imp Pl P2) => abol_ + "id" ;
    VP (Imp Pl P3) => variants {} ;
    VP (Pass Sg Masc) => abol_ + "ido" ;
    VP (Pass Sg Fem) => abol_ + "ida" ;
    VP (Pass Pl Masc) => abol_ + "idos" ;
    VP (Pass Pl Fem) => abol_ + "idas"
    }
  } ;
oper actuar_9 : Str -> Verbum = \actuar ->
  let act_ = Predef.tk 3 actuar in
 {s = table {
    VI Infn => act_ + "uar" ;
    VI Ger => act_ + "uando" ;
    VI Part => act_ + "uado" ;
    VP (Pres Ind Sg P1) => act_ + "úo" ;
    VP (Pres Ind Sg P2) => act_ + "úas" ;
    VP (Pres Ind Sg P3) => act_ + "úa" ;
    VP (Pres Ind Pl P1) => act_ + "uamos" ;
    VP (Pres Ind Pl P2) => act_ + "uáis" ;
    VP (Pres Ind Pl P3) => act_ + "úan" ;
    VP (Pres Subj Sg P1) => act_ + "úe" ;
    VP (Pres Subj Sg P2) => act_ + "úes" ;
    VP (Pres Subj Sg P3) => act_ + "úe" ;
    VP (Pres Subj Pl P1) => act_ + "uemos" ;
    VP (Pres Subj Pl P2) => act_ + "uéis" ;
    VP (Pres Subj Pl P3) => act_ + "úen" ;
    VP (Past Ind Sg P1) => act_ + "uaba" ;
    VP (Past Ind Sg P2) => act_ + "uabas" ;
    VP (Past Ind Sg P3) => act_ + "uaba" ;
    VP (Past Ind Pl P1) => act_ + "uábamos" ;
    VP (Past Ind Pl P2) => act_ + "uabais" ;
    VP (Past Ind Pl P3) => act_ + "uaban" ;
    VP (Past Subj Sg P1) => variants {act_ + "uara" ; act_ + "uase"} ;
    VP (Past Subj Sg P2) => variants {act_ + "uaras" ; act_ + "uases"} ;
    VP (Past Subj Sg P3) => variants {act_ + "uara" ; act_ + "uase"} ;
    VP (Past Subj Pl P1) => variants {act_ + "uáramos" ; act_ + "uásemos"} ;
    VP (Past Subj Pl P2) => variants {act_ + "uarais" ; act_ + "uaseis"} ;
    VP (Past Subj Pl P3) => variants {act_ + "uaran" ; act_ + "uasen"} ;
    VP (Pret Sg P1) => act_ + "ué" ;
    VP (Pret Sg P2) => act_ + "uaste" ;
    VP (Pret Sg P3) => act_ + "uó" ;
    VP (Pret Pl P1) => act_ + "uamos" ;
    VP (Pret Pl P2) => act_ + "uasteis" ;
    VP (Pret Pl P3) => act_ + "uaron" ;
    VP (Fut Ind Sg P1) => act_ + "uaré" ;
    VP (Fut Ind Sg P2) => act_ + "uarás" ;
    VP (Fut Ind Sg P3) => act_ + "uará" ;
    VP (Fut Ind Pl P1) => act_ + "uaremos" ;
    VP (Fut Ind Pl P2) => act_ + "uaréis" ;
    VP (Fut Ind Pl P3) => act_ + "uarán" ;
    VP (Fut Subj Sg P1) => act_ + "uare" ;
    VP (Fut Subj Sg P2) => act_ + "uares" ;
    VP (Fut Subj Sg P3) => act_ + "uare" ;
    VP (Fut Subj Pl P1) => act_ + "uáremos" ;
    VP (Fut Subj Pl P2) => act_ + "uareis" ;
    VP (Fut Subj Pl P3) => act_ + "uaren" ;
    VP (Cond Sg P1) => act_ + "uaría" ;
    VP (Cond Sg P2) => act_ + "uarías" ;
    VP (Cond Sg P3) => act_ + "uaría" ;
    VP (Cond Pl P1) => act_ + "uaríamos" ;
    VP (Cond Pl P2) => act_ + "uaríais" ;
    VP (Cond Pl P3) => act_ + "uarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => act_ + "úa" ;
    VP (Imp Sg P3) => act_ + "úe" ;
    VP (Imp Pl P1) => act_ + "uemos" ;
    VP (Imp Pl P2) => act_ + "uad" ;
    VP (Imp Pl P3) => act_ + "úen" ;
    VP (Pass Sg Masc) => act_ + "uado" ;
    VP (Pass Sg Fem) => act_ + "uada" ;
    VP (Pass Pl Masc) => act_ + "uados" ;
    VP (Pass Pl Fem) => act_ + "uadas"
    }
  } ;
oper adquirir_10 : Str -> Verbum = \adquirir ->
  let adqui_ = Predef.tk 3 adquirir in
 {s = table {
    VI Infn => adqui_ + "rir" ;
    VI Ger => adqui_ + "riendo" ;
    VI Part => adqui_ + "rido" ;
    VP (Pres Ind Sg P1) => adqui_ + "ero" ;
    VP (Pres Ind Sg P2) => adqui_ + "eres" ;
    VP (Pres Ind Sg P3) => adqui_ + "ere" ;
    VP (Pres Ind Pl P1) => adqui_ + "rimos" ;
    VP (Pres Ind Pl P2) => adqui_ + "rís" ;
    VP (Pres Ind Pl P3) => adqui_ + "eren" ;
    VP (Pres Subj Sg P1) => adqui_ + "era" ;
    VP (Pres Subj Sg P2) => adqui_ + "eras" ;
    VP (Pres Subj Sg P3) => adqui_ + "era" ;
    VP (Pres Subj Pl P1) => adqui_ + "ramos" ;
    VP (Pres Subj Pl P2) => adqui_ + "ráis" ;
    VP (Pres Subj Pl P3) => adqui_ + "eran" ;
    VP (Past Ind Sg P1) => adqui_ + "ría" ;
    VP (Past Ind Sg P2) => adqui_ + "rías" ;
    VP (Past Ind Sg P3) => adqui_ + "ría" ;
    VP (Past Ind Pl P1) => adqui_ + "ríamos" ;
    VP (Past Ind Pl P2) => adqui_ + "ríais" ;
    VP (Past Ind Pl P3) => adqui_ + "rían" ;
    VP (Past Subj Sg P1) => variants {adqui_ + "riera" ; adqui_ + "riese"} ;
    VP (Past Subj Sg P2) => variants {adqui_ + "rieras" ; adqui_ + "rieses"} ;
    VP (Past Subj Sg P3) => variants {adqui_ + "riera" ; adqui_ + "riese"} ;
    VP (Past Subj Pl P1) => variants {adqui_ + "riéramos" ; adqui_ + "riésemos"} ;
    VP (Past Subj Pl P2) => variants {adqui_ + "rierais" ; adqui_ + "rieseis"} ;
    VP (Past Subj Pl P3) => variants {adqui_ + "rieran" ; adqui_ + "riesen"} ;
    VP (Pret Sg P1) => adqui_ + "rí" ;
    VP (Pret Sg P2) => adqui_ + "riste" ;
    VP (Pret Sg P3) => adqui_ + "rió" ;
    VP (Pret Pl P1) => adqui_ + "rimos" ;
    VP (Pret Pl P2) => adqui_ + "risteis" ;
    VP (Pret Pl P3) => adqui_ + "rieron" ;
    VP (Fut Ind Sg P1) => adqui_ + "riré" ;
    VP (Fut Ind Sg P2) => adqui_ + "rirás" ;
    VP (Fut Ind Sg P3) => adqui_ + "rirá" ;
    VP (Fut Ind Pl P1) => adqui_ + "riremos" ;
    VP (Fut Ind Pl P2) => adqui_ + "riréis" ;
    VP (Fut Ind Pl P3) => adqui_ + "rirán" ;
    VP (Fut Subj Sg P1) => adqui_ + "riere" ;
    VP (Fut Subj Sg P2) => adqui_ + "rieres" ;
    VP (Fut Subj Sg P3) => adqui_ + "riere" ;
    VP (Fut Subj Pl P1) => adqui_ + "riéremos" ;
    VP (Fut Subj Pl P2) => adqui_ + "riereis" ;
    VP (Fut Subj Pl P3) => adqui_ + "rieren" ;
    VP (Cond Sg P1) => adqui_ + "riría" ;
    VP (Cond Sg P2) => adqui_ + "rirías" ;
    VP (Cond Sg P3) => adqui_ + "riría" ;
    VP (Cond Pl P1) => adqui_ + "riríamos" ;
    VP (Cond Pl P2) => adqui_ + "riríais" ;
    VP (Cond Pl P3) => adqui_ + "rirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => adqui_ + "ere" ;
    VP (Imp Sg P3) => adqui_ + "era" ;
    VP (Imp Pl P1) => adqui_ + "ramos" ;
    VP (Imp Pl P2) => adqui_ + "rid" ;
    VP (Imp Pl P3) => adqui_ + "eran" ;
    VP (Pass Sg Masc) => adqui_ + "rido" ;
    VP (Pass Sg Fem) => adqui_ + "rida" ;
    VP (Pass Pl Masc) => adqui_ + "ridos" ;
    VP (Pass Pl Fem) => adqui_ + "ridas"
    }
  } ;
oper ahincar_11 : Str -> Verbum = \ahincar ->
  let ah_ = Predef.tk 5 ahincar in
 {s = table {
    VI Infn => ah_ + "incar" ;
    VI Ger => ah_ + "incando" ;
    VI Part => ah_ + "incado" ;
    VP (Pres Ind Sg P1) => ah_ + "ínco" ;
    VP (Pres Ind Sg P2) => ah_ + "íncas" ;
    VP (Pres Ind Sg P3) => ah_ + "ínca" ;
    VP (Pres Ind Pl P1) => ah_ + "incamos" ;
    VP (Pres Ind Pl P2) => ah_ + "incáis" ;
    VP (Pres Ind Pl P3) => ah_ + "íncan" ;
    VP (Pres Subj Sg P1) => ah_ + "ínque" ;
    VP (Pres Subj Sg P2) => ah_ + "ínques" ;
    VP (Pres Subj Sg P3) => ah_ + "ínque" ;
    VP (Pres Subj Pl P1) => ah_ + "inquemos" ;
    VP (Pres Subj Pl P2) => ah_ + "inquéis" ;
    VP (Pres Subj Pl P3) => ah_ + "ínquen" ;
    VP (Past Ind Sg P1) => ah_ + "incaba" ;
    VP (Past Ind Sg P2) => ah_ + "incabas" ;
    VP (Past Ind Sg P3) => ah_ + "incaba" ;
    VP (Past Ind Pl P1) => ah_ + "incábamos" ;
    VP (Past Ind Pl P2) => ah_ + "incabais" ;
    VP (Past Ind Pl P3) => ah_ + "incaban" ;
    VP (Past Subj Sg P1) => variants {ah_ + "incara" ; ah_ + "incase"} ;
    VP (Past Subj Sg P2) => variants {ah_ + "incaras" ; ah_ + "incases"} ;
    VP (Past Subj Sg P3) => variants {ah_ + "incara" ; ah_ + "incase"} ;
    VP (Past Subj Pl P1) => variants {ah_ + "incáramos" ; ah_ + "incásemos"} ;
    VP (Past Subj Pl P2) => variants {ah_ + "incarais" ; ah_ + "incaseis"} ;
    VP (Past Subj Pl P3) => variants {ah_ + "incaran" ; ah_ + "incasen"} ;
    VP (Pret Sg P1) => ah_ + "inqué" ;
    VP (Pret Sg P2) => ah_ + "incaste" ;
    VP (Pret Sg P3) => ah_ + "incó" ;
    VP (Pret Pl P1) => ah_ + "incamos" ;
    VP (Pret Pl P2) => ah_ + "incasteis" ;
    VP (Pret Pl P3) => ah_ + "incaron" ;
    VP (Fut Ind Sg P1) => ah_ + "incaré" ;
    VP (Fut Ind Sg P2) => ah_ + "incarás" ;
    VP (Fut Ind Sg P3) => ah_ + "incará" ;
    VP (Fut Ind Pl P1) => ah_ + "incaremos" ;
    VP (Fut Ind Pl P2) => ah_ + "incaréis" ;
    VP (Fut Ind Pl P3) => ah_ + "incarán" ;
    VP (Fut Subj Sg P1) => ah_ + "incare" ;
    VP (Fut Subj Sg P2) => ah_ + "incares" ;
    VP (Fut Subj Sg P3) => ah_ + "incare" ;
    VP (Fut Subj Pl P1) => ah_ + "incáremos" ;
    VP (Fut Subj Pl P2) => ah_ + "incareis" ;
    VP (Fut Subj Pl P3) => ah_ + "incaren" ;
    VP (Cond Sg P1) => ah_ + "incaría" ;
    VP (Cond Sg P2) => ah_ + "incarías" ;
    VP (Cond Sg P3) => ah_ + "incaría" ;
    VP (Cond Pl P1) => ah_ + "incaríamos" ;
    VP (Cond Pl P2) => ah_ + "incaríais" ;
    VP (Cond Pl P3) => ah_ + "incarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ah_ + "ínca" ;
    VP (Imp Sg P3) => ah_ + "ínque" ;
    VP (Imp Pl P1) => ah_ + "inquemos" ;
    VP (Imp Pl P2) => ah_ + "incad" ;
    VP (Imp Pl P3) => ah_ + "ínquen" ;
    VP (Pass Sg Masc) => ah_ + "incado" ;
    VP (Pass Sg Fem) => ah_ + "incada" ;
    VP (Pass Pl Masc) => ah_ + "incados" ;
    VP (Pass Pl Fem) => ah_ + "incadas"
    }
  } ;
oper airar_12 : Str -> Verbum = \airar ->
  let a_ = Predef.tk 4 airar in
 {s = table {
    VI Infn => a_ + "irar" ;
    VI Ger => a_ + "irando" ;
    VI Part => a_ + "irado" ;
    VP (Pres Ind Sg P1) => a_ + "íro" ;
    VP (Pres Ind Sg P2) => a_ + "íras" ;
    VP (Pres Ind Sg P3) => a_ + "íra" ;
    VP (Pres Ind Pl P1) => a_ + "iramos" ;
    VP (Pres Ind Pl P2) => a_ + "iráis" ;
    VP (Pres Ind Pl P3) => a_ + "íran" ;
    VP (Pres Subj Sg P1) => a_ + "íre" ;
    VP (Pres Subj Sg P2) => a_ + "íres" ;
    VP (Pres Subj Sg P3) => a_ + "íre" ;
    VP (Pres Subj Pl P1) => a_ + "iremos" ;
    VP (Pres Subj Pl P2) => a_ + "iréis" ;
    VP (Pres Subj Pl P3) => a_ + "íren" ;
    VP (Past Ind Sg P1) => a_ + "iraba" ;
    VP (Past Ind Sg P2) => a_ + "irabas" ;
    VP (Past Ind Sg P3) => a_ + "iraba" ;
    VP (Past Ind Pl P1) => a_ + "irábamos" ;
    VP (Past Ind Pl P2) => a_ + "irabais" ;
    VP (Past Ind Pl P3) => a_ + "iraban" ;
    VP (Past Subj Sg P1) => variants {a_ + "irara" ; a_ + "irase"} ;
    VP (Past Subj Sg P2) => variants {a_ + "iraras" ; a_ + "irases"} ;
    VP (Past Subj Sg P3) => variants {a_ + "irara" ; a_ + "irase"} ;
    VP (Past Subj Pl P1) => variants {a_ + "iráramos" ; a_ + "irásemos"} ;
    VP (Past Subj Pl P2) => variants {a_ + "irarais" ; a_ + "iraseis"} ;
    VP (Past Subj Pl P3) => variants {a_ + "iraran" ; a_ + "irasen"} ;
    VP (Pret Sg P1) => a_ + "iré" ;
    VP (Pret Sg P2) => a_ + "iraste" ;
    VP (Pret Sg P3) => a_ + "iró" ;
    VP (Pret Pl P1) => a_ + "iramos" ;
    VP (Pret Pl P2) => a_ + "irasteis" ;
    VP (Pret Pl P3) => a_ + "iraron" ;
    VP (Fut Ind Sg P1) => a_ + "iraré" ;
    VP (Fut Ind Sg P2) => a_ + "irarás" ;
    VP (Fut Ind Sg P3) => a_ + "irará" ;
    VP (Fut Ind Pl P1) => a_ + "iraremos" ;
    VP (Fut Ind Pl P2) => a_ + "iraréis" ;
    VP (Fut Ind Pl P3) => a_ + "irarán" ;
    VP (Fut Subj Sg P1) => a_ + "irare" ;
    VP (Fut Subj Sg P2) => a_ + "irares" ;
    VP (Fut Subj Sg P3) => a_ + "irare" ;
    VP (Fut Subj Pl P1) => a_ + "iráremos" ;
    VP (Fut Subj Pl P2) => a_ + "irareis" ;
    VP (Fut Subj Pl P3) => a_ + "iraren" ;
    VP (Cond Sg P1) => a_ + "iraría" ;
    VP (Cond Sg P2) => a_ + "irarías" ;
    VP (Cond Sg P3) => a_ + "iraría" ;
    VP (Cond Pl P1) => a_ + "iraríamos" ;
    VP (Cond Pl P2) => a_ + "iraríais" ;
    VP (Cond Pl P3) => a_ + "irarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => a_ + "íra" ;
    VP (Imp Sg P3) => a_ + "íre" ;
    VP (Imp Pl P1) => a_ + "iremos" ;
    VP (Imp Pl P2) => a_ + "irad" ;
    VP (Imp Pl P3) => a_ + "íren" ;
    VP (Pass Sg Masc) => a_ + "irado" ;
    VP (Pass Sg Fem) => a_ + "irada" ;
    VP (Pass Pl Masc) => a_ + "irados" ;
    VP (Pass Pl Fem) => a_ + "iradas"
    }
  } ;
oper andar_13 : Str -> Verbum = \andar ->
  let and_ = Predef.tk 2 andar in
 {s = table {
    VI Infn => and_ + "ar" ;
    VI Ger => and_ + "ando" ;
    VI Part => and_ + "ado" ;
    VP (Pres Ind Sg P1) => and_ + "o" ;
    VP (Pres Ind Sg P2) => and_ + "as" ;
    VP (Pres Ind Sg P3) => and_ + "a" ;
    VP (Pres Ind Pl P1) => and_ + "amos" ;
    VP (Pres Ind Pl P2) => and_ + "áis" ;
    VP (Pres Ind Pl P3) => and_ + "an" ;
    VP (Pres Subj Sg P1) => and_ + "e" ;
    VP (Pres Subj Sg P2) => and_ + "es" ;
    VP (Pres Subj Sg P3) => and_ + "e" ;
    VP (Pres Subj Pl P1) => and_ + "emos" ;
    VP (Pres Subj Pl P2) => and_ + "éis" ;
    VP (Pres Subj Pl P3) => and_ + "en" ;
    VP (Past Ind Sg P1) => and_ + "aba" ;
    VP (Past Ind Sg P2) => and_ + "abas" ;
    VP (Past Ind Sg P3) => and_ + "aba" ;
    VP (Past Ind Pl P1) => and_ + "ábamos" ;
    VP (Past Ind Pl P2) => and_ + "abais" ;
    VP (Past Ind Pl P3) => and_ + "aban" ;
    VP (Past Subj Sg P1) => variants {and_ + "uviera" ; and_ + "uviese"} ;
    VP (Past Subj Sg P2) => variants {and_ + "uvieras" ; and_ + "uvieses"} ;
    VP (Past Subj Sg P3) => variants {and_ + "uviera" ; and_ + "uviese"} ;
    VP (Past Subj Pl P1) => variants {and_ + "uviéramos" ; and_ + "uviésemos"} ;
    VP (Past Subj Pl P2) => variants {and_ + "uvierais" ; and_ + "uvieseis"} ;
    VP (Past Subj Pl P3) => variants {and_ + "uvieran" ; and_ + "uviesen"} ;
    VP (Pret Sg P1) => and_ + "uve" ;
    VP (Pret Sg P2) => and_ + "uviste" ;
    VP (Pret Sg P3) => and_ + "uvo" ;
    VP (Pret Pl P1) => and_ + "uvimos" ;
    VP (Pret Pl P2) => and_ + "uvisteis" ;
    VP (Pret Pl P3) => and_ + "uvieron" ;
    VP (Fut Ind Sg P1) => and_ + "aré" ;
    VP (Fut Ind Sg P2) => and_ + "arás" ;
    VP (Fut Ind Sg P3) => and_ + "ará" ;
    VP (Fut Ind Pl P1) => and_ + "aremos" ;
    VP (Fut Ind Pl P2) => and_ + "aréis" ;
    VP (Fut Ind Pl P3) => and_ + "arán" ;
    VP (Fut Subj Sg P1) => and_ + "uviere" ;
    VP (Fut Subj Sg P2) => and_ + "uvieres" ;
    VP (Fut Subj Sg P3) => and_ + "uviere" ;
    VP (Fut Subj Pl P1) => and_ + "uviéremos" ;
    VP (Fut Subj Pl P2) => and_ + "uviereis" ;
    VP (Fut Subj Pl P3) => and_ + "uvieren" ;
    VP (Cond Sg P1) => and_ + "aría" ;
    VP (Cond Sg P2) => and_ + "arías" ;
    VP (Cond Sg P3) => and_ + "aría" ;
    VP (Cond Pl P1) => and_ + "aríamos" ;
    VP (Cond Pl P2) => and_ + "aríais" ;
    VP (Cond Pl P3) => and_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => and_ + "a" ;
    VP (Imp Sg P3) => and_ + "e" ;
    VP (Imp Pl P1) => and_ + "emos" ;
    VP (Imp Pl P2) => and_ + "ad" ;
    VP (Imp Pl P3) => and_ + "en" ;
    VP (Pass Sg Masc) => and_ + "ado" ;
    VP (Pass Sg Fem) => and_ + "ada" ;
    VP (Pass Pl Masc) => and_ + "ados" ;
    VP (Pass Pl Fem) => and_ + "adas"
    }
  } ;
oper asir_14 : Str -> Verbum = \asir ->
  let as_ = Predef.tk 2 asir in
 {s = table {
    VI Infn => as_ + "ir" ;
    VI Ger => as_ + "iendo" ;
    VI Part => as_ + "ido" ;
    VP (Pres Ind Sg P1) => as_ + "go" ;
    VP (Pres Ind Sg P2) => as_ + "es" ;
    VP (Pres Ind Sg P3) => as_ + "e" ;
    VP (Pres Ind Pl P1) => as_ + "imos" ;
    VP (Pres Ind Pl P2) => as_ + "ís" ;
    VP (Pres Ind Pl P3) => as_ + "en" ;
    VP (Pres Subj Sg P1) => as_ + "ga" ;
    VP (Pres Subj Sg P2) => as_ + "gas" ;
    VP (Pres Subj Sg P3) => as_ + "ga" ;
    VP (Pres Subj Pl P1) => as_ + "gamos" ;
    VP (Pres Subj Pl P2) => as_ + "gáis" ;
    VP (Pres Subj Pl P3) => as_ + "gan" ;
    VP (Past Ind Sg P1) => as_ + "ía" ;
    VP (Past Ind Sg P2) => as_ + "ías" ;
    VP (Past Ind Sg P3) => as_ + "ía" ;
    VP (Past Ind Pl P1) => as_ + "íamos" ;
    VP (Past Ind Pl P2) => as_ + "íais" ;
    VP (Past Ind Pl P3) => as_ + "ían" ;
    VP (Past Subj Sg P1) => variants {as_ + "iera" ; as_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {as_ + "ieras" ; as_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {as_ + "iera" ; as_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {as_ + "iéramos" ; as_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {as_ + "ierais" ; as_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {as_ + "ieran" ; as_ + "iesen"} ;
    VP (Pret Sg P1) => as_ + "í" ;
    VP (Pret Sg P2) => as_ + "iste" ;
    VP (Pret Sg P3) => as_ + "ió" ;
    VP (Pret Pl P1) => as_ + "imos" ;
    VP (Pret Pl P2) => as_ + "isteis" ;
    VP (Pret Pl P3) => as_ + "ieron" ;
    VP (Fut Ind Sg P1) => as_ + "iré" ;
    VP (Fut Ind Sg P2) => as_ + "irás" ;
    VP (Fut Ind Sg P3) => as_ + "irá" ;
    VP (Fut Ind Pl P1) => as_ + "iremos" ;
    VP (Fut Ind Pl P2) => as_ + "iréis" ;
    VP (Fut Ind Pl P3) => as_ + "irán" ;
    VP (Fut Subj Sg P1) => as_ + "iere" ;
    VP (Fut Subj Sg P2) => as_ + "ieres" ;
    VP (Fut Subj Sg P3) => as_ + "iere" ;
    VP (Fut Subj Pl P1) => as_ + "iéremos" ;
    VP (Fut Subj Pl P2) => as_ + "iereis" ;
    VP (Fut Subj Pl P3) => as_ + "ieren" ;
    VP (Cond Sg P1) => as_ + "iría" ;
    VP (Cond Sg P2) => as_ + "irías" ;
    VP (Cond Sg P3) => as_ + "iría" ;
    VP (Cond Pl P1) => as_ + "iríamos" ;
    VP (Cond Pl P2) => as_ + "iríais" ;
    VP (Cond Pl P3) => as_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => as_ + "e" ;
    VP (Imp Sg P3) => as_ + "ga" ;
    VP (Imp Pl P1) => as_ + "gamos" ;
    VP (Imp Pl P2) => as_ + "id" ;
    VP (Imp Pl P3) => as_ + "gan" ;
    VP (Pass Sg Masc) => as_ + "ido" ;
    VP (Pass Sg Fem) => as_ + "ida" ;
    VP (Pass Pl Masc) => as_ + "idos" ;
    VP (Pass Pl Fem) => as_ + "idas"
    }
  } ;
oper aullar_15 : Str -> Verbum = \aullar ->
  let a_ = Predef.tk 5 aullar in
 {s = table {
    VI Infn => a_ + "ullar" ;
    VI Ger => a_ + "ullando" ;
    VI Part => a_ + "ullado" ;
    VP (Pres Ind Sg P1) => a_ + "úllo" ;
    VP (Pres Ind Sg P2) => a_ + "úllas" ;
    VP (Pres Ind Sg P3) => a_ + "úlla" ;
    VP (Pres Ind Pl P1) => a_ + "ullamos" ;
    VP (Pres Ind Pl P2) => a_ + "ulláis" ;
    VP (Pres Ind Pl P3) => a_ + "úllan" ;
    VP (Pres Subj Sg P1) => a_ + "úlle" ;
    VP (Pres Subj Sg P2) => a_ + "úlles" ;
    VP (Pres Subj Sg P3) => a_ + "úlle" ;
    VP (Pres Subj Pl P1) => a_ + "ullemos" ;
    VP (Pres Subj Pl P2) => a_ + "ulléis" ;
    VP (Pres Subj Pl P3) => a_ + "úllen" ;
    VP (Past Ind Sg P1) => a_ + "ullaba" ;
    VP (Past Ind Sg P2) => a_ + "ullabas" ;
    VP (Past Ind Sg P3) => a_ + "ullaba" ;
    VP (Past Ind Pl P1) => a_ + "ullábamos" ;
    VP (Past Ind Pl P2) => a_ + "ullabais" ;
    VP (Past Ind Pl P3) => a_ + "ullaban" ;
    VP (Past Subj Sg P1) => variants {a_ + "ullara" ; a_ + "ullase"} ;
    VP (Past Subj Sg P2) => variants {a_ + "ullaras" ; a_ + "ullases"} ;
    VP (Past Subj Sg P3) => variants {a_ + "ullara" ; a_ + "ullase"} ;
    VP (Past Subj Pl P1) => variants {a_ + "ulláramos" ; a_ + "ullásemos"} ;
    VP (Past Subj Pl P2) => variants {a_ + "ullarais" ; a_ + "ullaseis"} ;
    VP (Past Subj Pl P3) => variants {a_ + "ullaran" ; a_ + "ullasen"} ;
    VP (Pret Sg P1) => a_ + "ullé" ;
    VP (Pret Sg P2) => a_ + "ullaste" ;
    VP (Pret Sg P3) => a_ + "ulló" ;
    VP (Pret Pl P1) => a_ + "ullamos" ;
    VP (Pret Pl P2) => a_ + "ullasteis" ;
    VP (Pret Pl P3) => a_ + "ullaron" ;
    VP (Fut Ind Sg P1) => a_ + "ullaré" ;
    VP (Fut Ind Sg P2) => a_ + "ullarás" ;
    VP (Fut Ind Sg P3) => a_ + "ullará" ;
    VP (Fut Ind Pl P1) => a_ + "ullaremos" ;
    VP (Fut Ind Pl P2) => a_ + "ullaréis" ;
    VP (Fut Ind Pl P3) => a_ + "ullarán" ;
    VP (Fut Subj Sg P1) => a_ + "ullare" ;
    VP (Fut Subj Sg P2) => a_ + "ullares" ;
    VP (Fut Subj Sg P3) => a_ + "ullare" ;
    VP (Fut Subj Pl P1) => a_ + "ulláremos" ;
    VP (Fut Subj Pl P2) => a_ + "ullareis" ;
    VP (Fut Subj Pl P3) => a_ + "ullaren" ;
    VP (Cond Sg P1) => a_ + "ullaría" ;
    VP (Cond Sg P2) => a_ + "ullarías" ;
    VP (Cond Sg P3) => a_ + "ullaría" ;
    VP (Cond Pl P1) => a_ + "ullaríamos" ;
    VP (Cond Pl P2) => a_ + "ullaríais" ;
    VP (Cond Pl P3) => a_ + "ullarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => a_ + "úlla" ;
    VP (Imp Sg P3) => a_ + "úlle" ;
    VP (Imp Pl P1) => a_ + "ullemos" ;
    VP (Imp Pl P2) => a_ + "ullad" ;
    VP (Imp Pl P3) => a_ + "úllen" ;
    VP (Pass Sg Masc) => a_ + "ullado" ;
    VP (Pass Sg Fem) => a_ + "ullada" ;
    VP (Pass Pl Masc) => a_ + "ullados" ;
    VP (Pass Pl Fem) => a_ + "ulladas"
    }
  } ;
oper avergonzar_16 : Str -> Verbum = \avergonzar ->
  let averg_ = Predef.tk 5 avergonzar in
 {s = table {
    VI Infn => averg_ + "onzar" ;
    VI Ger => averg_ + "onzando" ;
    VI Part => averg_ + "onzado" ;
    VP (Pres Ind Sg P1) => averg_ + "üenzo" ;
    VP (Pres Ind Sg P2) => averg_ + "üenzas" ;
    VP (Pres Ind Sg P3) => averg_ + "üenza" ;
    VP (Pres Ind Pl P1) => averg_ + "onzamos" ;
    VP (Pres Ind Pl P2) => averg_ + "onzáis" ;
    VP (Pres Ind Pl P3) => averg_ + "üenzan" ;
    VP (Pres Subj Sg P1) => averg_ + "üence" ;
    VP (Pres Subj Sg P2) => averg_ + "üences" ;
    VP (Pres Subj Sg P3) => averg_ + "üence" ;
    VP (Pres Subj Pl P1) => averg_ + "oncemos" ;
    VP (Pres Subj Pl P2) => averg_ + "oncéis" ;
    VP (Pres Subj Pl P3) => averg_ + "üencen" ;
    VP (Past Ind Sg P1) => averg_ + "onzaba" ;
    VP (Past Ind Sg P2) => averg_ + "onzabas" ;
    VP (Past Ind Sg P3) => averg_ + "onzaba" ;
    VP (Past Ind Pl P1) => averg_ + "onzábamos" ;
    VP (Past Ind Pl P2) => averg_ + "onzabais" ;
    VP (Past Ind Pl P3) => averg_ + "onzaban" ;
    VP (Past Subj Sg P1) => variants {averg_ + "onzara" ; averg_ + "onzase"} ;
    VP (Past Subj Sg P2) => variants {averg_ + "onzaras" ; averg_ + "onzases"} ;
    VP (Past Subj Sg P3) => variants {averg_ + "onzara" ; averg_ + "onzase"} ;
    VP (Past Subj Pl P1) => variants {averg_ + "onzáramos" ; averg_ + "onzásemos"} ;
    VP (Past Subj Pl P2) => variants {averg_ + "onzarais" ; averg_ + "onzaseis"} ;
    VP (Past Subj Pl P3) => variants {averg_ + "onzaran" ; averg_ + "onzasen"} ;
    VP (Pret Sg P1) => averg_ + "oncé" ;
    VP (Pret Sg P2) => averg_ + "onzaste" ;
    VP (Pret Sg P3) => averg_ + "onzó" ;
    VP (Pret Pl P1) => averg_ + "onzamos" ;
    VP (Pret Pl P2) => averg_ + "onzasteis" ;
    VP (Pret Pl P3) => averg_ + "onzaron" ;
    VP (Fut Ind Sg P1) => averg_ + "onzaré" ;
    VP (Fut Ind Sg P2) => averg_ + "onzarás" ;
    VP (Fut Ind Sg P3) => averg_ + "onzará" ;
    VP (Fut Ind Pl P1) => averg_ + "onzaremos" ;
    VP (Fut Ind Pl P2) => averg_ + "onzaréis" ;
    VP (Fut Ind Pl P3) => averg_ + "onzarán" ;
    VP (Fut Subj Sg P1) => averg_ + "onzare" ;
    VP (Fut Subj Sg P2) => averg_ + "onzares" ;
    VP (Fut Subj Sg P3) => averg_ + "onzare" ;
    VP (Fut Subj Pl P1) => averg_ + "onzáremos" ;
    VP (Fut Subj Pl P2) => averg_ + "onzareis" ;
    VP (Fut Subj Pl P3) => averg_ + "onzaren" ;
    VP (Cond Sg P1) => averg_ + "onzaría" ;
    VP (Cond Sg P2) => averg_ + "onzarías" ;
    VP (Cond Sg P3) => averg_ + "onzaría" ;
    VP (Cond Pl P1) => averg_ + "onzaríamos" ;
    VP (Cond Pl P2) => averg_ + "onzaríais" ;
    VP (Cond Pl P3) => averg_ + "onzarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => averg_ + "üenza" ;
    VP (Imp Sg P3) => averg_ + "üence" ;
    VP (Imp Pl P1) => averg_ + "oncemos" ;
    VP (Imp Pl P2) => averg_ + "onzad" ;
    VP (Imp Pl P3) => averg_ + "üencen" ;
    VP (Pass Sg Masc) => averg_ + "onzado" ;
    VP (Pass Sg Fem) => averg_ + "onzada" ;
    VP (Pass Pl Masc) => averg_ + "onzados" ;
    VP (Pass Pl Fem) => averg_ + "onzadas"
    }
  } ;
oper averiguar_17 : Str -> Verbum = \averiguar ->
  let averig_ = Predef.tk 3 averiguar in
 {s = table {
    VI Infn => averig_ + "uar" ;
    VI Ger => averig_ + "uando" ;
    VI Part => averig_ + "uado" ;
    VP (Pres Ind Sg P1) => averig_ + "uo" ;
    VP (Pres Ind Sg P2) => averig_ + "uas" ;
    VP (Pres Ind Sg P3) => averig_ + "ua" ;
    VP (Pres Ind Pl P1) => averig_ + "uamos" ;
    VP (Pres Ind Pl P2) => averig_ + "uáis" ;
    VP (Pres Ind Pl P3) => averig_ + "uan" ;
    VP (Pres Subj Sg P1) => averig_ + "üe" ;
    VP (Pres Subj Sg P2) => averig_ + "ües" ;
    VP (Pres Subj Sg P3) => averig_ + "üe" ;
    VP (Pres Subj Pl P1) => averig_ + "üemos" ;
    VP (Pres Subj Pl P2) => averig_ + "üéis" ;
    VP (Pres Subj Pl P3) => averig_ + "üen" ;
    VP (Past Ind Sg P1) => averig_ + "uaba" ;
    VP (Past Ind Sg P2) => averig_ + "uabas" ;
    VP (Past Ind Sg P3) => averig_ + "uaba" ;
    VP (Past Ind Pl P1) => averig_ + "uábamos" ;
    VP (Past Ind Pl P2) => averig_ + "uabais" ;
    VP (Past Ind Pl P3) => averig_ + "uaban" ;
    VP (Past Subj Sg P1) => variants {averig_ + "uara" ; averig_ + "uase"} ;
    VP (Past Subj Sg P2) => variants {averig_ + "uaras" ; averig_ + "uases"} ;
    VP (Past Subj Sg P3) => variants {averig_ + "uara" ; averig_ + "uase"} ;
    VP (Past Subj Pl P1) => variants {averig_ + "uáramos" ; averig_ + "uásemos"} ;
    VP (Past Subj Pl P2) => variants {averig_ + "uarais" ; averig_ + "uaseis"} ;
    VP (Past Subj Pl P3) => variants {averig_ + "uaran" ; averig_ + "uasen"} ;
    VP (Pret Sg P1) => averig_ + "üé" ;
    VP (Pret Sg P2) => averig_ + "uaste" ;
    VP (Pret Sg P3) => averig_ + "uó" ;
    VP (Pret Pl P1) => averig_ + "uamos" ;
    VP (Pret Pl P2) => averig_ + "uasteis" ;
    VP (Pret Pl P3) => averig_ + "uaron" ;
    VP (Fut Ind Sg P1) => averig_ + "uaré" ;
    VP (Fut Ind Sg P2) => averig_ + "uarás" ;
    VP (Fut Ind Sg P3) => averig_ + "uará" ;
    VP (Fut Ind Pl P1) => averig_ + "uaremos" ;
    VP (Fut Ind Pl P2) => averig_ + "uaréis" ;
    VP (Fut Ind Pl P3) => averig_ + "uarán" ;
    VP (Fut Subj Sg P1) => averig_ + "uare" ;
    VP (Fut Subj Sg P2) => averig_ + "uares" ;
    VP (Fut Subj Sg P3) => averig_ + "uare" ;
    VP (Fut Subj Pl P1) => averig_ + "uáremos" ;
    VP (Fut Subj Pl P2) => averig_ + "uareis" ;
    VP (Fut Subj Pl P3) => averig_ + "uaren" ;
    VP (Cond Sg P1) => averig_ + "uaría" ;
    VP (Cond Sg P2) => averig_ + "uarías" ;
    VP (Cond Sg P3) => averig_ + "uaría" ;
    VP (Cond Pl P1) => averig_ + "uaríamos" ;
    VP (Cond Pl P2) => averig_ + "uaríais" ;
    VP (Cond Pl P3) => averig_ + "uarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => averig_ + "ua" ;
    VP (Imp Sg P3) => averig_ + "üe" ;
    VP (Imp Pl P1) => averig_ + "üemos" ;
    VP (Imp Pl P2) => averig_ + "uad" ;
    VP (Imp Pl P3) => averig_ + "üen" ;
    VP (Pass Sg Masc) => averig_ + "uado" ;
    VP (Pass Sg Fem) => averig_ + "uada" ;
    VP (Pass Pl Masc) => averig_ + "uados" ;
    VP (Pass Pl Fem) => averig_ + "uadas"
    }
  } ;
oper bruñir_18 : Str -> Verbum = \bruñir ->
  let bruñ_ = Predef.tk 2 bruñir in
 {s = table {
    VI Infn => bruñ_ + "ir" ;
    VI Ger => bruñ_ + "endo" ;
    VI Part => bruñ_ + "ido" ;
    VP (Pres Ind Sg P1) => bruñ_ + "o" ;
    VP (Pres Ind Sg P2) => bruñ_ + "es" ;
    VP (Pres Ind Sg P3) => bruñ_ + "e" ;
    VP (Pres Ind Pl P1) => bruñ_ + "imos" ;
    VP (Pres Ind Pl P2) => bruñ_ + "ís" ;
    VP (Pres Ind Pl P3) => bruñ_ + "en" ;
    VP (Pres Subj Sg P1) => bruñ_ + "a" ;
    VP (Pres Subj Sg P2) => bruñ_ + "as" ;
    VP (Pres Subj Sg P3) => bruñ_ + "a" ;
    VP (Pres Subj Pl P1) => bruñ_ + "amos" ;
    VP (Pres Subj Pl P2) => bruñ_ + "áis" ;
    VP (Pres Subj Pl P3) => bruñ_ + "an" ;
    VP (Past Ind Sg P1) => bruñ_ + "ía" ;
    VP (Past Ind Sg P2) => bruñ_ + "ías" ;
    VP (Past Ind Sg P3) => bruñ_ + "ía" ;
    VP (Past Ind Pl P1) => bruñ_ + "íamos" ;
    VP (Past Ind Pl P2) => bruñ_ + "íais" ;
    VP (Past Ind Pl P3) => bruñ_ + "ían" ;
    VP (Past Subj Sg P1) => variants {bruñ_ + "era" ; bruñ_ + "ese"} ;
    VP (Past Subj Sg P2) => variants {bruñ_ + "eras" ; bruñ_ + "eses"} ;
    VP (Past Subj Sg P3) => variants {bruñ_ + "era" ; bruñ_ + "ese"} ;
    VP (Past Subj Pl P1) => variants {bruñ_ + "éramos" ; bruñ_ + "ésemos"} ;
    VP (Past Subj Pl P2) => variants {bruñ_ + "erais" ; bruñ_ + "eseis"} ;
    VP (Past Subj Pl P3) => variants {bruñ_ + "eran" ; bruñ_ + "esen"} ;
    VP (Pret Sg P1) => bruñ_ + "í" ;
    VP (Pret Sg P2) => bruñ_ + "iste" ;
    VP (Pret Sg P3) => bruñ_ + "ó" ;
    VP (Pret Pl P1) => bruñ_ + "imos" ;
    VP (Pret Pl P2) => bruñ_ + "isteis" ;
    VP (Pret Pl P3) => bruñ_ + "eron" ;
    VP (Fut Ind Sg P1) => bruñ_ + "iré" ;
    VP (Fut Ind Sg P2) => bruñ_ + "irás" ;
    VP (Fut Ind Sg P3) => bruñ_ + "irá" ;
    VP (Fut Ind Pl P1) => bruñ_ + "iremos" ;
    VP (Fut Ind Pl P2) => bruñ_ + "iréis" ;
    VP (Fut Ind Pl P3) => bruñ_ + "irán" ;
    VP (Fut Subj Sg P1) => bruñ_ + "ere" ;
    VP (Fut Subj Sg P2) => bruñ_ + "eres" ;
    VP (Fut Subj Sg P3) => bruñ_ + "ere" ;
    VP (Fut Subj Pl P1) => bruñ_ + "éremos" ;
    VP (Fut Subj Pl P2) => bruñ_ + "ereis" ;
    VP (Fut Subj Pl P3) => bruñ_ + "eren" ;
    VP (Cond Sg P1) => bruñ_ + "iría" ;
    VP (Cond Sg P2) => bruñ_ + "irías" ;
    VP (Cond Sg P3) => bruñ_ + "iría" ;
    VP (Cond Pl P1) => bruñ_ + "iríamos" ;
    VP (Cond Pl P2) => bruñ_ + "iríais" ;
    VP (Cond Pl P3) => bruñ_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => bruñ_ + "e" ;
    VP (Imp Sg P3) => bruñ_ + "a" ;
    VP (Imp Pl P1) => bruñ_ + "amos" ;
    VP (Imp Pl P2) => bruñ_ + "id" ;
    VP (Imp Pl P3) => bruñ_ + "an" ;
    VP (Pass Sg Masc) => bruñ_ + "ido" ;
    VP (Pass Sg Fem) => bruñ_ + "ida" ;
    VP (Pass Pl Masc) => bruñ_ + "idos" ;
    VP (Pass Pl Fem) => bruñ_ + "idas"
    }
  } ;
oper caber_19 : Str -> Verbum = \caber ->
  let x_ = Predef.tk 5 caber in
 {s = table {
    VI Infn => x_ + "caber" ;
    VI Ger => x_ + "cabiendo" ;
    VI Part => x_ + "cabido" ;
    VP (Pres Ind Sg P1) => x_ + "quepo" ;
    VP (Pres Ind Sg P2) => x_ + "cabes" ;
    VP (Pres Ind Sg P3) => x_ + "cabe" ;
    VP (Pres Ind Pl P1) => x_ + "cabemos" ;
    VP (Pres Ind Pl P2) => x_ + "cabéis" ;
    VP (Pres Ind Pl P3) => x_ + "caben" ;
    VP (Pres Subj Sg P1) => x_ + "quepa" ;
    VP (Pres Subj Sg P2) => x_ + "quepas" ;
    VP (Pres Subj Sg P3) => x_ + "quepa" ;
    VP (Pres Subj Pl P1) => x_ + "quepamos" ;
    VP (Pres Subj Pl P2) => x_ + "quepáis" ;
    VP (Pres Subj Pl P3) => x_ + "quepan" ;
    VP (Past Ind Sg P1) => x_ + "cabía" ;
    VP (Past Ind Sg P2) => x_ + "cabías" ;
    VP (Past Ind Sg P3) => x_ + "cabía" ;
    VP (Past Ind Pl P1) => x_ + "cabíamos" ;
    VP (Past Ind Pl P2) => x_ + "cabíais" ;
    VP (Past Ind Pl P3) => x_ + "cabían" ;
    VP (Past Subj Sg P1) => variants {x_ + "cupiera" ; x_ + "cupiese"} ;
    VP (Past Subj Sg P2) => variants {x_ + "cupieras" ; x_ + "cupieses"} ;
    VP (Past Subj Sg P3) => variants {x_ + "cupiera" ; x_ + "cupiese"} ;
    VP (Past Subj Pl P1) => variants {x_ + "cupiéramos" ; x_ + "cupiésemos"} ;
    VP (Past Subj Pl P2) => variants {x_ + "cupierais" ; x_ + "cupieseis"} ;
    VP (Past Subj Pl P3) => variants {x_ + "cupieran" ; x_ + "cupiesen"} ;
    VP (Pret Sg P1) => x_ + "cupe" ;
    VP (Pret Sg P2) => x_ + "cupiste" ;
    VP (Pret Sg P3) => x_ + "cupo" ;
    VP (Pret Pl P1) => x_ + "cupimos" ;
    VP (Pret Pl P2) => x_ + "cupisteis" ;
    VP (Pret Pl P3) => x_ + "cupieron" ;
    VP (Fut Ind Sg P1) => x_ + "cabré" ;
    VP (Fut Ind Sg P2) => x_ + "cabrás" ;
    VP (Fut Ind Sg P3) => x_ + "cabrá" ;
    VP (Fut Ind Pl P1) => x_ + "cabremos" ;
    VP (Fut Ind Pl P2) => x_ + "cabréis" ;
    VP (Fut Ind Pl P3) => x_ + "cabrán" ;
    VP (Fut Subj Sg P1) => x_ + "cupiere" ;
    VP (Fut Subj Sg P2) => x_ + "cupieres" ;
    VP (Fut Subj Sg P3) => x_ + "cupiere" ;
    VP (Fut Subj Pl P1) => x_ + "cupiéremos" ;
    VP (Fut Subj Pl P2) => x_ + "cupiereis" ;
    VP (Fut Subj Pl P3) => x_ + "cupieren" ;
    VP (Cond Sg P1) => x_ + "cabría" ;
    VP (Cond Sg P2) => x_ + "cabrías" ;
    VP (Cond Sg P3) => x_ + "cabría" ;
    VP (Cond Pl P1) => x_ + "cabríamos" ;
    VP (Cond Pl P2) => x_ + "cabríais" ;
    VP (Cond Pl P3) => x_ + "cabrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => x_ + "cabe" ;
    VP (Imp Sg P3) => x_ + "quepa" ;
    VP (Imp Pl P1) => x_ + "quepamos" ;
    VP (Imp Pl P2) => x_ + "cabed" ;
    VP (Imp Pl P3) => x_ + "quepan" ;
    VP (Pass Sg Masc) => x_ + "cabido" ;
    VP (Pass Sg Fem) => x_ + "cabida" ;
    VP (Pass Pl Masc) => x_ + "cabidos" ;
    VP (Pass Pl Fem) => x_ + "cabidas"
    }
  } ;
oper caer_20 : Str -> Verbum = \caer ->
  let ca_ = Predef.tk 2 caer in
 {s = table {
    VI Infn => ca_ + "er" ;
    VI Ger => ca_ + "yendo" ;
    VI Part => ca_ + "ído" ;
    VP (Pres Ind Sg P1) => ca_ + "igo" ;
    VP (Pres Ind Sg P2) => ca_ + "es" ;
    VP (Pres Ind Sg P3) => ca_ + "e" ;
    VP (Pres Ind Pl P1) => ca_ + "emos" ;
    VP (Pres Ind Pl P2) => ca_ + "éis" ;
    VP (Pres Ind Pl P3) => ca_ + "en" ;
    VP (Pres Subj Sg P1) => ca_ + "iga" ;
    VP (Pres Subj Sg P2) => ca_ + "igas" ;
    VP (Pres Subj Sg P3) => ca_ + "iga" ;
    VP (Pres Subj Pl P1) => ca_ + "igamos" ;
    VP (Pres Subj Pl P2) => ca_ + "igáis" ;
    VP (Pres Subj Pl P3) => ca_ + "igan" ;
    VP (Past Ind Sg P1) => ca_ + "ía" ;
    VP (Past Ind Sg P2) => ca_ + "ías" ;
    VP (Past Ind Sg P3) => ca_ + "ía" ;
    VP (Past Ind Pl P1) => ca_ + "íamos" ;
    VP (Past Ind Pl P2) => ca_ + "íais" ;
    VP (Past Ind Pl P3) => ca_ + "ían" ;
    VP (Past Subj Sg P1) => variants {ca_ + "yera" ; ca_ + "yese"} ;
    VP (Past Subj Sg P2) => variants {ca_ + "yeras" ; ca_ + "yeses"} ;
    VP (Past Subj Sg P3) => variants {ca_ + "yera" ; ca_ + "yese"} ;
    VP (Past Subj Pl P1) => variants {ca_ + "yéramos" ; ca_ + "yésemos"} ;
    VP (Past Subj Pl P2) => variants {ca_ + "yerais" ; ca_ + "yeseis"} ;
    VP (Past Subj Pl P3) => variants {ca_ + "yeran" ; ca_ + "yesen"} ;
    VP (Pret Sg P1) => ca_ + "í" ;
    VP (Pret Sg P2) => ca_ + "íste" ;
    VP (Pret Sg P3) => ca_ + "yó" ;
    VP (Pret Pl P1) => ca_ + "ímos" ;
    VP (Pret Pl P2) => ca_ + "ísteis" ;
    VP (Pret Pl P3) => ca_ + "yeron" ;
    VP (Fut Ind Sg P1) => ca_ + "eré" ;
    VP (Fut Ind Sg P2) => ca_ + "erás" ;
    VP (Fut Ind Sg P3) => ca_ + "erá" ;
    VP (Fut Ind Pl P1) => ca_ + "eremos" ;
    VP (Fut Ind Pl P2) => ca_ + "eréis" ;
    VP (Fut Ind Pl P3) => ca_ + "erán" ;
    VP (Fut Subj Sg P1) => ca_ + "yere" ;
    VP (Fut Subj Sg P2) => ca_ + "yeres" ;
    VP (Fut Subj Sg P3) => ca_ + "yere" ;
    VP (Fut Subj Pl P1) => ca_ + "yéremos" ;
    VP (Fut Subj Pl P2) => ca_ + "yereis" ;
    VP (Fut Subj Pl P3) => ca_ + "yeren" ;
    VP (Cond Sg P1) => ca_ + "ería" ;
    VP (Cond Sg P2) => ca_ + "erías" ;
    VP (Cond Sg P3) => ca_ + "ería" ;
    VP (Cond Pl P1) => ca_ + "eríamos" ;
    VP (Cond Pl P2) => ca_ + "eríais" ;
    VP (Cond Pl P3) => ca_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ca_ + "e" ;
    VP (Imp Sg P3) => ca_ + "iga" ;
    VP (Imp Pl P1) => ca_ + "igamos" ;
    VP (Imp Pl P2) => ca_ + "ed" ;
    VP (Imp Pl P3) => ca_ + "igan" ;
    VP (Pass Sg Masc) => ca_ + "ído" ;
    VP (Pass Sg Fem) => ca_ + "ída" ;
    VP (Pass Pl Masc) => ca_ + "ídos" ;
    VP (Pass Pl Fem) => ca_ + "ídas"
    }
  } ;
oper cazar_21 : Str -> Verbum = \cazar ->
  let ca_ = Predef.tk 3 cazar in
 {s = table {
    VI Infn => ca_ + "zar" ;
    VI Ger => ca_ + "zando" ;
    VI Part => ca_ + "zado" ;
    VP (Pres Ind Sg P1) => ca_ + "zo" ;
    VP (Pres Ind Sg P2) => ca_ + "zas" ;
    VP (Pres Ind Sg P3) => ca_ + "za" ;
    VP (Pres Ind Pl P1) => ca_ + "zamos" ;
    VP (Pres Ind Pl P2) => ca_ + "záis" ;
    VP (Pres Ind Pl P3) => ca_ + "zan" ;
    VP (Pres Subj Sg P1) => ca_ + "ce" ;
    VP (Pres Subj Sg P2) => ca_ + "ces" ;
    VP (Pres Subj Sg P3) => ca_ + "ce" ;
    VP (Pres Subj Pl P1) => ca_ + "cemos" ;
    VP (Pres Subj Pl P2) => ca_ + "céis" ;
    VP (Pres Subj Pl P3) => ca_ + "cen" ;
    VP (Past Ind Sg P1) => ca_ + "zaba" ;
    VP (Past Ind Sg P2) => ca_ + "zabas" ;
    VP (Past Ind Sg P3) => ca_ + "zaba" ;
    VP (Past Ind Pl P1) => ca_ + "zábamos" ;
    VP (Past Ind Pl P2) => ca_ + "zabais" ;
    VP (Past Ind Pl P3) => ca_ + "zaban" ;
    VP (Past Subj Sg P1) => variants {ca_ + "zara" ; ca_ + "zase"} ;
    VP (Past Subj Sg P2) => variants {ca_ + "zaras" ; ca_ + "zases"} ;
    VP (Past Subj Sg P3) => variants {ca_ + "zara" ; ca_ + "zase"} ;
    VP (Past Subj Pl P1) => variants {ca_ + "záramos" ; ca_ + "zásemos"} ;
    VP (Past Subj Pl P2) => variants {ca_ + "zarais" ; ca_ + "zaseis"} ;
    VP (Past Subj Pl P3) => variants {ca_ + "zaran" ; ca_ + "zasen"} ;
    VP (Pret Sg P1) => ca_ + "cé" ;
    VP (Pret Sg P2) => ca_ + "zaste" ;
    VP (Pret Sg P3) => ca_ + "zó" ;
    VP (Pret Pl P1) => ca_ + "zamos" ;
    VP (Pret Pl P2) => ca_ + "zasteis" ;
    VP (Pret Pl P3) => ca_ + "zaron" ;
    VP (Fut Ind Sg P1) => ca_ + "zaré" ;
    VP (Fut Ind Sg P2) => ca_ + "zarás" ;
    VP (Fut Ind Sg P3) => ca_ + "zará" ;
    VP (Fut Ind Pl P1) => ca_ + "zaremos" ;
    VP (Fut Ind Pl P2) => ca_ + "zaréis" ;
    VP (Fut Ind Pl P3) => ca_ + "zarán" ;
    VP (Fut Subj Sg P1) => ca_ + "zare" ;
    VP (Fut Subj Sg P2) => ca_ + "zares" ;
    VP (Fut Subj Sg P3) => ca_ + "zare" ;
    VP (Fut Subj Pl P1) => ca_ + "záremos" ;
    VP (Fut Subj Pl P2) => ca_ + "zareis" ;
    VP (Fut Subj Pl P3) => ca_ + "zaren" ;
    VP (Cond Sg P1) => ca_ + "zaría" ;
    VP (Cond Sg P2) => ca_ + "zarías" ;
    VP (Cond Sg P3) => ca_ + "zaría" ;
    VP (Cond Pl P1) => ca_ + "zaríamos" ;
    VP (Cond Pl P2) => ca_ + "zaríais" ;
    VP (Cond Pl P3) => ca_ + "zarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ca_ + "za" ;
    VP (Imp Sg P3) => ca_ + "ce" ;
    VP (Imp Pl P1) => ca_ + "cemos" ;
    VP (Imp Pl P2) => ca_ + "zad" ;
    VP (Imp Pl P3) => ca_ + "cen" ;
    VP (Pass Sg Masc) => ca_ + "zado" ;
    VP (Pass Sg Fem) => ca_ + "zada" ;
    VP (Pass Pl Masc) => ca_ + "zados" ;
    VP (Pass Pl Fem) => ca_ + "zadas"
    }
  } ;
oper cocer_22 : Str -> Verbum = \cocer ->
  let c_ = Predef.tk 4 cocer in
 {s = table {
    VI Infn => c_ + "ocer" ;
    VI Ger => c_ + "ociendo" ;
    VI Part => c_ + "ocido" ;
    VP (Pres Ind Sg P1) => c_ + "uezo" ;
    VP (Pres Ind Sg P2) => c_ + "ueces" ;
    VP (Pres Ind Sg P3) => c_ + "uece" ;
    VP (Pres Ind Pl P1) => c_ + "ocemos" ;
    VP (Pres Ind Pl P2) => c_ + "océis" ;
    VP (Pres Ind Pl P3) => c_ + "uecen" ;
    VP (Pres Subj Sg P1) => c_ + "ueza" ;
    VP (Pres Subj Sg P2) => c_ + "uezas" ;
    VP (Pres Subj Sg P3) => c_ + "ueza" ;
    VP (Pres Subj Pl P1) => c_ + "ozamos" ;
    VP (Pres Subj Pl P2) => c_ + "ozáis" ;
    VP (Pres Subj Pl P3) => c_ + "uezan" ;
    VP (Past Ind Sg P1) => c_ + "ocía" ;
    VP (Past Ind Sg P2) => c_ + "ocías" ;
    VP (Past Ind Sg P3) => c_ + "ocía" ;
    VP (Past Ind Pl P1) => c_ + "ocíamos" ;
    VP (Past Ind Pl P2) => c_ + "ocíais" ;
    VP (Past Ind Pl P3) => c_ + "ocían" ;
    VP (Past Subj Sg P1) => variants {c_ + "ociera" ; c_ + "ociese"} ;
    VP (Past Subj Sg P2) => variants {c_ + "ocieras" ; c_ + "ocieses"} ;
    VP (Past Subj Sg P3) => variants {c_ + "ociera" ; c_ + "ociese"} ;
    VP (Past Subj Pl P1) => variants {c_ + "ociéramos" ; c_ + "ociésemos"} ;
    VP (Past Subj Pl P2) => variants {c_ + "ocierais" ; c_ + "ocieseis"} ;
    VP (Past Subj Pl P3) => variants {c_ + "ocieran" ; c_ + "ociesen"} ;
    VP (Pret Sg P1) => c_ + "ocí" ;
    VP (Pret Sg P2) => c_ + "ociste" ;
    VP (Pret Sg P3) => c_ + "oció" ;
    VP (Pret Pl P1) => c_ + "ocimos" ;
    VP (Pret Pl P2) => c_ + "ocisteis" ;
    VP (Pret Pl P3) => c_ + "ocieron" ;
    VP (Fut Ind Sg P1) => c_ + "oceré" ;
    VP (Fut Ind Sg P2) => c_ + "ocerás" ;
    VP (Fut Ind Sg P3) => c_ + "ocerá" ;
    VP (Fut Ind Pl P1) => c_ + "oceremos" ;
    VP (Fut Ind Pl P2) => c_ + "oceréis" ;
    VP (Fut Ind Pl P3) => c_ + "ocerán" ;
    VP (Fut Subj Sg P1) => c_ + "ociere" ;
    VP (Fut Subj Sg P2) => c_ + "ocieres" ;
    VP (Fut Subj Sg P3) => c_ + "ociere" ;
    VP (Fut Subj Pl P1) => c_ + "ociéremos" ;
    VP (Fut Subj Pl P2) => c_ + "ociereis" ;
    VP (Fut Subj Pl P3) => c_ + "ocieren" ;
    VP (Cond Sg P1) => c_ + "ocería" ;
    VP (Cond Sg P2) => c_ + "ocerías" ;
    VP (Cond Sg P3) => c_ + "ocería" ;
    VP (Cond Pl P1) => c_ + "oceríamos" ;
    VP (Cond Pl P2) => c_ + "oceríais" ;
    VP (Cond Pl P3) => c_ + "ocerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => c_ + "uece" ;
    VP (Imp Sg P3) => c_ + "ueza" ;
    VP (Imp Pl P1) => c_ + "ozamos" ;
    VP (Imp Pl P2) => c_ + "oced" ;
    VP (Imp Pl P3) => c_ + "uezan" ;
    VP (Pass Sg Masc) => c_ + "ocido" ;
    VP (Pass Sg Fem) => c_ + "ocida" ;
    VP (Pass Pl Masc) => c_ + "ocidos" ;
    VP (Pass Pl Fem) => c_ + "ocidas"
    }
  } ;
oper coger_23 : Str -> Verbum = \coger ->
  let co_ = Predef.tk 3 coger in
 {s = table {
    VI Infn => co_ + "ger" ;
    VI Ger => co_ + "giendo" ;
    VI Part => co_ + "gido" ;
    VP (Pres Ind Sg P1) => co_ + "jo" ;
    VP (Pres Ind Sg P2) => co_ + "ges" ;
    VP (Pres Ind Sg P3) => co_ + "ge" ;
    VP (Pres Ind Pl P1) => co_ + "gemos" ;
    VP (Pres Ind Pl P2) => co_ + "géis" ;
    VP (Pres Ind Pl P3) => co_ + "gen" ;
    VP (Pres Subj Sg P1) => co_ + "ja" ;
    VP (Pres Subj Sg P2) => co_ + "jas" ;
    VP (Pres Subj Sg P3) => co_ + "ja" ;
    VP (Pres Subj Pl P1) => co_ + "jamos" ;
    VP (Pres Subj Pl P2) => co_ + "jáis" ;
    VP (Pres Subj Pl P3) => co_ + "jan" ;
    VP (Past Ind Sg P1) => co_ + "gía" ;
    VP (Past Ind Sg P2) => co_ + "gías" ;
    VP (Past Ind Sg P3) => co_ + "gía" ;
    VP (Past Ind Pl P1) => co_ + "gíamos" ;
    VP (Past Ind Pl P2) => co_ + "gíais" ;
    VP (Past Ind Pl P3) => co_ + "gían" ;
    VP (Past Subj Sg P1) => variants {co_ + "giera" ; co_ + "giese"} ;
    VP (Past Subj Sg P2) => variants {co_ + "gieras" ; co_ + "gieses"} ;
    VP (Past Subj Sg P3) => variants {co_ + "giera" ; co_ + "giese"} ;
    VP (Past Subj Pl P1) => variants {co_ + "giéramos" ; co_ + "giésemos"} ;
    VP (Past Subj Pl P2) => variants {co_ + "gierais" ; co_ + "gieseis"} ;
    VP (Past Subj Pl P3) => variants {co_ + "gieran" ; co_ + "giesen"} ;
    VP (Pret Sg P1) => co_ + "gí" ;
    VP (Pret Sg P2) => co_ + "giste" ;
    VP (Pret Sg P3) => co_ + "gió" ;
    VP (Pret Pl P1) => co_ + "gimos" ;
    VP (Pret Pl P2) => co_ + "gisteis" ;
    VP (Pret Pl P3) => co_ + "gieron" ;
    VP (Fut Ind Sg P1) => co_ + "geré" ;
    VP (Fut Ind Sg P2) => co_ + "gerás" ;
    VP (Fut Ind Sg P3) => co_ + "gerá" ;
    VP (Fut Ind Pl P1) => co_ + "geremos" ;
    VP (Fut Ind Pl P2) => co_ + "geréis" ;
    VP (Fut Ind Pl P3) => co_ + "gerán" ;
    VP (Fut Subj Sg P1) => co_ + "giere" ;
    VP (Fut Subj Sg P2) => co_ + "gieres" ;
    VP (Fut Subj Sg P3) => co_ + "giere" ;
    VP (Fut Subj Pl P1) => co_ + "giéremos" ;
    VP (Fut Subj Pl P2) => co_ + "giereis" ;
    VP (Fut Subj Pl P3) => co_ + "gieren" ;
    VP (Cond Sg P1) => co_ + "gería" ;
    VP (Cond Sg P2) => co_ + "gerías" ;
    VP (Cond Sg P3) => co_ + "gería" ;
    VP (Cond Pl P1) => co_ + "geríamos" ;
    VP (Cond Pl P2) => co_ + "geríais" ;
    VP (Cond Pl P3) => co_ + "gerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => co_ + "ge" ;
    VP (Imp Sg P3) => co_ + "ja" ;
    VP (Imp Pl P1) => co_ + "jamos" ;
    VP (Imp Pl P2) => co_ + "ged" ;
    VP (Imp Pl P3) => co_ + "jan" ;
    VP (Pass Sg Masc) => co_ + "gido" ;
    VP (Pass Sg Fem) => co_ + "gida" ;
    VP (Pass Pl Masc) => co_ + "gidos" ;
    VP (Pass Pl Fem) => co_ + "gidas"
    }
  } ;
oper colgar_24 : Str -> Verbum = \colgar ->
  let c_ = Predef.tk 5 colgar in
 {s = table {
    VI Infn => c_ + "olgar" ;
    VI Ger => c_ + "olgando" ;
    VI Part => c_ + "olgado" ;
    VP (Pres Ind Sg P1) => c_ + "uelgo" ;
    VP (Pres Ind Sg P2) => c_ + "uelgas" ;
    VP (Pres Ind Sg P3) => c_ + "uelga" ;
    VP (Pres Ind Pl P1) => c_ + "olgamos" ;
    VP (Pres Ind Pl P2) => c_ + "olgáis" ;
    VP (Pres Ind Pl P3) => c_ + "uelgan" ;
    VP (Pres Subj Sg P1) => c_ + "uelgue" ;
    VP (Pres Subj Sg P2) => c_ + "uelgues" ;
    VP (Pres Subj Sg P3) => c_ + "uelgue" ;
    VP (Pres Subj Pl P1) => c_ + "olguemos" ;
    VP (Pres Subj Pl P2) => c_ + "olguéis" ;
    VP (Pres Subj Pl P3) => c_ + "uelguen" ;
    VP (Past Ind Sg P1) => c_ + "olgaba" ;
    VP (Past Ind Sg P2) => c_ + "olgabas" ;
    VP (Past Ind Sg P3) => c_ + "olgaba" ;
    VP (Past Ind Pl P1) => c_ + "olgábamos" ;
    VP (Past Ind Pl P2) => c_ + "olgabais" ;
    VP (Past Ind Pl P3) => c_ + "olgaban" ;
    VP (Past Subj Sg P1) => variants {c_ + "olgara" ; c_ + "olgase"} ;
    VP (Past Subj Sg P2) => variants {c_ + "olgaras" ; c_ + "olgases"} ;
    VP (Past Subj Sg P3) => variants {c_ + "olgara" ; c_ + "olgase"} ;
    VP (Past Subj Pl P1) => variants {c_ + "olgáramos" ; c_ + "olgásemos"} ;
    VP (Past Subj Pl P2) => variants {c_ + "olgarais" ; c_ + "olgaseis"} ;
    VP (Past Subj Pl P3) => variants {c_ + "olgaran" ; c_ + "olgasen"} ;
    VP (Pret Sg P1) => c_ + "olgué" ;
    VP (Pret Sg P2) => c_ + "olgaste" ;
    VP (Pret Sg P3) => c_ + "olgó" ;
    VP (Pret Pl P1) => c_ + "olgamos" ;
    VP (Pret Pl P2) => c_ + "olgasteis" ;
    VP (Pret Pl P3) => c_ + "olgaron" ;
    VP (Fut Ind Sg P1) => c_ + "olgaré" ;
    VP (Fut Ind Sg P2) => c_ + "olgarás" ;
    VP (Fut Ind Sg P3) => c_ + "olgará" ;
    VP (Fut Ind Pl P1) => c_ + "olgaremos" ;
    VP (Fut Ind Pl P2) => c_ + "olgaréis" ;
    VP (Fut Ind Pl P3) => c_ + "olgarán" ;
    VP (Fut Subj Sg P1) => c_ + "olgare" ;
    VP (Fut Subj Sg P2) => c_ + "olgares" ;
    VP (Fut Subj Sg P3) => c_ + "olgare" ;
    VP (Fut Subj Pl P1) => c_ + "olgáremos" ;
    VP (Fut Subj Pl P2) => c_ + "olgareis" ;
    VP (Fut Subj Pl P3) => c_ + "olgaren" ;
    VP (Cond Sg P1) => c_ + "olgaría" ;
    VP (Cond Sg P2) => c_ + "olgarías" ;
    VP (Cond Sg P3) => c_ + "olgaría" ;
    VP (Cond Pl P1) => c_ + "olgaríamos" ;
    VP (Cond Pl P2) => c_ + "olgaríais" ;
    VP (Cond Pl P3) => c_ + "olgarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => c_ + "uelga" ;
    VP (Imp Sg P3) => c_ + "uelgue" ;
    VP (Imp Pl P1) => c_ + "olguemos" ;
    VP (Imp Pl P2) => c_ + "olgad" ;
    VP (Imp Pl P3) => c_ + "uelguen" ;
    VP (Pass Sg Masc) => c_ + "olgado" ;
    VP (Pass Sg Fem) => c_ + "olgada" ;
    VP (Pass Pl Masc) => c_ + "olgados" ;
    VP (Pass Pl Fem) => c_ + "olgadas"
    }
  } ;
oper conocer_25 : Str -> Verbum = \conocer ->
  let cono_ = Predef.tk 3 conocer in
 {s = table {
    VI Infn => cono_ + "cer" ;
    VI Ger => cono_ + "ciendo" ;
    VI Part => cono_ + "cido" ;
    VP (Pres Ind Sg P1) => cono_ + "zco" ;
    VP (Pres Ind Sg P2) => cono_ + "ces" ;
    VP (Pres Ind Sg P3) => cono_ + "ce" ;
    VP (Pres Ind Pl P1) => cono_ + "cemos" ;
    VP (Pres Ind Pl P2) => cono_ + "céis" ;
    VP (Pres Ind Pl P3) => cono_ + "cen" ;
    VP (Pres Subj Sg P1) => cono_ + "zca" ;
    VP (Pres Subj Sg P2) => cono_ + "zcas" ;
    VP (Pres Subj Sg P3) => cono_ + "zca" ;
    VP (Pres Subj Pl P1) => cono_ + "zcamos" ;
    VP (Pres Subj Pl P2) => cono_ + "zcáis" ;
    VP (Pres Subj Pl P3) => cono_ + "zcan" ;
    VP (Past Ind Sg P1) => cono_ + "cía" ;
    VP (Past Ind Sg P2) => cono_ + "cías" ;
    VP (Past Ind Sg P3) => cono_ + "cía" ;
    VP (Past Ind Pl P1) => cono_ + "cíamos" ;
    VP (Past Ind Pl P2) => cono_ + "cíais" ;
    VP (Past Ind Pl P3) => cono_ + "cían" ;
    VP (Past Subj Sg P1) => variants {cono_ + "ciera" ; cono_ + "ciese"} ;
    VP (Past Subj Sg P2) => variants {cono_ + "cieras" ; cono_ + "cieses"} ;
    VP (Past Subj Sg P3) => variants {cono_ + "ciera" ; cono_ + "ciese"} ;
    VP (Past Subj Pl P1) => variants {cono_ + "ciéramos" ; cono_ + "ciésemos"} ;
    VP (Past Subj Pl P2) => variants {cono_ + "cierais" ; cono_ + "cieseis"} ;
    VP (Past Subj Pl P3) => variants {cono_ + "cieran" ; cono_ + "ciesen"} ;
    VP (Pret Sg P1) => cono_ + "cí" ;
    VP (Pret Sg P2) => cono_ + "ciste" ;
    VP (Pret Sg P3) => cono_ + "ció" ;
    VP (Pret Pl P1) => cono_ + "cimos" ;
    VP (Pret Pl P2) => cono_ + "cisteis" ;
    VP (Pret Pl P3) => cono_ + "cieron" ;
    VP (Fut Ind Sg P1) => cono_ + "ceré" ;
    VP (Fut Ind Sg P2) => cono_ + "cerás" ;
    VP (Fut Ind Sg P3) => cono_ + "cerá" ;
    VP (Fut Ind Pl P1) => cono_ + "ceremos" ;
    VP (Fut Ind Pl P2) => cono_ + "ceréis" ;
    VP (Fut Ind Pl P3) => cono_ + "cerán" ;
    VP (Fut Subj Sg P1) => cono_ + "ciere" ;
    VP (Fut Subj Sg P2) => cono_ + "cieres" ;
    VP (Fut Subj Sg P3) => cono_ + "ciere" ;
    VP (Fut Subj Pl P1) => cono_ + "ciéremos" ;
    VP (Fut Subj Pl P2) => cono_ + "ciereis" ;
    VP (Fut Subj Pl P3) => cono_ + "cieren" ;
    VP (Cond Sg P1) => cono_ + "cería" ;
    VP (Cond Sg P2) => cono_ + "cerías" ;
    VP (Cond Sg P3) => cono_ + "cería" ;
    VP (Cond Pl P1) => cono_ + "ceríamos" ;
    VP (Cond Pl P2) => cono_ + "ceríais" ;
    VP (Cond Pl P3) => cono_ + "cerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => cono_ + "ce" ;
    VP (Imp Sg P3) => cono_ + "zca" ;
    VP (Imp Pl P1) => cono_ + "zcamos" ;
    VP (Imp Pl P2) => cono_ + "ced" ;
    VP (Imp Pl P3) => cono_ + "zcan" ;
    VP (Pass Sg Masc) => cono_ + "cido" ;
    VP (Pass Sg Fem) => cono_ + "cida" ;
    VP (Pass Pl Masc) => cono_ + "cidos" ;
    VP (Pass Pl Fem) => cono_ + "cidas"
    }
  } ;
oper creer_26 : Str -> Verbum = \creer ->
  let cre_ = Predef.tk 2 creer in
 {s = table {
    VI Infn => cre_ + "er" ;
    VI Ger => cre_ + "yendo" ;
    VI Part => cre_ + "ído" ;
    VP (Pres Ind Sg P1) => cre_ + "o" ;
    VP (Pres Ind Sg P2) => cre_ + "es" ;
    VP (Pres Ind Sg P3) => cre_ + "e" ;
    VP (Pres Ind Pl P1) => cre_ + "emos" ;
    VP (Pres Ind Pl P2) => cre_ + "éis" ;
    VP (Pres Ind Pl P3) => cre_ + "en" ;
    VP (Pres Subj Sg P1) => cre_ + "a" ;
    VP (Pres Subj Sg P2) => cre_ + "as" ;
    VP (Pres Subj Sg P3) => cre_ + "a" ;
    VP (Pres Subj Pl P1) => cre_ + "amos" ;
    VP (Pres Subj Pl P2) => cre_ + "áis" ;
    VP (Pres Subj Pl P3) => cre_ + "an" ;
    VP (Past Ind Sg P1) => cre_ + "ía" ;
    VP (Past Ind Sg P2) => cre_ + "ías" ;
    VP (Past Ind Sg P3) => cre_ + "ía" ;
    VP (Past Ind Pl P1) => cre_ + "íamos" ;
    VP (Past Ind Pl P2) => cre_ + "íais" ;
    VP (Past Ind Pl P3) => cre_ + "ían" ;
    VP (Past Subj Sg P1) => variants {cre_ + "yera" ; cre_ + "yese"} ;
    VP (Past Subj Sg P2) => variants {cre_ + "yeras" ; cre_ + "yeses"} ;
    VP (Past Subj Sg P3) => variants {cre_ + "yera" ; cre_ + "yese"} ;
    VP (Past Subj Pl P1) => variants {cre_ + "yéramos" ; cre_ + "yésemos"} ;
    VP (Past Subj Pl P2) => variants {cre_ + "yerais" ; cre_ + "yeseis"} ;
    VP (Past Subj Pl P3) => variants {cre_ + "yeran" ; cre_ + "yesen"} ;
    VP (Pret Sg P1) => cre_ + "í" ;
    VP (Pret Sg P2) => cre_ + "íste" ;
    VP (Pret Sg P3) => cre_ + "yó" ;
    VP (Pret Pl P1) => cre_ + "ímos" ;
    VP (Pret Pl P2) => cre_ + "ísteis" ;
    VP (Pret Pl P3) => cre_ + "yeron" ;
    VP (Fut Ind Sg P1) => cre_ + "eré" ;
    VP (Fut Ind Sg P2) => cre_ + "erás" ;
    VP (Fut Ind Sg P3) => cre_ + "erá" ;
    VP (Fut Ind Pl P1) => cre_ + "eremos" ;
    VP (Fut Ind Pl P2) => cre_ + "eréis" ;
    VP (Fut Ind Pl P3) => cre_ + "erán" ;
    VP (Fut Subj Sg P1) => cre_ + "yere" ;
    VP (Fut Subj Sg P2) => cre_ + "yeres" ;
    VP (Fut Subj Sg P3) => cre_ + "yere" ;
    VP (Fut Subj Pl P1) => cre_ + "yéremos" ;
    VP (Fut Subj Pl P2) => cre_ + "yereis" ;
    VP (Fut Subj Pl P3) => cre_ + "yeren" ;
    VP (Cond Sg P1) => cre_ + "ería" ;
    VP (Cond Sg P2) => cre_ + "erías" ;
    VP (Cond Sg P3) => cre_ + "ería" ;
    VP (Cond Pl P1) => cre_ + "eríamos" ;
    VP (Cond Pl P2) => cre_ + "eríais" ;
    VP (Cond Pl P3) => cre_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => cre_ + "e" ;
    VP (Imp Sg P3) => cre_ + "a" ;
    VP (Imp Pl P1) => cre_ + "amos" ;
    VP (Imp Pl P2) => cre_ + "ed" ;
    VP (Imp Pl P3) => cre_ + "an" ;
    VP (Pass Sg Masc) => cre_ + "ído" ;
    VP (Pass Sg Fem) => cre_ + "ída" ;
    VP (Pass Pl Masc) => cre_ + "ídos" ;
    VP (Pass Pl Fem) => cre_ + "ídas"
    }
  } ;
oper dar_27 : Str -> Verbum = \dar ->
  let d_ = Predef.tk 2 dar in
 {s = table {
    VI Infn => d_ + "ar" ;
    VI Ger => d_ + "ando" ;
    VI Part => d_ + "ado" ;
    VP (Pres Ind Sg P1) => d_ + "oy" ;
    VP (Pres Ind Sg P2) => d_ + "as" ;
    VP (Pres Ind Sg P3) => d_ + "a" ;
    VP (Pres Ind Pl P1) => d_ + "amos" ;
    VP (Pres Ind Pl P2) => d_ + "ais" ;
    VP (Pres Ind Pl P3) => d_ + "an" ;
    VP (Pres Subj Sg P1) => d_ + "é" ;
    VP (Pres Subj Sg P2) => d_ + "es" ;
    VP (Pres Subj Sg P3) => d_ + "é" ;
    VP (Pres Subj Pl P1) => d_ + "emos" ;
    VP (Pres Subj Pl P2) => d_ + "eis" ;
    VP (Pres Subj Pl P3) => d_ + "en" ;
    VP (Past Ind Sg P1) => d_ + "aba" ;
    VP (Past Ind Sg P2) => d_ + "abas" ;
    VP (Past Ind Sg P3) => d_ + "aba" ;
    VP (Past Ind Pl P1) => d_ + "ábamos" ;
    VP (Past Ind Pl P2) => d_ + "abais" ;
    VP (Past Ind Pl P3) => d_ + "aban" ;
    VP (Past Subj Sg P1) => variants {d_ + "iera" ; d_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {d_ + "ieras" ; d_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {d_ + "iera" ; d_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {d_ + "iéramos" ; d_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {d_ + "ierais" ; d_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {d_ + "ieran" ; d_ + "iesen"} ;
    VP (Pret Sg P1) => d_ + "i" ;
    VP (Pret Sg P2) => d_ + "iste" ;
    VP (Pret Sg P3) => d_ + "io" ;
    VP (Pret Pl P1) => d_ + "imos" ;
    VP (Pret Pl P2) => d_ + "isteis" ;
    VP (Pret Pl P3) => d_ + "ieron" ;
    VP (Fut Ind Sg P1) => d_ + "aré" ;
    VP (Fut Ind Sg P2) => d_ + "arás" ;
    VP (Fut Ind Sg P3) => d_ + "ará" ;
    VP (Fut Ind Pl P1) => d_ + "aremos" ;
    VP (Fut Ind Pl P2) => d_ + "aréis" ;
    VP (Fut Ind Pl P3) => d_ + "arán" ;
    VP (Fut Subj Sg P1) => d_ + "iere" ;
    VP (Fut Subj Sg P2) => d_ + "ieres" ;
    VP (Fut Subj Sg P3) => d_ + "iere" ;
    VP (Fut Subj Pl P1) => d_ + "iéremos" ;
    VP (Fut Subj Pl P2) => d_ + "iereis" ;
    VP (Fut Subj Pl P3) => d_ + "ieren" ;
    VP (Cond Sg P1) => d_ + "aría" ;
    VP (Cond Sg P2) => d_ + "arías" ;
    VP (Cond Sg P3) => d_ + "aría" ;
    VP (Cond Pl P1) => d_ + "aríamos" ;
    VP (Cond Pl P2) => d_ + "aríais" ;
    VP (Cond Pl P3) => d_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => d_ + "a" ;
    VP (Imp Sg P3) => d_ + "é" ;
    VP (Imp Pl P1) => d_ + "emos" ;
    VP (Imp Pl P2) => d_ + "ad" ;
    VP (Imp Pl P3) => d_ + "en" ;
    VP (Pass Sg Masc) => d_ + "ado" ;
    VP (Pass Sg Fem) => d_ + "ada" ;
    VP (Pass Pl Masc) => d_ + "ados" ;
    VP (Pass Pl Fem) => d_ + "adas"
    }
  } ;
oper decir_28 : Str -> Verbum = \decir ->
  let d_ = Predef.tk 4 decir in
 {s = table {
    VI Infn => d_ + "ecir" ;
    VI Ger => d_ + "iciendo" ;
    VI Part => d_ + "icho" ;
    VP (Pres Ind Sg P1) => d_ + "igo" ;
    VP (Pres Ind Sg P2) => d_ + "ices" ;
    VP (Pres Ind Sg P3) => d_ + "ice" ;
    VP (Pres Ind Pl P1) => d_ + "ecimos" ;
    VP (Pres Ind Pl P2) => d_ + "ecís" ;
    VP (Pres Ind Pl P3) => d_ + "icen" ;
    VP (Pres Subj Sg P1) => d_ + "iga" ;
    VP (Pres Subj Sg P2) => d_ + "igas" ;
    VP (Pres Subj Sg P3) => d_ + "iga" ;
    VP (Pres Subj Pl P1) => d_ + "igamos" ;
    VP (Pres Subj Pl P2) => d_ + "igáis" ;
    VP (Pres Subj Pl P3) => d_ + "igan" ;
    VP (Past Ind Sg P1) => d_ + "ecía" ;
    VP (Past Ind Sg P2) => d_ + "ecías" ;
    VP (Past Ind Sg P3) => d_ + "ecía" ;
    VP (Past Ind Pl P1) => d_ + "ecíamos" ;
    VP (Past Ind Pl P2) => d_ + "ecíais" ;
    VP (Past Ind Pl P3) => d_ + "ecían" ;
    VP (Past Subj Sg P1) => variants {d_ + "ijera" ; d_ + "ijese"} ;
    VP (Past Subj Sg P2) => variants {d_ + "ijeras" ; d_ + "ijeses"} ;
    VP (Past Subj Sg P3) => variants {d_ + "ijera" ; d_ + "ijese"} ;
    VP (Past Subj Pl P1) => variants {d_ + "ijéramos" ; d_ + "ijésemos"} ;
    VP (Past Subj Pl P2) => variants {d_ + "ijerais" ; d_ + "ijeseis"} ;
    VP (Past Subj Pl P3) => variants {d_ + "ijeran" ; d_ + "ijesen"} ;
    VP (Pret Sg P1) => d_ + "ije" ;
    VP (Pret Sg P2) => d_ + "ijiste" ;
    VP (Pret Sg P3) => d_ + "ijo" ;
    VP (Pret Pl P1) => d_ + "ijimos" ;
    VP (Pret Pl P2) => d_ + "ijisteis" ;
    VP (Pret Pl P3) => d_ + "ijeron" ;
    VP (Fut Ind Sg P1) => d_ + "iré" ;
    VP (Fut Ind Sg P2) => d_ + "irás" ;
    VP (Fut Ind Sg P3) => d_ + "irá" ;
    VP (Fut Ind Pl P1) => d_ + "iremos" ;
    VP (Fut Ind Pl P2) => d_ + "iréis" ;
    VP (Fut Ind Pl P3) => d_ + "irán" ;
    VP (Fut Subj Sg P1) => d_ + "ijere" ;
    VP (Fut Subj Sg P2) => d_ + "ijeres" ;
    VP (Fut Subj Sg P3) => d_ + "ijere" ;
    VP (Fut Subj Pl P1) => d_ + "ijéremos" ;
    VP (Fut Subj Pl P2) => d_ + "ijereis" ;
    VP (Fut Subj Pl P3) => d_ + "ijeren" ;
    VP (Cond Sg P1) => d_ + "iría" ;
    VP (Cond Sg P2) => d_ + "irías" ;
    VP (Cond Sg P3) => d_ + "iría" ;
    VP (Cond Pl P1) => d_ + "iríamos" ;
    VP (Cond Pl P2) => d_ + "iríais" ;
    VP (Cond Pl P3) => d_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => d_ + "i" ;
    VP (Imp Sg P3) => d_ + "iga" ;
    VP (Imp Pl P1) => d_ + "igamos" ;
    VP (Imp Pl P2) => d_ + "ecid" ;
    VP (Imp Pl P3) => d_ + "igan" ;
    VP (Pass Sg Masc) => d_ + "icho" ;
    VP (Pass Sg Fem) => d_ + "icha" ;
    VP (Pass Pl Masc) => d_ + "ichos" ;
    VP (Pass Pl Fem) => d_ + "ichas"
    }
  } ;
oper defender_29 : Str -> Verbum = \defender ->
  let def_ = Predef.tk 5 defender in
 {s = table {
    VI Infn => def_ + "ender" ;
    VI Ger => def_ + "endiendo" ;
    VI Part => def_ + "endido" ;
    VP (Pres Ind Sg P1) => def_ + "iendo" ;
    VP (Pres Ind Sg P2) => def_ + "iendes" ;
    VP (Pres Ind Sg P3) => def_ + "iende" ;
    VP (Pres Ind Pl P1) => def_ + "endemos" ;
    VP (Pres Ind Pl P2) => def_ + "endéis" ;
    VP (Pres Ind Pl P3) => def_ + "ienden" ;
    VP (Pres Subj Sg P1) => def_ + "ienda" ;
    VP (Pres Subj Sg P2) => def_ + "iendas" ;
    VP (Pres Subj Sg P3) => def_ + "ienda" ;
    VP (Pres Subj Pl P1) => def_ + "endamos" ;
    VP (Pres Subj Pl P2) => def_ + "endáis" ;
    VP (Pres Subj Pl P3) => def_ + "iendan" ;
    VP (Past Ind Sg P1) => def_ + "endía" ;
    VP (Past Ind Sg P2) => def_ + "endías" ;
    VP (Past Ind Sg P3) => def_ + "endía" ;
    VP (Past Ind Pl P1) => def_ + "endíamos" ;
    VP (Past Ind Pl P2) => def_ + "endíais" ;
    VP (Past Ind Pl P3) => def_ + "endían" ;
    VP (Past Subj Sg P1) => variants {def_ + "endiera" ; def_ + "endiese"} ;
    VP (Past Subj Sg P2) => variants {def_ + "endieras" ; def_ + "endieses"} ;
    VP (Past Subj Sg P3) => variants {def_ + "endiera" ; def_ + "endiese"} ;
    VP (Past Subj Pl P1) => variants {def_ + "endiéramos" ; def_ + "endiésemos"} ;
    VP (Past Subj Pl P2) => variants {def_ + "endierais" ; def_ + "endieseis"} ;
    VP (Past Subj Pl P3) => variants {def_ + "endieran" ; def_ + "endiesen"} ;
    VP (Pret Sg P1) => def_ + "endí" ;
    VP (Pret Sg P2) => def_ + "endiste" ;
    VP (Pret Sg P3) => def_ + "endió" ;
    VP (Pret Pl P1) => def_ + "endimos" ;
    VP (Pret Pl P2) => def_ + "endisteis" ;
    VP (Pret Pl P3) => def_ + "endieron" ;
    VP (Fut Ind Sg P1) => def_ + "enderé" ;
    VP (Fut Ind Sg P2) => def_ + "enderás" ;
    VP (Fut Ind Sg P3) => def_ + "enderá" ;
    VP (Fut Ind Pl P1) => def_ + "enderemos" ;
    VP (Fut Ind Pl P2) => def_ + "enderéis" ;
    VP (Fut Ind Pl P3) => def_ + "enderán" ;
    VP (Fut Subj Sg P1) => def_ + "endiere" ;
    VP (Fut Subj Sg P2) => def_ + "endieres" ;
    VP (Fut Subj Sg P3) => def_ + "endiere" ;
    VP (Fut Subj Pl P1) => def_ + "endiéremos" ;
    VP (Fut Subj Pl P2) => def_ + "endiereis" ;
    VP (Fut Subj Pl P3) => def_ + "endieren" ;
    VP (Cond Sg P1) => def_ + "endería" ;
    VP (Cond Sg P2) => def_ + "enderías" ;
    VP (Cond Sg P3) => def_ + "endería" ;
    VP (Cond Pl P1) => def_ + "enderíamos" ;
    VP (Cond Pl P2) => def_ + "enderíais" ;
    VP (Cond Pl P3) => def_ + "enderían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => def_ + "iende" ;
    VP (Imp Sg P3) => def_ + "ienda" ;
    VP (Imp Pl P1) => def_ + "endamos" ;
    VP (Imp Pl P2) => def_ + "ended" ;
    VP (Imp Pl P3) => def_ + "iendan" ;
    VP (Pass Sg Masc) => def_ + "endido" ;
    VP (Pass Sg Fem) => def_ + "endida" ;
    VP (Pass Pl Masc) => def_ + "endidos" ;
    VP (Pass Pl Fem) => def_ + "endidas"
    }
  } ;
oper delinquir_30 : Str -> Verbum = \delinquir ->
  let delin_ = Predef.tk 4 delinquir in
 {s = table {
    VI Infn => delin_ + "quir" ;
    VI Ger => delin_ + "quiendo" ;
    VI Part => delin_ + "quido" ;
    VP (Pres Ind Sg P1) => delin_ + "co" ;
    VP (Pres Ind Sg P2) => delin_ + "ques" ;
    VP (Pres Ind Sg P3) => delin_ + "que" ;
    VP (Pres Ind Pl P1) => delin_ + "quimos" ;
    VP (Pres Ind Pl P2) => delin_ + "quís" ;
    VP (Pres Ind Pl P3) => delin_ + "quen" ;
    VP (Pres Subj Sg P1) => delin_ + "ca" ;
    VP (Pres Subj Sg P2) => delin_ + "cas" ;
    VP (Pres Subj Sg P3) => delin_ + "ca" ;
    VP (Pres Subj Pl P1) => delin_ + "camos" ;
    VP (Pres Subj Pl P2) => delin_ + "cáis" ;
    VP (Pres Subj Pl P3) => delin_ + "can" ;
    VP (Past Ind Sg P1) => delin_ + "quía" ;
    VP (Past Ind Sg P2) => delin_ + "quías" ;
    VP (Past Ind Sg P3) => delin_ + "quía" ;
    VP (Past Ind Pl P1) => delin_ + "quíamos" ;
    VP (Past Ind Pl P2) => delin_ + "quíais" ;
    VP (Past Ind Pl P3) => delin_ + "quían" ;
    VP (Past Subj Sg P1) => variants {delin_ + "quiera" ; delin_ + "quiese"} ;
    VP (Past Subj Sg P2) => variants {delin_ + "quieras" ; delin_ + "quieses"} ;
    VP (Past Subj Sg P3) => variants {delin_ + "quiera" ; delin_ + "quiese"} ;
    VP (Past Subj Pl P1) => variants {delin_ + "quiéramos" ; delin_ + "quiésemos"} ;
    VP (Past Subj Pl P2) => variants {delin_ + "quierais" ; delin_ + "quieseis"} ;
    VP (Past Subj Pl P3) => variants {delin_ + "quieran" ; delin_ + "quiesen"} ;
    VP (Pret Sg P1) => delin_ + "quí" ;
    VP (Pret Sg P2) => delin_ + "quiste" ;
    VP (Pret Sg P3) => delin_ + "quió" ;
    VP (Pret Pl P1) => delin_ + "quimos" ;
    VP (Pret Pl P2) => delin_ + "quisteis" ;
    VP (Pret Pl P3) => delin_ + "quieron" ;
    VP (Fut Ind Sg P1) => delin_ + "quiré" ;
    VP (Fut Ind Sg P2) => delin_ + "quirás" ;
    VP (Fut Ind Sg P3) => delin_ + "quirá" ;
    VP (Fut Ind Pl P1) => delin_ + "quiremos" ;
    VP (Fut Ind Pl P2) => delin_ + "quiréis" ;
    VP (Fut Ind Pl P3) => delin_ + "quirán" ;
    VP (Fut Subj Sg P1) => delin_ + "quiere" ;
    VP (Fut Subj Sg P2) => delin_ + "quieres" ;
    VP (Fut Subj Sg P3) => delin_ + "quiere" ;
    VP (Fut Subj Pl P1) => delin_ + "quiéremos" ;
    VP (Fut Subj Pl P2) => delin_ + "quiereis" ;
    VP (Fut Subj Pl P3) => delin_ + "quieren" ;
    VP (Cond Sg P1) => delin_ + "quiría" ;
    VP (Cond Sg P2) => delin_ + "quirías" ;
    VP (Cond Sg P3) => delin_ + "quiría" ;
    VP (Cond Pl P1) => delin_ + "quiríamos" ;
    VP (Cond Pl P2) => delin_ + "quiríais" ;
    VP (Cond Pl P3) => delin_ + "quirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => delin_ + "que" ;
    VP (Imp Sg P3) => delin_ + "ca" ;
    VP (Imp Pl P1) => delin_ + "camos" ;
    VP (Imp Pl P2) => delin_ + "quid" ;
    VP (Imp Pl P3) => delin_ + "can" ;
    VP (Pass Sg Masc) => delin_ + "quido" ;
    VP (Pass Sg Fem) => delin_ + "quida" ;
    VP (Pass Pl Masc) => delin_ + "quidos" ;
    VP (Pass Pl Fem) => delin_ + "quidas"
    }
  } ;
oper desosar_31 : Str -> Verbum = \desosar ->
  let des_ = Predef.tk 4 desosar in
 {s = table {
    VI Infn => des_ + "osar" ;
    VI Ger => des_ + "osando" ;
    VI Part => des_ + "osado" ;
    VP (Pres Ind Sg P1) => des_ + "hueso" ;
    VP (Pres Ind Sg P2) => des_ + "huesas" ;
    VP (Pres Ind Sg P3) => des_ + "huesa" ;
    VP (Pres Ind Pl P1) => des_ + "osamos" ;
    VP (Pres Ind Pl P2) => des_ + "osáis" ;
    VP (Pres Ind Pl P3) => des_ + "huesan" ;
    VP (Pres Subj Sg P1) => des_ + "huese" ;
    VP (Pres Subj Sg P2) => des_ + "hueses" ;
    VP (Pres Subj Sg P3) => des_ + "huese" ;
    VP (Pres Subj Pl P1) => des_ + "osemos" ;
    VP (Pres Subj Pl P2) => des_ + "oséis" ;
    VP (Pres Subj Pl P3) => des_ + "huesen" ;
    VP (Past Ind Sg P1) => des_ + "osaba" ;
    VP (Past Ind Sg P2) => des_ + "osabas" ;
    VP (Past Ind Sg P3) => des_ + "osaba" ;
    VP (Past Ind Pl P1) => des_ + "osábamos" ;
    VP (Past Ind Pl P2) => des_ + "osabais" ;
    VP (Past Ind Pl P3) => des_ + "osaban" ;
    VP (Past Subj Sg P1) => variants {des_ + "osara" ; des_ + "osase"} ;
    VP (Past Subj Sg P2) => variants {des_ + "osaras" ; des_ + "osases"} ;
    VP (Past Subj Sg P3) => variants {des_ + "osara" ; des_ + "osase"} ;
    VP (Past Subj Pl P1) => variants {des_ + "osáramos" ; des_ + "osásemos"} ;
    VP (Past Subj Pl P2) => variants {des_ + "osarais" ; des_ + "osaseis"} ;
    VP (Past Subj Pl P3) => variants {des_ + "osaran" ; des_ + "osasen"} ;
    VP (Pret Sg P1) => des_ + "osé" ;
    VP (Pret Sg P2) => des_ + "osaste" ;
    VP (Pret Sg P3) => des_ + "osó" ;
    VP (Pret Pl P1) => des_ + "osamos" ;
    VP (Pret Pl P2) => des_ + "osasteis" ;
    VP (Pret Pl P3) => des_ + "osaron" ;
    VP (Fut Ind Sg P1) => des_ + "osaré" ;
    VP (Fut Ind Sg P2) => des_ + "osarás" ;
    VP (Fut Ind Sg P3) => des_ + "osará" ;
    VP (Fut Ind Pl P1) => des_ + "osaremos" ;
    VP (Fut Ind Pl P2) => des_ + "osaréis" ;
    VP (Fut Ind Pl P3) => des_ + "osarán" ;
    VP (Fut Subj Sg P1) => des_ + "osare" ;
    VP (Fut Subj Sg P2) => des_ + "osares" ;
    VP (Fut Subj Sg P3) => des_ + "osare" ;
    VP (Fut Subj Pl P1) => des_ + "osáremos" ;
    VP (Fut Subj Pl P2) => des_ + "osareis" ;
    VP (Fut Subj Pl P3) => des_ + "osaren" ;
    VP (Cond Sg P1) => des_ + "osaría" ;
    VP (Cond Sg P2) => des_ + "osarías" ;
    VP (Cond Sg P3) => des_ + "osaría" ;
    VP (Cond Pl P1) => des_ + "osaríamos" ;
    VP (Cond Pl P2) => des_ + "osaríais" ;
    VP (Cond Pl P3) => des_ + "osarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => des_ + "huesa" ;
    VP (Imp Sg P3) => des_ + "huese" ;
    VP (Imp Pl P1) => des_ + "osemos" ;
    VP (Imp Pl P2) => des_ + "osad" ;
    VP (Imp Pl P3) => des_ + "huesen" ;
    VP (Pass Sg Masc) => des_ + "osado" ;
    VP (Pass Sg Fem) => des_ + "osada" ;
    VP (Pass Pl Masc) => des_ + "osados" ;
    VP (Pass Pl Fem) => des_ + "osadas"
    }
  } ;
oper dirigir_32 : Str -> Verbum = \dirigir ->
  let diri_ = Predef.tk 3 dirigir in
 {s = table {
    VI Infn => diri_ + "gir" ;
    VI Ger => diri_ + "giendo" ;
    VI Part => diri_ + "gido" ;
    VP (Pres Ind Sg P1) => diri_ + "jo" ;
    VP (Pres Ind Sg P2) => diri_ + "ges" ;
    VP (Pres Ind Sg P3) => diri_ + "ge" ;
    VP (Pres Ind Pl P1) => diri_ + "gimos" ;
    VP (Pres Ind Pl P2) => diri_ + "gís" ;
    VP (Pres Ind Pl P3) => diri_ + "gen" ;
    VP (Pres Subj Sg P1) => diri_ + "ja" ;
    VP (Pres Subj Sg P2) => diri_ + "jas" ;
    VP (Pres Subj Sg P3) => diri_ + "ja" ;
    VP (Pres Subj Pl P1) => diri_ + "jamos" ;
    VP (Pres Subj Pl P2) => diri_ + "jáis" ;
    VP (Pres Subj Pl P3) => diri_ + "jan" ;
    VP (Past Ind Sg P1) => diri_ + "gía" ;
    VP (Past Ind Sg P2) => diri_ + "gías" ;
    VP (Past Ind Sg P3) => diri_ + "gía" ;
    VP (Past Ind Pl P1) => diri_ + "gíamos" ;
    VP (Past Ind Pl P2) => diri_ + "gíais" ;
    VP (Past Ind Pl P3) => diri_ + "gían" ;
    VP (Past Subj Sg P1) => variants {diri_ + "giera" ; diri_ + "giese"} ;
    VP (Past Subj Sg P2) => variants {diri_ + "gieras" ; diri_ + "gieses"} ;
    VP (Past Subj Sg P3) => variants {diri_ + "giera" ; diri_ + "giese"} ;
    VP (Past Subj Pl P1) => variants {diri_ + "giéramos" ; diri_ + "giésemos"} ;
    VP (Past Subj Pl P2) => variants {diri_ + "gierais" ; diri_ + "gieseis"} ;
    VP (Past Subj Pl P3) => variants {diri_ + "gieran" ; diri_ + "giesen"} ;
    VP (Pret Sg P1) => diri_ + "gí" ;
    VP (Pret Sg P2) => diri_ + "giste" ;
    VP (Pret Sg P3) => diri_ + "gió" ;
    VP (Pret Pl P1) => diri_ + "gimos" ;
    VP (Pret Pl P2) => diri_ + "gisteis" ;
    VP (Pret Pl P3) => diri_ + "gieron" ;
    VP (Fut Ind Sg P1) => diri_ + "giré" ;
    VP (Fut Ind Sg P2) => diri_ + "girás" ;
    VP (Fut Ind Sg P3) => diri_ + "girá" ;
    VP (Fut Ind Pl P1) => diri_ + "giremos" ;
    VP (Fut Ind Pl P2) => diri_ + "giréis" ;
    VP (Fut Ind Pl P3) => diri_ + "girán" ;
    VP (Fut Subj Sg P1) => diri_ + "giere" ;
    VP (Fut Subj Sg P2) => diri_ + "gieres" ;
    VP (Fut Subj Sg P3) => diri_ + "giere" ;
    VP (Fut Subj Pl P1) => diri_ + "giéremos" ;
    VP (Fut Subj Pl P2) => diri_ + "giereis" ;
    VP (Fut Subj Pl P3) => diri_ + "gieren" ;
    VP (Cond Sg P1) => diri_ + "giría" ;
    VP (Cond Sg P2) => diri_ + "girías" ;
    VP (Cond Sg P3) => diri_ + "giría" ;
    VP (Cond Pl P1) => diri_ + "giríamos" ;
    VP (Cond Pl P2) => diri_ + "giríais" ;
    VP (Cond Pl P3) => diri_ + "girían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => diri_ + "ge" ;
    VP (Imp Sg P3) => diri_ + "ja" ;
    VP (Imp Pl P1) => diri_ + "jamos" ;
    VP (Imp Pl P2) => diri_ + "gid" ;
    VP (Imp Pl P3) => diri_ + "jan" ;
    VP (Pass Sg Masc) => diri_ + "gido" ;
    VP (Pass Sg Fem) => diri_ + "gida" ;
    VP (Pass Pl Masc) => diri_ + "gidos" ;
    VP (Pass Pl Fem) => diri_ + "gidas"
    }
  } ;
oper discernir_33 : Str -> Verbum = \discernir ->
  let disc_ = Predef.tk 5 discernir in
 {s = table {
    VI Infn => disc_ + "ernir" ;
    VI Ger => disc_ + "erniendo" ;
    VI Part => disc_ + "ernido" ;
    VP (Pres Ind Sg P1) => disc_ + "ierno" ;
    VP (Pres Ind Sg P2) => disc_ + "iernes" ;
    VP (Pres Ind Sg P3) => disc_ + "ierne" ;
    VP (Pres Ind Pl P1) => disc_ + "ernimos" ;
    VP (Pres Ind Pl P2) => disc_ + "ernís" ;
    VP (Pres Ind Pl P3) => disc_ + "iernen" ;
    VP (Pres Subj Sg P1) => disc_ + "ierna" ;
    VP (Pres Subj Sg P2) => disc_ + "iernas" ;
    VP (Pres Subj Sg P3) => disc_ + "ierna" ;
    VP (Pres Subj Pl P1) => disc_ + "ernamos" ;
    VP (Pres Subj Pl P2) => disc_ + "ernáis" ;
    VP (Pres Subj Pl P3) => disc_ + "iernan" ;
    VP (Past Ind Sg P1) => disc_ + "ernía" ;
    VP (Past Ind Sg P2) => disc_ + "ernías" ;
    VP (Past Ind Sg P3) => disc_ + "ernía" ;
    VP (Past Ind Pl P1) => disc_ + "erníamos" ;
    VP (Past Ind Pl P2) => disc_ + "erníais" ;
    VP (Past Ind Pl P3) => disc_ + "ernían" ;
    VP (Past Subj Sg P1) => variants {disc_ + "erniera" ; disc_ + "erniese"} ;
    VP (Past Subj Sg P2) => variants {disc_ + "ernieras" ; disc_ + "ernieses"} ;
    VP (Past Subj Sg P3) => variants {disc_ + "erniera" ; disc_ + "erniese"} ;
    VP (Past Subj Pl P1) => variants {disc_ + "erniéramos" ; disc_ + "erniésemos"} ;
    VP (Past Subj Pl P2) => variants {disc_ + "ernierais" ; disc_ + "ernieseis"} ;
    VP (Past Subj Pl P3) => variants {disc_ + "ernieran" ; disc_ + "erniesen"} ;
    VP (Pret Sg P1) => disc_ + "erní" ;
    VP (Pret Sg P2) => disc_ + "erniste" ;
    VP (Pret Sg P3) => disc_ + "ernió" ;
    VP (Pret Pl P1) => disc_ + "ernimos" ;
    VP (Pret Pl P2) => disc_ + "ernisteis" ;
    VP (Pret Pl P3) => disc_ + "ernieron" ;
    VP (Fut Ind Sg P1) => disc_ + "erniré" ;
    VP (Fut Ind Sg P2) => disc_ + "ernirás" ;
    VP (Fut Ind Sg P3) => disc_ + "ernirá" ;
    VP (Fut Ind Pl P1) => disc_ + "erniremos" ;
    VP (Fut Ind Pl P2) => disc_ + "erniréis" ;
    VP (Fut Ind Pl P3) => disc_ + "ernirán" ;
    VP (Fut Subj Sg P1) => disc_ + "erniere" ;
    VP (Fut Subj Sg P2) => disc_ + "ernieres" ;
    VP (Fut Subj Sg P3) => disc_ + "erniere" ;
    VP (Fut Subj Pl P1) => disc_ + "erniéremos" ;
    VP (Fut Subj Pl P2) => disc_ + "erniereis" ;
    VP (Fut Subj Pl P3) => disc_ + "ernieren" ;
    VP (Cond Sg P1) => disc_ + "erniría" ;
    VP (Cond Sg P2) => disc_ + "ernirías" ;
    VP (Cond Sg P3) => disc_ + "erniría" ;
    VP (Cond Pl P1) => disc_ + "erniríamos" ;
    VP (Cond Pl P2) => disc_ + "erniríais" ;
    VP (Cond Pl P3) => disc_ + "ernirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => disc_ + "ierne" ;
    VP (Imp Sg P3) => disc_ + "ierna" ;
    VP (Imp Pl P1) => disc_ + "ernamos" ;
    VP (Imp Pl P2) => disc_ + "ernid" ;
    VP (Imp Pl P3) => disc_ + "iernan" ;
    VP (Pass Sg Masc) => disc_ + "ernido" ;
    VP (Pass Sg Fem) => disc_ + "ernida" ;
    VP (Pass Pl Masc) => disc_ + "ernidos" ;
    VP (Pass Pl Fem) => disc_ + "ernidas"
    }
  } ;
oper distinguir_34 : Str -> Verbum = \distinguir ->
  let disting_ = Predef.tk 3 distinguir in
 {s = table {
    VI Infn => disting_ + "uir" ;
    VI Ger => disting_ + "uiendo" ;
    VI Part => disting_ + "uido" ;
    VP (Pres Ind Sg P1) => disting_ + "o" ;
    VP (Pres Ind Sg P2) => disting_ + "ues" ;
    VP (Pres Ind Sg P3) => disting_ + "ue" ;
    VP (Pres Ind Pl P1) => disting_ + "uimos" ;
    VP (Pres Ind Pl P2) => disting_ + "uís" ;
    VP (Pres Ind Pl P3) => disting_ + "uen" ;
    VP (Pres Subj Sg P1) => disting_ + "a" ;
    VP (Pres Subj Sg P2) => disting_ + "as" ;
    VP (Pres Subj Sg P3) => disting_ + "a" ;
    VP (Pres Subj Pl P1) => disting_ + "amos" ;
    VP (Pres Subj Pl P2) => disting_ + "áis" ;
    VP (Pres Subj Pl P3) => disting_ + "an" ;
    VP (Past Ind Sg P1) => disting_ + "uía" ;
    VP (Past Ind Sg P2) => disting_ + "uías" ;
    VP (Past Ind Sg P3) => disting_ + "uía" ;
    VP (Past Ind Pl P1) => disting_ + "uíamos" ;
    VP (Past Ind Pl P2) => disting_ + "uíais" ;
    VP (Past Ind Pl P3) => disting_ + "uían" ;
    VP (Past Subj Sg P1) => variants {disting_ + "uiera" ; disting_ + "uiese"} ;
    VP (Past Subj Sg P2) => variants {disting_ + "uieras" ; disting_ + "uieses"} ;
    VP (Past Subj Sg P3) => variants {disting_ + "uiera" ; disting_ + "uiese"} ;
    VP (Past Subj Pl P1) => variants {disting_ + "uiéramos" ; disting_ + "uiésemos"} ;
    VP (Past Subj Pl P2) => variants {disting_ + "uierais" ; disting_ + "uieseis"} ;
    VP (Past Subj Pl P3) => variants {disting_ + "uieran" ; disting_ + "uiesen"} ;
    VP (Pret Sg P1) => disting_ + "uí" ;
    VP (Pret Sg P2) => disting_ + "uiste" ;
    VP (Pret Sg P3) => disting_ + "uió" ;
    VP (Pret Pl P1) => disting_ + "uimos" ;
    VP (Pret Pl P2) => disting_ + "uisteis" ;
    VP (Pret Pl P3) => disting_ + "uieron" ;
    VP (Fut Ind Sg P1) => disting_ + "uiré" ;
    VP (Fut Ind Sg P2) => disting_ + "uirás" ;
    VP (Fut Ind Sg P3) => disting_ + "uirá" ;
    VP (Fut Ind Pl P1) => disting_ + "uiremos" ;
    VP (Fut Ind Pl P2) => disting_ + "uiréis" ;
    VP (Fut Ind Pl P3) => disting_ + "uirán" ;
    VP (Fut Subj Sg P1) => disting_ + "uiere" ;
    VP (Fut Subj Sg P2) => disting_ + "uieres" ;
    VP (Fut Subj Sg P3) => disting_ + "uiere" ;
    VP (Fut Subj Pl P1) => disting_ + "uiéremos" ;
    VP (Fut Subj Pl P2) => disting_ + "uiereis" ;
    VP (Fut Subj Pl P3) => disting_ + "uieren" ;
    VP (Cond Sg P1) => disting_ + "uiría" ;
    VP (Cond Sg P2) => disting_ + "uirías" ;
    VP (Cond Sg P3) => disting_ + "uiría" ;
    VP (Cond Pl P1) => disting_ + "uiríamos" ;
    VP (Cond Pl P2) => disting_ + "uiríais" ;
    VP (Cond Pl P3) => disting_ + "uirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => disting_ + "ue" ;
    VP (Imp Sg P3) => disting_ + "a" ;
    VP (Imp Pl P1) => disting_ + "amos" ;
    VP (Imp Pl P2) => disting_ + "uid" ;
    VP (Imp Pl P3) => disting_ + "an" ;
    VP (Pass Sg Masc) => disting_ + "uido" ;
    VP (Pass Sg Fem) => disting_ + "uida" ;
    VP (Pass Pl Masc) => disting_ + "uidos" ;
    VP (Pass Pl Fem) => disting_ + "uidas"
    }
  } ;
oper dormir_35 : Str -> Verbum = \dormir ->
  let d_ = Predef.tk 5 dormir in
 {s = table {
    VI Infn => d_ + "ormir" ;
    VI Ger => d_ + "urmiendo" ;
    VI Part => d_ + "ormido" ;
    VP (Pres Ind Sg P1) => d_ + "uermo" ;
    VP (Pres Ind Sg P2) => d_ + "uermes" ;
    VP (Pres Ind Sg P3) => d_ + "uerme" ;
    VP (Pres Ind Pl P1) => d_ + "ormimos" ;
    VP (Pres Ind Pl P2) => d_ + "ormís" ;
    VP (Pres Ind Pl P3) => d_ + "uermen" ;
    VP (Pres Subj Sg P1) => d_ + "uerma" ;
    VP (Pres Subj Sg P2) => d_ + "uermas" ;
    VP (Pres Subj Sg P3) => d_ + "uerma" ;
    VP (Pres Subj Pl P1) => d_ + "urmamos" ;
    VP (Pres Subj Pl P2) => d_ + "urmáis" ;
    VP (Pres Subj Pl P3) => d_ + "uerman" ;
    VP (Past Ind Sg P1) => d_ + "ormía" ;
    VP (Past Ind Sg P2) => d_ + "ormías" ;
    VP (Past Ind Sg P3) => d_ + "ormía" ;
    VP (Past Ind Pl P1) => d_ + "ormíamos" ;
    VP (Past Ind Pl P2) => d_ + "ormíais" ;
    VP (Past Ind Pl P3) => d_ + "ormían" ;
    VP (Past Subj Sg P1) => variants {d_ + "urmiera" ; d_ + "urmiese"} ;
    VP (Past Subj Sg P2) => variants {d_ + "urmieras" ; d_ + "urmieses"} ;
    VP (Past Subj Sg P3) => variants {d_ + "urmiera" ; d_ + "urmiese"} ;
    VP (Past Subj Pl P1) => variants {d_ + "urmiéramos" ; d_ + "urmiésemos"} ;
    VP (Past Subj Pl P2) => variants {d_ + "urmierais" ; d_ + "urmieseis"} ;
    VP (Past Subj Pl P3) => variants {d_ + "urmieran" ; d_ + "urmiesen"} ;
    VP (Pret Sg P1) => d_ + "ormí" ;
    VP (Pret Sg P2) => d_ + "ormiste" ;
    VP (Pret Sg P3) => d_ + "urmió" ;
    VP (Pret Pl P1) => d_ + "ormimos" ;
    VP (Pret Pl P2) => d_ + "ormisteis" ;
    VP (Pret Pl P3) => d_ + "urmieron" ;
    VP (Fut Ind Sg P1) => d_ + "ormiré" ;
    VP (Fut Ind Sg P2) => d_ + "ormirás" ;
    VP (Fut Ind Sg P3) => d_ + "ormirá" ;
    VP (Fut Ind Pl P1) => d_ + "ormiremos" ;
    VP (Fut Ind Pl P2) => d_ + "ormiréis" ;
    VP (Fut Ind Pl P3) => d_ + "ormirán" ;
    VP (Fut Subj Sg P1) => d_ + "urmiere" ;
    VP (Fut Subj Sg P2) => d_ + "urmieres" ;
    VP (Fut Subj Sg P3) => d_ + "urmiere" ;
    VP (Fut Subj Pl P1) => d_ + "urmiéremos" ;
    VP (Fut Subj Pl P2) => d_ + "urmiereis" ;
    VP (Fut Subj Pl P3) => d_ + "urmieren" ;
    VP (Cond Sg P1) => d_ + "ormiría" ;
    VP (Cond Sg P2) => d_ + "ormirías" ;
    VP (Cond Sg P3) => d_ + "ormiría" ;
    VP (Cond Pl P1) => d_ + "ormiríamos" ;
    VP (Cond Pl P2) => d_ + "ormiríais" ;
    VP (Cond Pl P3) => d_ + "ormirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => d_ + "uerme" ;
    VP (Imp Sg P3) => d_ + "uerma" ;
    VP (Imp Pl P1) => d_ + "urmamos" ;
    VP (Imp Pl P2) => d_ + "ormid" ;
    VP (Imp Pl P3) => d_ + "uerman" ;
    VP (Pass Sg Masc) => d_ + "ormido" ;
    VP (Pass Sg Fem) => d_ + "ormida" ;
    VP (Pass Pl Masc) => d_ + "ormidos" ;
    VP (Pass Pl Fem) => d_ + "ormidas"
    }
  } ;
oper elegir_36 : Str -> Verbum = \elegir ->
  let el_ = Predef.tk 4 elegir in
 {s = table {
    VI Infn => el_ + "egir" ;
    VI Ger => el_ + "igiendo" ;
    VI Part => variants {el_ + "egido" ; el_ + "ecto"} ;
    VP (Pres Ind Sg P1) => el_ + "ijo" ;
    VP (Pres Ind Sg P2) => el_ + "iges" ;
    VP (Pres Ind Sg P3) => el_ + "ige" ;
    VP (Pres Ind Pl P1) => el_ + "egimos" ;
    VP (Pres Ind Pl P2) => el_ + "egís" ;
    VP (Pres Ind Pl P3) => el_ + "igen" ;
    VP (Pres Subj Sg P1) => el_ + "ija" ;
    VP (Pres Subj Sg P2) => el_ + "ijas" ;
    VP (Pres Subj Sg P3) => el_ + "ija" ;
    VP (Pres Subj Pl P1) => el_ + "ijamos" ;
    VP (Pres Subj Pl P2) => el_ + "ijáis" ;
    VP (Pres Subj Pl P3) => el_ + "ijan" ;
    VP (Past Ind Sg P1) => el_ + "egía" ;
    VP (Past Ind Sg P2) => el_ + "egías" ;
    VP (Past Ind Sg P3) => el_ + "egía" ;
    VP (Past Ind Pl P1) => el_ + "egíamos" ;
    VP (Past Ind Pl P2) => el_ + "egíais" ;
    VP (Past Ind Pl P3) => el_ + "egían" ;
    VP (Past Subj Sg P1) => variants {el_ + "igiera" ; el_ + "igiese"} ;
    VP (Past Subj Sg P2) => variants {el_ + "igieras" ; el_ + "igieses"} ;
    VP (Past Subj Sg P3) => variants {el_ + "igiera" ; el_ + "igiese"} ;
    VP (Past Subj Pl P1) => variants {el_ + "igiéramos" ; el_ + "igiésemos"} ;
    VP (Past Subj Pl P2) => variants {el_ + "igierais" ; el_ + "igieseis"} ;
    VP (Past Subj Pl P3) => variants {el_ + "igieran" ; el_ + "igiesen"} ;
    VP (Pret Sg P1) => el_ + "egí" ;
    VP (Pret Sg P2) => el_ + "egiste" ;
    VP (Pret Sg P3) => el_ + "igió" ;
    VP (Pret Pl P1) => el_ + "egimos" ;
    VP (Pret Pl P2) => el_ + "egisteis" ;
    VP (Pret Pl P3) => el_ + "igieron" ;
    VP (Fut Ind Sg P1) => el_ + "egiré" ;
    VP (Fut Ind Sg P2) => el_ + "egirás" ;
    VP (Fut Ind Sg P3) => el_ + "egirá" ;
    VP (Fut Ind Pl P1) => el_ + "egiremos" ;
    VP (Fut Ind Pl P2) => el_ + "egiréis" ;
    VP (Fut Ind Pl P3) => el_ + "egirán" ;
    VP (Fut Subj Sg P1) => el_ + "igiere" ;
    VP (Fut Subj Sg P2) => el_ + "igieres" ;
    VP (Fut Subj Sg P3) => el_ + "igiere" ;
    VP (Fut Subj Pl P1) => el_ + "igiéremos" ;
    VP (Fut Subj Pl P2) => el_ + "igiereis" ;
    VP (Fut Subj Pl P3) => el_ + "igieren" ;
    VP (Cond Sg P1) => el_ + "egiría" ;
    VP (Cond Sg P2) => el_ + "egirías" ;
    VP (Cond Sg P3) => el_ + "egiría" ;
    VP (Cond Pl P1) => el_ + "egiríamos" ;
    VP (Cond Pl P2) => el_ + "egiríais" ;
    VP (Cond Pl P3) => el_ + "egirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => el_ + "ige" ;
    VP (Imp Sg P3) => el_ + "ija" ;
    VP (Imp Pl P1) => el_ + "ijamos" ;
    VP (Imp Pl P2) => el_ + "egid" ;
    VP (Imp Pl P3) => el_ + "ijan" ;
    VP (Pass Sg Masc) => variants {el_ + "egido" ; el_ + "ecto"} ;
    VP (Pass Sg Fem) => variants {el_ + "egida" ; el_ + "ecta"} ;
    VP (Pass Pl Masc) => variants {el_ + "egidos" ; el_ + "ectos"} ;
    VP (Pass Pl Fem) => variants {el_ + "egidas" ; el_ + "ectas"}
    }
  } ;
oper empezar_37 : Str -> Verbum = \empezar ->
  let emp_ = Predef.tk 4 empezar in
 {s = table {
    VI Infn => emp_ + "ezar" ;
    VI Ger => emp_ + "ezando" ;
    VI Part => emp_ + "ezado" ;
    VP (Pres Ind Sg P1) => emp_ + "iezo" ;
    VP (Pres Ind Sg P2) => emp_ + "iezas" ;
    VP (Pres Ind Sg P3) => emp_ + "ieza" ;
    VP (Pres Ind Pl P1) => emp_ + "ezamos" ;
    VP (Pres Ind Pl P2) => emp_ + "ezáis" ;
    VP (Pres Ind Pl P3) => emp_ + "iezan" ;
    VP (Pres Subj Sg P1) => emp_ + "iece" ;
    VP (Pres Subj Sg P2) => emp_ + "ieces" ;
    VP (Pres Subj Sg P3) => emp_ + "iece" ;
    VP (Pres Subj Pl P1) => emp_ + "ecemos" ;
    VP (Pres Subj Pl P2) => emp_ + "ecéis" ;
    VP (Pres Subj Pl P3) => emp_ + "iecen" ;
    VP (Past Ind Sg P1) => emp_ + "ezaba" ;
    VP (Past Ind Sg P2) => emp_ + "ezabas" ;
    VP (Past Ind Sg P3) => emp_ + "ezaba" ;
    VP (Past Ind Pl P1) => emp_ + "ezábamos" ;
    VP (Past Ind Pl P2) => emp_ + "ezabais" ;
    VP (Past Ind Pl P3) => emp_ + "ezaban" ;
    VP (Past Subj Sg P1) => variants {emp_ + "ezara" ; emp_ + "ezase"} ;
    VP (Past Subj Sg P2) => variants {emp_ + "ezaras" ; emp_ + "ezases"} ;
    VP (Past Subj Sg P3) => variants {emp_ + "ezara" ; emp_ + "ezase"} ;
    VP (Past Subj Pl P1) => variants {emp_ + "ezáramos" ; emp_ + "ezásemos"} ;
    VP (Past Subj Pl P2) => variants {emp_ + "ezarais" ; emp_ + "ezaseis"} ;
    VP (Past Subj Pl P3) => variants {emp_ + "ezaran" ; emp_ + "ezasen"} ;
    VP (Pret Sg P1) => emp_ + "ecé" ;
    VP (Pret Sg P2) => emp_ + "ezaste" ;
    VP (Pret Sg P3) => emp_ + "ezó" ;
    VP (Pret Pl P1) => emp_ + "ezamos" ;
    VP (Pret Pl P2) => emp_ + "ezasteis" ;
    VP (Pret Pl P3) => emp_ + "ezaron" ;
    VP (Fut Ind Sg P1) => emp_ + "ezaré" ;
    VP (Fut Ind Sg P2) => emp_ + "ezarás" ;
    VP (Fut Ind Sg P3) => emp_ + "ezará" ;
    VP (Fut Ind Pl P1) => emp_ + "ezaremos" ;
    VP (Fut Ind Pl P2) => emp_ + "ezaréis" ;
    VP (Fut Ind Pl P3) => emp_ + "ezarán" ;
    VP (Fut Subj Sg P1) => emp_ + "ezare" ;
    VP (Fut Subj Sg P2) => emp_ + "ezares" ;
    VP (Fut Subj Sg P3) => emp_ + "ezare" ;
    VP (Fut Subj Pl P1) => emp_ + "ezáremos" ;
    VP (Fut Subj Pl P2) => emp_ + "ezareis" ;
    VP (Fut Subj Pl P3) => emp_ + "ezaren" ;
    VP (Cond Sg P1) => emp_ + "ezaría" ;
    VP (Cond Sg P2) => emp_ + "ezarías" ;
    VP (Cond Sg P3) => emp_ + "ezaría" ;
    VP (Cond Pl P1) => emp_ + "ezaríamos" ;
    VP (Cond Pl P2) => emp_ + "ezaríais" ;
    VP (Cond Pl P3) => emp_ + "ezarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => emp_ + "ieza" ;
    VP (Imp Sg P3) => emp_ + "iece" ;
    VP (Imp Pl P1) => emp_ + "ecemos" ;
    VP (Imp Pl P2) => emp_ + "ezad" ;
    VP (Imp Pl P3) => emp_ + "iecen" ;
    VP (Pass Sg Masc) => emp_ + "ezado" ;
    VP (Pass Sg Fem) => emp_ + "ezada" ;
    VP (Pass Pl Masc) => emp_ + "ezados" ;
    VP (Pass Pl Fem) => emp_ + "ezadas"
    }
  } ;
oper encontrar_38 : Str -> Verbum = \encontrar ->
  let enc_ = Predef.tk 6 encontrar in
 {s = table {
    VI Infn => enc_ + "ontrar" ;
    VI Ger => enc_ + "ontrando" ;
    VI Part => enc_ + "ontrado" ;
    VP (Pres Ind Sg P1) => enc_ + "uentro" ;
    VP (Pres Ind Sg P2) => enc_ + "uentras" ;
    VP (Pres Ind Sg P3) => enc_ + "uentra" ;
    VP (Pres Ind Pl P1) => enc_ + "ontramos" ;
    VP (Pres Ind Pl P2) => enc_ + "ontráis" ;
    VP (Pres Ind Pl P3) => enc_ + "uentran" ;
    VP (Pres Subj Sg P1) => enc_ + "uentre" ;
    VP (Pres Subj Sg P2) => enc_ + "uentres" ;
    VP (Pres Subj Sg P3) => enc_ + "uentre" ;
    VP (Pres Subj Pl P1) => enc_ + "ontremos" ;
    VP (Pres Subj Pl P2) => enc_ + "ontréis" ;
    VP (Pres Subj Pl P3) => enc_ + "uentren" ;
    VP (Past Ind Sg P1) => enc_ + "ontraba" ;
    VP (Past Ind Sg P2) => enc_ + "ontrabas" ;
    VP (Past Ind Sg P3) => enc_ + "ontraba" ;
    VP (Past Ind Pl P1) => enc_ + "ontrábamos" ;
    VP (Past Ind Pl P2) => enc_ + "ontrabais" ;
    VP (Past Ind Pl P3) => enc_ + "ontraban" ;
    VP (Past Subj Sg P1) => variants {enc_ + "ontrara" ; enc_ + "ontrase"} ;
    VP (Past Subj Sg P2) => variants {enc_ + "ontraras" ; enc_ + "ontrases"} ;
    VP (Past Subj Sg P3) => variants {enc_ + "ontrara" ; enc_ + "ontrase"} ;
    VP (Past Subj Pl P1) => variants {enc_ + "ontráramos" ; enc_ + "ontrásemos"} ;
    VP (Past Subj Pl P2) => variants {enc_ + "ontrarais" ; enc_ + "ontraseis"} ;
    VP (Past Subj Pl P3) => variants {enc_ + "ontraran" ; enc_ + "ontrasen"} ;
    VP (Pret Sg P1) => enc_ + "ontré" ;
    VP (Pret Sg P2) => enc_ + "ontraste" ;
    VP (Pret Sg P3) => enc_ + "ontró" ;
    VP (Pret Pl P1) => enc_ + "ontramos" ;
    VP (Pret Pl P2) => enc_ + "ontrasteis" ;
    VP (Pret Pl P3) => enc_ + "ontraron" ;
    VP (Fut Ind Sg P1) => enc_ + "ontraré" ;
    VP (Fut Ind Sg P2) => enc_ + "ontrarás" ;
    VP (Fut Ind Sg P3) => enc_ + "ontrará" ;
    VP (Fut Ind Pl P1) => enc_ + "ontraremos" ;
    VP (Fut Ind Pl P2) => enc_ + "ontraréis" ;
    VP (Fut Ind Pl P3) => enc_ + "ontrarán" ;
    VP (Fut Subj Sg P1) => enc_ + "ontrare" ;
    VP (Fut Subj Sg P2) => enc_ + "ontrares" ;
    VP (Fut Subj Sg P3) => enc_ + "ontrare" ;
    VP (Fut Subj Pl P1) => enc_ + "ontráremos" ;
    VP (Fut Subj Pl P2) => enc_ + "ontrareis" ;
    VP (Fut Subj Pl P3) => enc_ + "ontraren" ;
    VP (Cond Sg P1) => enc_ + "ontraría" ;
    VP (Cond Sg P2) => enc_ + "ontrarías" ;
    VP (Cond Sg P3) => enc_ + "ontraría" ;
    VP (Cond Pl P1) => enc_ + "ontraríamos" ;
    VP (Cond Pl P2) => enc_ + "ontraríais" ;
    VP (Cond Pl P3) => enc_ + "ontrarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => enc_ + "uentra" ;
    VP (Imp Sg P3) => enc_ + "uentre" ;
    VP (Imp Pl P1) => enc_ + "ontremos" ;
    VP (Imp Pl P2) => enc_ + "ontrad" ;
    VP (Imp Pl P3) => enc_ + "uentren" ;
    VP (Pass Sg Masc) => enc_ + "ontrado" ;
    VP (Pass Sg Fem) => enc_ + "ontrada" ;
    VP (Pass Pl Masc) => enc_ + "ontrados" ;
    VP (Pass Pl Fem) => enc_ + "ontradas"
    }
  } ;
oper enraizar_39 : Str -> Verbum = \enraizar ->
  let enra_ = Predef.tk 4 enraizar in
 {s = table {
    VI Infn => enra_ + "izar" ;
    VI Ger => enra_ + "izando" ;
    VI Part => enra_ + "izado" ;
    VP (Pres Ind Sg P1) => enra_ + "ízo" ;
    VP (Pres Ind Sg P2) => enra_ + "ízas" ;
    VP (Pres Ind Sg P3) => enra_ + "íza" ;
    VP (Pres Ind Pl P1) => enra_ + "izamos" ;
    VP (Pres Ind Pl P2) => enra_ + "izáis" ;
    VP (Pres Ind Pl P3) => enra_ + "ízan" ;
    VP (Pres Subj Sg P1) => enra_ + "íce" ;
    VP (Pres Subj Sg P2) => enra_ + "íces" ;
    VP (Pres Subj Sg P3) => enra_ + "íce" ;
    VP (Pres Subj Pl P1) => enra_ + "icemos" ;
    VP (Pres Subj Pl P2) => enra_ + "icéis" ;
    VP (Pres Subj Pl P3) => enra_ + "ícen" ;
    VP (Past Ind Sg P1) => enra_ + "izaba" ;
    VP (Past Ind Sg P2) => enra_ + "izabas" ;
    VP (Past Ind Sg P3) => enra_ + "izaba" ;
    VP (Past Ind Pl P1) => enra_ + "izábamos" ;
    VP (Past Ind Pl P2) => enra_ + "izabais" ;
    VP (Past Ind Pl P3) => enra_ + "izaban" ;
    VP (Past Subj Sg P1) => variants {enra_ + "izara" ; enra_ + "izase"} ;
    VP (Past Subj Sg P2) => variants {enra_ + "izaras" ; enra_ + "izases"} ;
    VP (Past Subj Sg P3) => variants {enra_ + "izara" ; enra_ + "izase"} ;
    VP (Past Subj Pl P1) => variants {enra_ + "izáramos" ; enra_ + "izásemos"} ;
    VP (Past Subj Pl P2) => variants {enra_ + "izarais" ; enra_ + "izaseis"} ;
    VP (Past Subj Pl P3) => variants {enra_ + "izaran" ; enra_ + "izasen"} ;
    VP (Pret Sg P1) => enra_ + "icé" ;
    VP (Pret Sg P2) => enra_ + "izaste" ;
    VP (Pret Sg P3) => enra_ + "izó" ;
    VP (Pret Pl P1) => enra_ + "izamos" ;
    VP (Pret Pl P2) => enra_ + "izasteis" ;
    VP (Pret Pl P3) => enra_ + "izaron" ;
    VP (Fut Ind Sg P1) => enra_ + "izaré" ;
    VP (Fut Ind Sg P2) => enra_ + "izarás" ;
    VP (Fut Ind Sg P3) => enra_ + "izará" ;
    VP (Fut Ind Pl P1) => enra_ + "izaremos" ;
    VP (Fut Ind Pl P2) => enra_ + "izaréis" ;
    VP (Fut Ind Pl P3) => enra_ + "izarán" ;
    VP (Fut Subj Sg P1) => enra_ + "izare" ;
    VP (Fut Subj Sg P2) => enra_ + "izares" ;
    VP (Fut Subj Sg P3) => enra_ + "izare" ;
    VP (Fut Subj Pl P1) => enra_ + "izáremos" ;
    VP (Fut Subj Pl P2) => enra_ + "izareis" ;
    VP (Fut Subj Pl P3) => enra_ + "izaren" ;
    VP (Cond Sg P1) => enra_ + "izaría" ;
    VP (Cond Sg P2) => enra_ + "izarías" ;
    VP (Cond Sg P3) => enra_ + "izaría" ;
    VP (Cond Pl P1) => enra_ + "izaríamos" ;
    VP (Cond Pl P2) => enra_ + "izaríais" ;
    VP (Cond Pl P3) => enra_ + "izarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => enra_ + "íza" ;
    VP (Imp Sg P3) => enra_ + "íce" ;
    VP (Imp Pl P1) => enra_ + "icemos" ;
    VP (Imp Pl P2) => enra_ + "izad" ;
    VP (Imp Pl P3) => enra_ + "ícen" ;
    VP (Pass Sg Masc) => enra_ + "izado" ;
    VP (Pass Sg Fem) => enra_ + "izada" ;
    VP (Pass Pl Masc) => enra_ + "izados" ;
    VP (Pass Pl Fem) => enra_ + "izadas"
    }
  } ;
oper erguir_40 : Str -> Verbum = \erguir ->
  let x_ = Predef.tk 6 erguir in
 {s = table {
    VI Infn => x_ + "erguir" ;
    VI Ger => x_ + "irguiendo" ;
    VI Part => x_ + "erguido" ;
    VP (Pres Ind Sg P1) => x_ + "yergo" ;
    VP (Pres Ind Sg P2) => x_ + "yergues" ;
    VP (Pres Ind Sg P3) => x_ + "yergue" ;
    VP (Pres Ind Pl P1) => x_ + "erguimos" ;
    VP (Pres Ind Pl P2) => x_ + "erguís" ;
    VP (Pres Ind Pl P3) => x_ + "yerguen" ;
    VP (Pres Subj Sg P1) => x_ + "yerga" ;
    VP (Pres Subj Sg P2) => x_ + "yergas" ;
    VP (Pres Subj Sg P3) => x_ + "yerga" ;
    VP (Pres Subj Pl P1) => x_ + "irgamos" ;
    VP (Pres Subj Pl P2) => x_ + "irgáis" ;
    VP (Pres Subj Pl P3) => x_ + "yergan" ;
    VP (Past Ind Sg P1) => x_ + "erguía" ;
    VP (Past Ind Sg P2) => x_ + "erguías" ;
    VP (Past Ind Sg P3) => x_ + "erguía" ;
    VP (Past Ind Pl P1) => x_ + "erguíamos" ;
    VP (Past Ind Pl P2) => x_ + "erguíais" ;
    VP (Past Ind Pl P3) => x_ + "erguían" ;
    VP (Past Subj Sg P1) => variants {x_ + "irguiera" ; x_ + "irguiese"} ;
    VP (Past Subj Sg P2) => variants {x_ + "irguieras" ; x_ + "irguieses"} ;
    VP (Past Subj Sg P3) => variants {x_ + "irguiera" ; x_ + "irguiese"} ;
    VP (Past Subj Pl P1) => variants {x_ + "irguiéramos" ; x_ + "irguiésemos"} ;
    VP (Past Subj Pl P2) => variants {x_ + "irguierais" ; x_ + "irguieseis"} ;
    VP (Past Subj Pl P3) => variants {x_ + "irguieran" ; x_ + "irguiesen"} ;
    VP (Pret Sg P1) => x_ + "erguí" ;
    VP (Pret Sg P2) => x_ + "erguiste" ;
    VP (Pret Sg P3) => x_ + "irguió" ;
    VP (Pret Pl P1) => x_ + "erguimos" ;
    VP (Pret Pl P2) => x_ + "erguisteis" ;
    VP (Pret Pl P3) => x_ + "irguieron" ;
    VP (Fut Ind Sg P1) => x_ + "erguiré" ;
    VP (Fut Ind Sg P2) => x_ + "erguirás" ;
    VP (Fut Ind Sg P3) => x_ + "erguirá" ;
    VP (Fut Ind Pl P1) => x_ + "erguiremos" ;
    VP (Fut Ind Pl P2) => x_ + "erguiréis" ;
    VP (Fut Ind Pl P3) => x_ + "erguirán" ;
    VP (Fut Subj Sg P1) => x_ + "irguiere" ;
    VP (Fut Subj Sg P2) => x_ + "irguieres" ;
    VP (Fut Subj Sg P3) => x_ + "irguiere" ;
    VP (Fut Subj Pl P1) => x_ + "irguiéremos" ;
    VP (Fut Subj Pl P2) => x_ + "irguiereis" ;
    VP (Fut Subj Pl P3) => x_ + "irguieren" ;
    VP (Cond Sg P1) => x_ + "erguiría" ;
    VP (Cond Sg P2) => x_ + "erguirías" ;
    VP (Cond Sg P3) => x_ + "erguiría" ;
    VP (Cond Pl P1) => x_ + "erguiríamos" ;
    VP (Cond Pl P2) => x_ + "erguiríais" ;
    VP (Cond Pl P3) => x_ + "erguirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => x_ + "yergue" ;
    VP (Imp Sg P3) => x_ + "yerga" ;
    VP (Imp Pl P1) => x_ + "yergamos" ;
    VP (Imp Pl P2) => x_ + "erguid" ;
    VP (Imp Pl P3) => x_ + "yergan" ;
    VP (Pass Sg Masc) => x_ + "erguido" ;
    VP (Pass Sg Fem) => x_ + "erguida" ;
    VP (Pass Pl Masc) => x_ + "erguidos" ;
    VP (Pass Pl Fem) => x_ + "erguidas"
    }
  } ;
oper errar_41 : Str -> Verbum = \errar ->
  let x_ = Predef.tk 5 errar in
 {s = table {
    VI Infn => x_ + "errar" ;
    VI Ger => x_ + "errando" ;
    VI Part => x_ + "errado" ;
    VP (Pres Ind Sg P1) => x_ + "yerro" ;
    VP (Pres Ind Sg P2) => x_ + "yerras" ;
    VP (Pres Ind Sg P3) => x_ + "yerra" ;
    VP (Pres Ind Pl P1) => x_ + "erramos" ;
    VP (Pres Ind Pl P2) => x_ + "erráis" ;
    VP (Pres Ind Pl P3) => x_ + "yerran" ;
    VP (Pres Subj Sg P1) => x_ + "yerre" ;
    VP (Pres Subj Sg P2) => x_ + "yerres" ;
    VP (Pres Subj Sg P3) => x_ + "yerre" ;
    VP (Pres Subj Pl P1) => x_ + "erremos" ;
    VP (Pres Subj Pl P2) => x_ + "erréis" ;
    VP (Pres Subj Pl P3) => x_ + "yerren" ;
    VP (Past Ind Sg P1) => x_ + "erraba" ;
    VP (Past Ind Sg P2) => x_ + "errabas" ;
    VP (Past Ind Sg P3) => x_ + "erraba" ;
    VP (Past Ind Pl P1) => x_ + "errábamos" ;
    VP (Past Ind Pl P2) => x_ + "errabais" ;
    VP (Past Ind Pl P3) => x_ + "erraban" ;
    VP (Past Subj Sg P1) => variants {x_ + "errara" ; x_ + "errase"} ;
    VP (Past Subj Sg P2) => variants {x_ + "erraras" ; x_ + "errases"} ;
    VP (Past Subj Sg P3) => variants {x_ + "errara" ; x_ + "errase"} ;
    VP (Past Subj Pl P1) => variants {x_ + "erráramos" ; x_ + "errásemos"} ;
    VP (Past Subj Pl P2) => variants {x_ + "errarais" ; x_ + "erraseis"} ;
    VP (Past Subj Pl P3) => variants {x_ + "erraran" ; x_ + "errasen"} ;
    VP (Pret Sg P1) => x_ + "erré" ;
    VP (Pret Sg P2) => x_ + "erraste" ;
    VP (Pret Sg P3) => x_ + "erró" ;
    VP (Pret Pl P1) => x_ + "erramos" ;
    VP (Pret Pl P2) => x_ + "errasteis" ;
    VP (Pret Pl P3) => x_ + "erraron" ;
    VP (Fut Ind Sg P1) => x_ + "erraré" ;
    VP (Fut Ind Sg P2) => x_ + "errarás" ;
    VP (Fut Ind Sg P3) => x_ + "errará" ;
    VP (Fut Ind Pl P1) => x_ + "erraremos" ;
    VP (Fut Ind Pl P2) => x_ + "erraréis" ;
    VP (Fut Ind Pl P3) => x_ + "errarán" ;
    VP (Fut Subj Sg P1) => x_ + "errare" ;
    VP (Fut Subj Sg P2) => x_ + "errares" ;
    VP (Fut Subj Sg P3) => x_ + "errare" ;
    VP (Fut Subj Pl P1) => x_ + "erráremos" ;
    VP (Fut Subj Pl P2) => x_ + "errareis" ;
    VP (Fut Subj Pl P3) => x_ + "erraren" ;
    VP (Cond Sg P1) => x_ + "erraría" ;
    VP (Cond Sg P2) => x_ + "errarías" ;
    VP (Cond Sg P3) => x_ + "erraría" ;
    VP (Cond Pl P1) => x_ + "erraríamos" ;
    VP (Cond Pl P2) => x_ + "erraríais" ;
    VP (Cond Pl P3) => x_ + "errarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => x_ + "yerra" ;
    VP (Imp Sg P3) => x_ + "yerre" ;
    VP (Imp Pl P1) => x_ + "erremos" ;
    VP (Imp Pl P2) => x_ + "errad" ;
    VP (Imp Pl P3) => x_ + "yerren" ;
    VP (Pass Sg Masc) => x_ + "errado" ;
    VP (Pass Sg Fem) => x_ + "errada" ;
    VP (Pass Pl Masc) => x_ + "errados" ;
    VP (Pass Pl Fem) => x_ + "erradas"
    }
  } ;
oper forzar_42 : Str -> Verbum = \forzar ->
  let f_ = Predef.tk 5 forzar in
 {s = table {
    VI Infn => f_ + "orzar" ;
    VI Ger => f_ + "orzando" ;
    VI Part => f_ + "orzado" ;
    VP (Pres Ind Sg P1) => f_ + "uerzo" ;
    VP (Pres Ind Sg P2) => f_ + "uerzas" ;
    VP (Pres Ind Sg P3) => f_ + "uerza" ;
    VP (Pres Ind Pl P1) => f_ + "orzamos" ;
    VP (Pres Ind Pl P2) => f_ + "orzáis" ;
    VP (Pres Ind Pl P3) => f_ + "uerzan" ;
    VP (Pres Subj Sg P1) => f_ + "uerce" ;
    VP (Pres Subj Sg P2) => f_ + "uerces" ;
    VP (Pres Subj Sg P3) => f_ + "uerce" ;
    VP (Pres Subj Pl P1) => f_ + "orcemos" ;
    VP (Pres Subj Pl P2) => f_ + "orcéis" ;
    VP (Pres Subj Pl P3) => f_ + "uercen" ;
    VP (Past Ind Sg P1) => f_ + "orzaba" ;
    VP (Past Ind Sg P2) => f_ + "orzabas" ;
    VP (Past Ind Sg P3) => f_ + "orzaba" ;
    VP (Past Ind Pl P1) => f_ + "orzábamos" ;
    VP (Past Ind Pl P2) => f_ + "orzabais" ;
    VP (Past Ind Pl P3) => f_ + "orzaban" ;
    VP (Past Subj Sg P1) => variants {f_ + "orzara" ; f_ + "orzase"} ;
    VP (Past Subj Sg P2) => variants {f_ + "orzaras" ; f_ + "orzases"} ;
    VP (Past Subj Sg P3) => variants {f_ + "orzara" ; f_ + "orzase"} ;
    VP (Past Subj Pl P1) => variants {f_ + "orzáramos" ; f_ + "orzásemos"} ;
    VP (Past Subj Pl P2) => variants {f_ + "orzarais" ; f_ + "orzaseis"} ;
    VP (Past Subj Pl P3) => variants {f_ + "orzaran" ; f_ + "orzasen"} ;
    VP (Pret Sg P1) => f_ + "orcé" ;
    VP (Pret Sg P2) => f_ + "orzaste" ;
    VP (Pret Sg P3) => f_ + "orzó" ;
    VP (Pret Pl P1) => f_ + "orzamos" ;
    VP (Pret Pl P2) => f_ + "orzasteis" ;
    VP (Pret Pl P3) => f_ + "orzaron" ;
    VP (Fut Ind Sg P1) => f_ + "orzaré" ;
    VP (Fut Ind Sg P2) => f_ + "orzarás" ;
    VP (Fut Ind Sg P3) => f_ + "orzará" ;
    VP (Fut Ind Pl P1) => f_ + "orzaremos" ;
    VP (Fut Ind Pl P2) => f_ + "orzaréis" ;
    VP (Fut Ind Pl P3) => f_ + "orzarán" ;
    VP (Fut Subj Sg P1) => f_ + "orzare" ;
    VP (Fut Subj Sg P2) => f_ + "orzares" ;
    VP (Fut Subj Sg P3) => f_ + "orzare" ;
    VP (Fut Subj Pl P1) => f_ + "orzáremos" ;
    VP (Fut Subj Pl P2) => f_ + "orzareis" ;
    VP (Fut Subj Pl P3) => f_ + "orzaren" ;
    VP (Cond Sg P1) => f_ + "orzaría" ;
    VP (Cond Sg P2) => f_ + "orzarías" ;
    VP (Cond Sg P3) => f_ + "orzaría" ;
    VP (Cond Pl P1) => f_ + "orzaríamos" ;
    VP (Cond Pl P2) => f_ + "orzaríais" ;
    VP (Cond Pl P3) => f_ + "orzarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => f_ + "uerza" ;
    VP (Imp Sg P3) => f_ + "uerce" ;
    VP (Imp Pl P1) => f_ + "orcemos" ;
    VP (Imp Pl P2) => f_ + "orzad" ;
    VP (Imp Pl P3) => f_ + "uercen" ;
    VP (Pass Sg Masc) => f_ + "orzado" ;
    VP (Pass Sg Fem) => f_ + "orzada" ;
    VP (Pass Pl Masc) => f_ + "orzados" ;
    VP (Pass Pl Fem) => f_ + "orzadas"
    }
  } ;
oper guiar_43 : Str -> Verbum = \guiar ->
  let gu_ = Predef.tk 3 guiar in
 {s = table {
    VI Infn => gu_ + "iar" ;
    VI Ger => gu_ + "iando" ;
    VI Part => gu_ + "iado" ;
    VP (Pres Ind Sg P1) => gu_ + "ío" ;
    VP (Pres Ind Sg P2) => gu_ + "ías" ;
    VP (Pres Ind Sg P3) => gu_ + "ía" ;
    VP (Pres Ind Pl P1) => gu_ + "iamos" ;
    VP (Pres Ind Pl P2) => gu_ + "iáis" ;
    VP (Pres Ind Pl P3) => gu_ + "ían" ;
    VP (Pres Subj Sg P1) => gu_ + "íe" ;
    VP (Pres Subj Sg P2) => gu_ + "íes" ;
    VP (Pres Subj Sg P3) => gu_ + "íe" ;
    VP (Pres Subj Pl P1) => gu_ + "iemos" ;
    VP (Pres Subj Pl P2) => gu_ + "iéis" ;
    VP (Pres Subj Pl P3) => gu_ + "íen" ;
    VP (Past Ind Sg P1) => gu_ + "iaba" ;
    VP (Past Ind Sg P2) => gu_ + "iabas" ;
    VP (Past Ind Sg P3) => gu_ + "iaba" ;
    VP (Past Ind Pl P1) => gu_ + "iábamos" ;
    VP (Past Ind Pl P2) => gu_ + "iabais" ;
    VP (Past Ind Pl P3) => gu_ + "iaban" ;
    VP (Past Subj Sg P1) => variants {gu_ + "iara" ; gu_ + "iase"} ;
    VP (Past Subj Sg P2) => variants {gu_ + "iaras" ; gu_ + "iases"} ;
    VP (Past Subj Sg P3) => variants {gu_ + "iara" ; gu_ + "iase"} ;
    VP (Past Subj Pl P1) => variants {gu_ + "iáramos" ; gu_ + "iásemos"} ;
    VP (Past Subj Pl P2) => variants {gu_ + "iarais" ; gu_ + "iaseis"} ;
    VP (Past Subj Pl P3) => variants {gu_ + "iaran" ; gu_ + "iasen"} ;
    VP (Pret Sg P1) => gu_ + "ié" ;
    VP (Pret Sg P2) => gu_ + "iaste" ;
    VP (Pret Sg P3) => gu_ + "ió" ;
    VP (Pret Pl P1) => gu_ + "iamos" ;
    VP (Pret Pl P2) => gu_ + "iasteis" ;
    VP (Pret Pl P3) => gu_ + "iaron" ;
    VP (Fut Ind Sg P1) => gu_ + "iaré" ;
    VP (Fut Ind Sg P2) => gu_ + "iarás" ;
    VP (Fut Ind Sg P3) => gu_ + "iará" ;
    VP (Fut Ind Pl P1) => gu_ + "iaremos" ;
    VP (Fut Ind Pl P2) => gu_ + "iaréis" ;
    VP (Fut Ind Pl P3) => gu_ + "iarán" ;
    VP (Fut Subj Sg P1) => gu_ + "iare" ;
    VP (Fut Subj Sg P2) => gu_ + "iares" ;
    VP (Fut Subj Sg P3) => gu_ + "iare" ;
    VP (Fut Subj Pl P1) => gu_ + "iáremos" ;
    VP (Fut Subj Pl P2) => gu_ + "iareis" ;
    VP (Fut Subj Pl P3) => gu_ + "iaren" ;
    VP (Cond Sg P1) => gu_ + "iaría" ;
    VP (Cond Sg P2) => gu_ + "iarías" ;
    VP (Cond Sg P3) => gu_ + "iaría" ;
    VP (Cond Pl P1) => gu_ + "iaríamos" ;
    VP (Cond Pl P2) => gu_ + "iaríais" ;
    VP (Cond Pl P3) => gu_ + "iarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => gu_ + "ía" ;
    VP (Imp Sg P3) => gu_ + "íe" ;
    VP (Imp Pl P1) => gu_ + "iemos" ;
    VP (Imp Pl P2) => gu_ + "iad" ;
    VP (Imp Pl P3) => gu_ + "íen" ;
    VP (Pass Sg Masc) => gu_ + "iado" ;
    VP (Pass Sg Fem) => gu_ + "iada" ;
    VP (Pass Pl Masc) => gu_ + "iados" ;
    VP (Pass Pl Fem) => gu_ + "iadas"
    }
  } ;
oper hacer_44 : Str -> Verbum = \hacer ->
  let h_ = Predef.tk 4 hacer in
 {s = table {
    VI Infn => h_ + "acer" ;
    VI Ger => h_ + "aciendo" ;
    VI Part => h_ + "echo" ;
    VP (Pres Ind Sg P1) => h_ + "ago" ;
    VP (Pres Ind Sg P2) => h_ + "aces" ;
    VP (Pres Ind Sg P3) => h_ + "ace" ;
    VP (Pres Ind Pl P1) => h_ + "acemos" ;
    VP (Pres Ind Pl P2) => h_ + "acéis" ;
    VP (Pres Ind Pl P3) => h_ + "acen" ;
    VP (Pres Subj Sg P1) => h_ + "aga" ;
    VP (Pres Subj Sg P2) => h_ + "agas" ;
    VP (Pres Subj Sg P3) => h_ + "aga" ;
    VP (Pres Subj Pl P1) => h_ + "agamos" ;
    VP (Pres Subj Pl P2) => h_ + "agáis" ;
    VP (Pres Subj Pl P3) => h_ + "agan" ;
    VP (Past Ind Sg P1) => h_ + "acía" ;
    VP (Past Ind Sg P2) => h_ + "acías" ;
    VP (Past Ind Sg P3) => h_ + "acía" ;
    VP (Past Ind Pl P1) => h_ + "acíamos" ;
    VP (Past Ind Pl P2) => h_ + "acíais" ;
    VP (Past Ind Pl P3) => h_ + "acían" ;
    VP (Past Subj Sg P1) => variants {h_ + "iciera" ; h_ + "iciese"} ;
    VP (Past Subj Sg P2) => variants {h_ + "icieras" ; h_ + "icieses"} ;
    VP (Past Subj Sg P3) => variants {h_ + "iciera" ; h_ + "iciese"} ;
    VP (Past Subj Pl P1) => variants {h_ + "iciéramos" ; h_ + "iciésemos"} ;
    VP (Past Subj Pl P2) => variants {h_ + "icierais" ; h_ + "icieseis"} ;
    VP (Past Subj Pl P3) => variants {h_ + "icieran" ; h_ + "iciesen"} ;
    VP (Pret Sg P1) => h_ + "ice" ;
    VP (Pret Sg P2) => h_ + "iciste" ;
    VP (Pret Sg P3) => h_ + "izo" ;
    VP (Pret Pl P1) => h_ + "icimos" ;
    VP (Pret Pl P2) => h_ + "icisteis" ;
    VP (Pret Pl P3) => h_ + "icieron" ;
    VP (Fut Ind Sg P1) => h_ + "aré" ;
    VP (Fut Ind Sg P2) => h_ + "arás" ;
    VP (Fut Ind Sg P3) => h_ + "ará" ;
    VP (Fut Ind Pl P1) => h_ + "aremos" ;
    VP (Fut Ind Pl P2) => h_ + "aréis" ;
    VP (Fut Ind Pl P3) => h_ + "arán" ;
    VP (Fut Subj Sg P1) => h_ + "iciere" ;
    VP (Fut Subj Sg P2) => h_ + "icieres" ;
    VP (Fut Subj Sg P3) => h_ + "iciere" ;
    VP (Fut Subj Pl P1) => h_ + "iciéremos" ;
    VP (Fut Subj Pl P2) => h_ + "iciereis" ;
    VP (Fut Subj Pl P3) => h_ + "icieren" ;
    VP (Cond Sg P1) => h_ + "aría" ;
    VP (Cond Sg P2) => h_ + "arías" ;
    VP (Cond Sg P3) => h_ + "aría" ;
    VP (Cond Pl P1) => h_ + "aríamos" ;
    VP (Cond Pl P2) => h_ + "aríais" ;
    VP (Cond Pl P3) => h_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => h_ + "az" ;
    VP (Imp Sg P3) => h_ + "aga" ;
    VP (Imp Pl P1) => h_ + "agamos" ;
    VP (Imp Pl P2) => h_ + "aced" ;
    VP (Imp Pl P3) => h_ + "agan" ;
    VP (Pass Sg Masc) => h_ + "echo" ;
    VP (Pass Sg Fem) => h_ + "echa" ;
    VP (Pass Pl Masc) => h_ + "echos" ;
    VP (Pass Pl Fem) => h_ + "echas"
    }
  } ;
oper influir_45 : Str -> Verbum = \influir ->
  let influ_ = Predef.tk 2 influir in
 {s = table {
    VI Infn => influ_ + "ir" ;
    VI Ger => influ_ + "yendo" ;
    VI Part => influ_ + "ido" ;
    VP (Pres Ind Sg P1) => influ_ + "yo" ;
    VP (Pres Ind Sg P2) => influ_ + "yes" ;
    VP (Pres Ind Sg P3) => influ_ + "ye" ;
    VP (Pres Ind Pl P1) => influ_ + "imos" ;
    VP (Pres Ind Pl P2) => influ_ + "ís" ;
    VP (Pres Ind Pl P3) => influ_ + "yen" ;
    VP (Pres Subj Sg P1) => influ_ + "ya" ;
    VP (Pres Subj Sg P2) => influ_ + "yas" ;
    VP (Pres Subj Sg P3) => influ_ + "ya" ;
    VP (Pres Subj Pl P1) => influ_ + "yamos" ;
    VP (Pres Subj Pl P2) => influ_ + "yáis" ;
    VP (Pres Subj Pl P3) => influ_ + "yan" ;
    VP (Past Ind Sg P1) => influ_ + "ía" ;
    VP (Past Ind Sg P2) => influ_ + "ías" ;
    VP (Past Ind Sg P3) => influ_ + "ía" ;
    VP (Past Ind Pl P1) => influ_ + "íamos" ;
    VP (Past Ind Pl P2) => influ_ + "íais" ;
    VP (Past Ind Pl P3) => influ_ + "ían" ;
    VP (Past Subj Sg P1) => variants {influ_ + "yera" ; influ_ + "yese"} ;
    VP (Past Subj Sg P2) => variants {influ_ + "yeras" ; influ_ + "yeses"} ;
    VP (Past Subj Sg P3) => variants {influ_ + "yera" ; influ_ + "yese"} ;
    VP (Past Subj Pl P1) => variants {influ_ + "yéramos" ; influ_ + "yésemos"} ;
    VP (Past Subj Pl P2) => variants {influ_ + "yerais" ; influ_ + "yeseis"} ;
    VP (Past Subj Pl P3) => variants {influ_ + "yeran" ; influ_ + "yesen"} ;
    VP (Pret Sg P1) => influ_ + "í" ;
    VP (Pret Sg P2) => influ_ + "iste" ;
    VP (Pret Sg P3) => influ_ + "yó" ;
    VP (Pret Pl P1) => influ_ + "imos" ;
    VP (Pret Pl P2) => influ_ + "isteis" ;
    VP (Pret Pl P3) => influ_ + "yeron" ;
    VP (Fut Ind Sg P1) => influ_ + "iré" ;
    VP (Fut Ind Sg P2) => influ_ + "irás" ;
    VP (Fut Ind Sg P3) => influ_ + "irá" ;
    VP (Fut Ind Pl P1) => influ_ + "iremos" ;
    VP (Fut Ind Pl P2) => influ_ + "iréis" ;
    VP (Fut Ind Pl P3) => influ_ + "irán" ;
    VP (Fut Subj Sg P1) => influ_ + "yere" ;
    VP (Fut Subj Sg P2) => influ_ + "yeres" ;
    VP (Fut Subj Sg P3) => influ_ + "yere" ;
    VP (Fut Subj Pl P1) => influ_ + "yéremos" ;
    VP (Fut Subj Pl P2) => influ_ + "yereis" ;
    VP (Fut Subj Pl P3) => influ_ + "yeren" ;
    VP (Cond Sg P1) => influ_ + "iría" ;
    VP (Cond Sg P2) => influ_ + "irías" ;
    VP (Cond Sg P3) => influ_ + "iría" ;
    VP (Cond Pl P1) => influ_ + "iríamos" ;
    VP (Cond Pl P2) => influ_ + "iríais" ;
    VP (Cond Pl P3) => influ_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => influ_ + "ye" ;
    VP (Imp Sg P3) => influ_ + "ya" ;
    VP (Imp Pl P1) => influ_ + "yamos" ;
    VP (Imp Pl P2) => influ_ + "id" ;
    VP (Imp Pl P3) => influ_ + "yan" ;
    VP (Pass Sg Masc) => influ_ + "ido" ;
    VP (Pass Sg Fem) => influ_ + "ida" ;
    VP (Pass Pl Masc) => influ_ + "idos" ;
    VP (Pass Pl Fem) => influ_ + "idas"
    }
  } ;
oper ir_46 : Str -> Verbum = \ir ->
  let x_ = Predef.tk 2 ir in
 {s = table {
    VI Infn => x_ + "ir" ;
    VI Ger => x_ + "yendo" ;
    VI Part => x_ + "ido" ;
    VP (Pres Ind Sg P1) => x_ + "voy" ;
    VP (Pres Ind Sg P2) => x_ + "vas" ;
    VP (Pres Ind Sg P3) => x_ + "va" ;
    VP (Pres Ind Pl P1) => x_ + "vamos" ;
    VP (Pres Ind Pl P2) => x_ + "vais" ;
    VP (Pres Ind Pl P3) => x_ + "van" ;
    VP (Pres Subj Sg P1) => x_ + "vaya" ;
    VP (Pres Subj Sg P2) => x_ + "vayas" ;
    VP (Pres Subj Sg P3) => x_ + "vaya" ;
    VP (Pres Subj Pl P1) => x_ + "vayamos" ;
    VP (Pres Subj Pl P2) => x_ + "vayáis" ;
    VP (Pres Subj Pl P3) => x_ + "vayan" ;
    VP (Past Ind Sg P1) => x_ + "iba" ;
    VP (Past Ind Sg P2) => x_ + "ibas" ;
    VP (Past Ind Sg P3) => x_ + "iba" ;
    VP (Past Ind Pl P1) => x_ + "íbamos" ;
    VP (Past Ind Pl P2) => x_ + "ibais" ;
    VP (Past Ind Pl P3) => x_ + "iban" ;
    VP (Past Subj Sg P1) => variants {x_ + "fuera" ; x_ + "fuese"} ;
    VP (Past Subj Sg P2) => variants {x_ + "fueras" ; x_ + "fueses"} ;
    VP (Past Subj Sg P3) => variants {x_ + "fuera" ; x_ + "fuese"} ;
    VP (Past Subj Pl P1) => variants {x_ + "fuéramos" ; x_ + "fuésemos"} ;
    VP (Past Subj Pl P2) => variants {x_ + "fuerais" ; x_ + "fueseis"} ;
    VP (Past Subj Pl P3) => variants {x_ + "fueran" ; x_ + "fuesen"} ;
    VP (Pret Sg P1) => x_ + "fui" ;
    VP (Pret Sg P2) => x_ + "fuiste" ;
    VP (Pret Sg P3) => x_ + "fue" ;
    VP (Pret Pl P1) => x_ + "fuimos" ;
    VP (Pret Pl P2) => x_ + "fuisteis" ;
    VP (Pret Pl P3) => x_ + "fueron" ;
    VP (Fut Ind Sg P1) => x_ + "iré" ;
    VP (Fut Ind Sg P2) => x_ + "irás" ;
    VP (Fut Ind Sg P3) => x_ + "irá" ;
    VP (Fut Ind Pl P1) => x_ + "iremos" ;
    VP (Fut Ind Pl P2) => x_ + "iréis" ;
    VP (Fut Ind Pl P3) => x_ + "irán" ;
    VP (Fut Subj Sg P1) => x_ + "fuere" ;
    VP (Fut Subj Sg P2) => x_ + "fueres" ;
    VP (Fut Subj Sg P3) => x_ + "fuere" ;
    VP (Fut Subj Pl P1) => x_ + "fuéremos" ;
    VP (Fut Subj Pl P2) => x_ + "fuereis" ;
    VP (Fut Subj Pl P3) => x_ + "fueren" ;
    VP (Cond Sg P1) => x_ + "iría" ;
    VP (Cond Sg P2) => x_ + "irías" ;
    VP (Cond Sg P3) => x_ + "iría" ;
    VP (Cond Pl P1) => x_ + "iríamos" ;
    VP (Cond Pl P2) => x_ + "iríais" ;
    VP (Cond Pl P3) => x_ + "irían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => x_ + "ve" ;
    VP (Imp Sg P3) => x_ + "vaya" ;
    VP (Imp Pl P1) => variants {x_ + "vamos" ; x_ + "vayamos"} ;
    VP (Imp Pl P2) => x_ + "id" ;
    VP (Imp Pl P3) => x_ + "vayan" ;
    VP (Pass Sg Masc) => x_ + "ido" ;
    VP (Pass Sg Fem) => x_ + "ida" ;
    VP (Pass Pl Masc) => x_ + "idos" ;
    VP (Pass Pl Fem) => x_ + "idas"
    }
  } ;
oper jugar_47 : Str -> Verbum = \jugar ->
  let ju_ = Predef.tk 3 jugar in
 {s = table {
    VI Infn => ju_ + "gar" ;
    VI Ger => ju_ + "gando" ;
    VI Part => ju_ + "gado" ;
    VP (Pres Ind Sg P1) => ju_ + "ego" ;
    VP (Pres Ind Sg P2) => ju_ + "egas" ;
    VP (Pres Ind Sg P3) => ju_ + "ega" ;
    VP (Pres Ind Pl P1) => ju_ + "gamos" ;
    VP (Pres Ind Pl P2) => ju_ + "gáis" ;
    VP (Pres Ind Pl P3) => ju_ + "egan" ;
    VP (Pres Subj Sg P1) => ju_ + "egue" ;
    VP (Pres Subj Sg P2) => ju_ + "egues" ;
    VP (Pres Subj Sg P3) => ju_ + "egue" ;
    VP (Pres Subj Pl P1) => ju_ + "guemos" ;
    VP (Pres Subj Pl P2) => ju_ + "guéis" ;
    VP (Pres Subj Pl P3) => ju_ + "eguen" ;
    VP (Past Ind Sg P1) => ju_ + "gaba" ;
    VP (Past Ind Sg P2) => ju_ + "gabas" ;
    VP (Past Ind Sg P3) => ju_ + "gaba" ;
    VP (Past Ind Pl P1) => ju_ + "gábamos" ;
    VP (Past Ind Pl P2) => ju_ + "gabais" ;
    VP (Past Ind Pl P3) => ju_ + "gaban" ;
    VP (Past Subj Sg P1) => variants {ju_ + "gara" ; ju_ + "gase"} ;
    VP (Past Subj Sg P2) => variants {ju_ + "garas" ; ju_ + "gases"} ;
    VP (Past Subj Sg P3) => variants {ju_ + "gara" ; ju_ + "gase"} ;
    VP (Past Subj Pl P1) => variants {ju_ + "gáramos" ; ju_ + "gásemos"} ;
    VP (Past Subj Pl P2) => variants {ju_ + "garais" ; ju_ + "gaseis"} ;
    VP (Past Subj Pl P3) => variants {ju_ + "garan" ; ju_ + "gasen"} ;
    VP (Pret Sg P1) => ju_ + "gué" ;
    VP (Pret Sg P2) => ju_ + "gaste" ;
    VP (Pret Sg P3) => ju_ + "gó" ;
    VP (Pret Pl P1) => ju_ + "gamos" ;
    VP (Pret Pl P2) => ju_ + "gasteis" ;
    VP (Pret Pl P3) => ju_ + "garon" ;
    VP (Fut Ind Sg P1) => ju_ + "garé" ;
    VP (Fut Ind Sg P2) => ju_ + "garás" ;
    VP (Fut Ind Sg P3) => ju_ + "gará" ;
    VP (Fut Ind Pl P1) => ju_ + "garemos" ;
    VP (Fut Ind Pl P2) => ju_ + "garéis" ;
    VP (Fut Ind Pl P3) => ju_ + "garán" ;
    VP (Fut Subj Sg P1) => ju_ + "gare" ;
    VP (Fut Subj Sg P2) => ju_ + "gares" ;
    VP (Fut Subj Sg P3) => ju_ + "gare" ;
    VP (Fut Subj Pl P1) => ju_ + "gáremos" ;
    VP (Fut Subj Pl P2) => ju_ + "gareis" ;
    VP (Fut Subj Pl P3) => ju_ + "garen" ;
    VP (Cond Sg P1) => ju_ + "garía" ;
    VP (Cond Sg P2) => ju_ + "garías" ;
    VP (Cond Sg P3) => ju_ + "garía" ;
    VP (Cond Pl P1) => ju_ + "garíamos" ;
    VP (Cond Pl P2) => ju_ + "garíais" ;
    VP (Cond Pl P3) => ju_ + "garían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ju_ + "ega" ;
    VP (Imp Sg P3) => ju_ + "egue" ;
    VP (Imp Pl P1) => ju_ + "guemos" ;
    VP (Imp Pl P2) => ju_ + "gad" ;
    VP (Imp Pl P3) => ju_ + "eguen" ;
    VP (Pass Sg Masc) => ju_ + "gado" ;
    VP (Pass Sg Fem) => ju_ + "gada" ;
    VP (Pass Pl Masc) => ju_ + "gados" ;
    VP (Pass Pl Fem) => ju_ + "gadas"
    }
  } ;
oper lucir_48 : Str -> Verbum = \lucir ->
  let lu_ = Predef.tk 3 lucir in
 {s = table {
    VI Infn => lu_ + "cir" ;
    VI Ger => lu_ + "ciendo" ;
    VI Part => lu_ + "cido" ;
    VP (Pres Ind Sg P1) => lu_ + "zco" ;
    VP (Pres Ind Sg P2) => lu_ + "ces" ;
    VP (Pres Ind Sg P3) => lu_ + "ce" ;
    VP (Pres Ind Pl P1) => lu_ + "cimos" ;
    VP (Pres Ind Pl P2) => lu_ + "cís" ;
    VP (Pres Ind Pl P3) => lu_ + "cen" ;
    VP (Pres Subj Sg P1) => lu_ + "zca" ;
    VP (Pres Subj Sg P2) => lu_ + "zcas" ;
    VP (Pres Subj Sg P3) => lu_ + "zca" ;
    VP (Pres Subj Pl P1) => lu_ + "zcamos" ;
    VP (Pres Subj Pl P2) => lu_ + "zcáis" ;
    VP (Pres Subj Pl P3) => lu_ + "zcan" ;
    VP (Past Ind Sg P1) => lu_ + "cía" ;
    VP (Past Ind Sg P2) => lu_ + "cías" ;
    VP (Past Ind Sg P3) => lu_ + "cía" ;
    VP (Past Ind Pl P1) => lu_ + "cíamos" ;
    VP (Past Ind Pl P2) => lu_ + "cíais" ;
    VP (Past Ind Pl P3) => lu_ + "cían" ;
    VP (Past Subj Sg P1) => variants {lu_ + "ciera" ; lu_ + "ciese"} ;
    VP (Past Subj Sg P2) => variants {lu_ + "cieras" ; lu_ + "cieses"} ;
    VP (Past Subj Sg P3) => variants {lu_ + "ciera" ; lu_ + "ciese"} ;
    VP (Past Subj Pl P1) => variants {lu_ + "ciéramos" ; lu_ + "ciésemos"} ;
    VP (Past Subj Pl P2) => variants {lu_ + "cierais" ; lu_ + "cieseis"} ;
    VP (Past Subj Pl P3) => variants {lu_ + "cieran" ; lu_ + "ciesen"} ;
    VP (Pret Sg P1) => lu_ + "cí" ;
    VP (Pret Sg P2) => lu_ + "ciste" ;
    VP (Pret Sg P3) => lu_ + "ció" ;
    VP (Pret Pl P1) => lu_ + "cimos" ;
    VP (Pret Pl P2) => lu_ + "cisteis" ;
    VP (Pret Pl P3) => lu_ + "cieron" ;
    VP (Fut Ind Sg P1) => lu_ + "ciré" ;
    VP (Fut Ind Sg P2) => lu_ + "cirás" ;
    VP (Fut Ind Sg P3) => lu_ + "cirá" ;
    VP (Fut Ind Pl P1) => lu_ + "ciremos" ;
    VP (Fut Ind Pl P2) => lu_ + "ciréis" ;
    VP (Fut Ind Pl P3) => lu_ + "cirán" ;
    VP (Fut Subj Sg P1) => lu_ + "ciere" ;
    VP (Fut Subj Sg P2) => lu_ + "cieres" ;
    VP (Fut Subj Sg P3) => lu_ + "ciere" ;
    VP (Fut Subj Pl P1) => lu_ + "ciéremos" ;
    VP (Fut Subj Pl P2) => lu_ + "ciereis" ;
    VP (Fut Subj Pl P3) => lu_ + "cieren" ;
    VP (Cond Sg P1) => lu_ + "ciría" ;
    VP (Cond Sg P2) => lu_ + "cirías" ;
    VP (Cond Sg P3) => lu_ + "ciría" ;
    VP (Cond Pl P1) => lu_ + "ciríamos" ;
    VP (Cond Pl P2) => lu_ + "ciríais" ;
    VP (Cond Pl P3) => lu_ + "cirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => lu_ + "ce" ;
    VP (Imp Sg P3) => lu_ + "zca" ;
    VP (Imp Pl P1) => lu_ + "zcamos" ;
    VP (Imp Pl P2) => lu_ + "cid" ;
    VP (Imp Pl P3) => lu_ + "zcan" ;
    VP (Pass Sg Masc) => lu_ + "cido" ;
    VP (Pass Sg Fem) => lu_ + "cida" ;
    VP (Pass Pl Masc) => lu_ + "cidos" ;
    VP (Pass Pl Fem) => lu_ + "cidas"
    }
  } ;
oper mecer_49 : Str -> Verbum = \mecer ->
  let me_ = Predef.tk 3 mecer in
 {s = table {
    VI Infn => me_ + "cer" ;
    VI Ger => me_ + "ciendo" ;
    VI Part => me_ + "cido" ;
    VP (Pres Ind Sg P1) => me_ + "zo" ;
    VP (Pres Ind Sg P2) => me_ + "ces" ;
    VP (Pres Ind Sg P3) => me_ + "ce" ;
    VP (Pres Ind Pl P1) => me_ + "cemos" ;
    VP (Pres Ind Pl P2) => me_ + "céis" ;
    VP (Pres Ind Pl P3) => me_ + "cen" ;
    VP (Pres Subj Sg P1) => me_ + "za" ;
    VP (Pres Subj Sg P2) => me_ + "zas" ;
    VP (Pres Subj Sg P3) => me_ + "za" ;
    VP (Pres Subj Pl P1) => me_ + "zamos" ;
    VP (Pres Subj Pl P2) => me_ + "záis" ;
    VP (Pres Subj Pl P3) => me_ + "zan" ;
    VP (Past Ind Sg P1) => me_ + "cía" ;
    VP (Past Ind Sg P2) => me_ + "cías" ;
    VP (Past Ind Sg P3) => me_ + "cía" ;
    VP (Past Ind Pl P1) => me_ + "cíamos" ;
    VP (Past Ind Pl P2) => me_ + "cíais" ;
    VP (Past Ind Pl P3) => me_ + "cían" ;
    VP (Past Subj Sg P1) => variants {me_ + "ciera" ; me_ + "ciese"} ;
    VP (Past Subj Sg P2) => variants {me_ + "cieras" ; me_ + "cieses"} ;
    VP (Past Subj Sg P3) => variants {me_ + "ciera" ; me_ + "ciese"} ;
    VP (Past Subj Pl P1) => variants {me_ + "ciéramos" ; me_ + "ciésemos"} ;
    VP (Past Subj Pl P2) => variants {me_ + "cierais" ; me_ + "cieseis"} ;
    VP (Past Subj Pl P3) => variants {me_ + "cieran" ; me_ + "ciesen"} ;
    VP (Pret Sg P1) => me_ + "cí" ;
    VP (Pret Sg P2) => me_ + "ciste" ;
    VP (Pret Sg P3) => me_ + "ció" ;
    VP (Pret Pl P1) => me_ + "cimos" ;
    VP (Pret Pl P2) => me_ + "cisteis" ;
    VP (Pret Pl P3) => me_ + "cieron" ;
    VP (Fut Ind Sg P1) => me_ + "ceré" ;
    VP (Fut Ind Sg P2) => me_ + "cerás" ;
    VP (Fut Ind Sg P3) => me_ + "cerá" ;
    VP (Fut Ind Pl P1) => me_ + "ceremos" ;
    VP (Fut Ind Pl P2) => me_ + "ceréis" ;
    VP (Fut Ind Pl P3) => me_ + "cerán" ;
    VP (Fut Subj Sg P1) => me_ + "ciere" ;
    VP (Fut Subj Sg P2) => me_ + "cieres" ;
    VP (Fut Subj Sg P3) => me_ + "ciere" ;
    VP (Fut Subj Pl P1) => me_ + "ciéremos" ;
    VP (Fut Subj Pl P2) => me_ + "ciereis" ;
    VP (Fut Subj Pl P3) => me_ + "cieren" ;
    VP (Cond Sg P1) => me_ + "cería" ;
    VP (Cond Sg P2) => me_ + "cerías" ;
    VP (Cond Sg P3) => me_ + "cería" ;
    VP (Cond Pl P1) => me_ + "ceríamos" ;
    VP (Cond Pl P2) => me_ + "ceríais" ;
    VP (Cond Pl P3) => me_ + "cerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => me_ + "ce" ;
    VP (Imp Sg P3) => me_ + "za" ;
    VP (Imp Pl P1) => me_ + "zamos" ;
    VP (Imp Pl P2) => me_ + "ced" ;
    VP (Imp Pl P3) => me_ + "zan" ;
    VP (Pass Sg Masc) => me_ + "cido" ;
    VP (Pass Sg Fem) => me_ + "cida" ;
    VP (Pass Pl Masc) => me_ + "cidos" ;
    VP (Pass Pl Fem) => me_ + "cidas"
    }
  } ;
oper mover_50 : Str -> Verbum = \mover ->
  let m_ = Predef.tk 4 mover in
 {s = table {
    VI Infn => m_ + "over" ;
    VI Ger => m_ + "oviendo" ;
    VI Part => m_ + "ovido" ;
    VP (Pres Ind Sg P1) => m_ + "uevo" ;
    VP (Pres Ind Sg P2) => m_ + "ueves" ;
    VP (Pres Ind Sg P3) => m_ + "ueve" ;
    VP (Pres Ind Pl P1) => m_ + "ovemos" ;
    VP (Pres Ind Pl P2) => m_ + "ovéis" ;
    VP (Pres Ind Pl P3) => m_ + "ueven" ;
    VP (Pres Subj Sg P1) => m_ + "ueva" ;
    VP (Pres Subj Sg P2) => m_ + "uevas" ;
    VP (Pres Subj Sg P3) => m_ + "ueva" ;
    VP (Pres Subj Pl P1) => m_ + "ovamos" ;
    VP (Pres Subj Pl P2) => m_ + "ováis" ;
    VP (Pres Subj Pl P3) => m_ + "uevan" ;
    VP (Past Ind Sg P1) => m_ + "ovía" ;
    VP (Past Ind Sg P2) => m_ + "ovías" ;
    VP (Past Ind Sg P3) => m_ + "ovía" ;
    VP (Past Ind Pl P1) => m_ + "ovíamos" ;
    VP (Past Ind Pl P2) => m_ + "ovíais" ;
    VP (Past Ind Pl P3) => m_ + "ovían" ;
    VP (Past Subj Sg P1) => variants {m_ + "oviera" ; m_ + "oviese"} ;
    VP (Past Subj Sg P2) => variants {m_ + "ovieras" ; m_ + "ovieses"} ;
    VP (Past Subj Sg P3) => variants {m_ + "oviera" ; m_ + "oviese"} ;
    VP (Past Subj Pl P1) => variants {m_ + "oviéramos" ; m_ + "oviésemos"} ;
    VP (Past Subj Pl P2) => variants {m_ + "ovierais" ; m_ + "ovieseis"} ;
    VP (Past Subj Pl P3) => variants {m_ + "ovieran" ; m_ + "oviesen"} ;
    VP (Pret Sg P1) => m_ + "oví" ;
    VP (Pret Sg P2) => m_ + "oviste" ;
    VP (Pret Sg P3) => m_ + "ovió" ;
    VP (Pret Pl P1) => m_ + "ovimos" ;
    VP (Pret Pl P2) => m_ + "ovisteis" ;
    VP (Pret Pl P3) => m_ + "ovieron" ;
    VP (Fut Ind Sg P1) => m_ + "overé" ;
    VP (Fut Ind Sg P2) => m_ + "overás" ;
    VP (Fut Ind Sg P3) => m_ + "overá" ;
    VP (Fut Ind Pl P1) => m_ + "overemos" ;
    VP (Fut Ind Pl P2) => m_ + "overéis" ;
    VP (Fut Ind Pl P3) => m_ + "overán" ;
    VP (Fut Subj Sg P1) => m_ + "oviere" ;
    VP (Fut Subj Sg P2) => m_ + "ovieres" ;
    VP (Fut Subj Sg P3) => m_ + "oviere" ;
    VP (Fut Subj Pl P1) => m_ + "oviéremos" ;
    VP (Fut Subj Pl P2) => m_ + "oviereis" ;
    VP (Fut Subj Pl P3) => m_ + "ovieren" ;
    VP (Cond Sg P1) => m_ + "overía" ;
    VP (Cond Sg P2) => m_ + "overías" ;
    VP (Cond Sg P3) => m_ + "overía" ;
    VP (Cond Pl P1) => m_ + "overíamos" ;
    VP (Cond Pl P2) => m_ + "overíais" ;
    VP (Cond Pl P3) => m_ + "overían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => m_ + "ueve" ;
    VP (Imp Sg P3) => m_ + "ueva" ;
    VP (Imp Pl P1) => m_ + "ovamos" ;
    VP (Imp Pl P2) => m_ + "oved" ;
    VP (Imp Pl P3) => m_ + "uevan" ;
    VP (Pass Sg Masc) => m_ + "ovido" ;
    VP (Pass Sg Fem) => m_ + "ovida" ;
    VP (Pass Pl Masc) => m_ + "ovidos" ;
    VP (Pass Pl Fem) => m_ + "ovidas"
    }
  } ;
oper oler_52 : Str -> Verbum = \oler ->
  let x_ = Predef.tk 4 oler in
 {s = table {
    VI Infn => x_ + "oler" ;
    VI Ger => x_ + "oliendo" ;
    VI Part => x_ + "olido" ;
    VP (Pres Ind Sg P1) => x_ + "huelo" ;
    VP (Pres Ind Sg P2) => x_ + "hueles" ;
    VP (Pres Ind Sg P3) => x_ + "huele" ;
    VP (Pres Ind Pl P1) => x_ + "olemos" ;
    VP (Pres Ind Pl P2) => x_ + "oléis" ;
    VP (Pres Ind Pl P3) => x_ + "huelen" ;
    VP (Pres Subj Sg P1) => x_ + "huela" ;
    VP (Pres Subj Sg P2) => x_ + "huelas" ;
    VP (Pres Subj Sg P3) => x_ + "huela" ;
    VP (Pres Subj Pl P1) => x_ + "olamos" ;
    VP (Pres Subj Pl P2) => x_ + "oláis" ;
    VP (Pres Subj Pl P3) => x_ + "huelan" ;
    VP (Past Ind Sg P1) => x_ + "olía" ;
    VP (Past Ind Sg P2) => x_ + "olías" ;
    VP (Past Ind Sg P3) => x_ + "olía" ;
    VP (Past Ind Pl P1) => x_ + "olíamos" ;
    VP (Past Ind Pl P2) => x_ + "olíais" ;
    VP (Past Ind Pl P3) => x_ + "olían" ;
    VP (Past Subj Sg P1) => variants {x_ + "oliera" ; x_ + "oliese"} ;
    VP (Past Subj Sg P2) => variants {x_ + "olieras" ; x_ + "olieses"} ;
    VP (Past Subj Sg P3) => variants {x_ + "oliera" ; x_ + "oliese"} ;
    VP (Past Subj Pl P1) => variants {x_ + "oliéramos" ; x_ + "oliésemos"} ;
    VP (Past Subj Pl P2) => variants {x_ + "olierais" ; x_ + "olieseis"} ;
    VP (Past Subj Pl P3) => variants {x_ + "olieran" ; x_ + "oliesen"} ;
    VP (Pret Sg P1) => x_ + "olí" ;
    VP (Pret Sg P2) => x_ + "oliste" ;
    VP (Pret Sg P3) => x_ + "olió" ;
    VP (Pret Pl P1) => x_ + "olimos" ;
    VP (Pret Pl P2) => x_ + "olisteis" ;
    VP (Pret Pl P3) => x_ + "olieron" ;
    VP (Fut Ind Sg P1) => x_ + "oleré" ;
    VP (Fut Ind Sg P2) => x_ + "olerás" ;
    VP (Fut Ind Sg P3) => x_ + "olerá" ;
    VP (Fut Ind Pl P1) => x_ + "oleremos" ;
    VP (Fut Ind Pl P2) => x_ + "oleréis" ;
    VP (Fut Ind Pl P3) => x_ + "olerán" ;
    VP (Fut Subj Sg P1) => x_ + "oliere" ;
    VP (Fut Subj Sg P2) => x_ + "olieres" ;
    VP (Fut Subj Sg P3) => x_ + "oliere" ;
    VP (Fut Subj Pl P1) => x_ + "oliéremos" ;
    VP (Fut Subj Pl P2) => x_ + "oliereis" ;
    VP (Fut Subj Pl P3) => x_ + "olieren" ;
    VP (Cond Sg P1) => x_ + "olería" ;
    VP (Cond Sg P2) => x_ + "olerías" ;
    VP (Cond Sg P3) => x_ + "olería" ;
    VP (Cond Pl P1) => x_ + "oleríamos" ;
    VP (Cond Pl P2) => x_ + "oleríais" ;
    VP (Cond Pl P3) => x_ + "olerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => x_ + "huele" ;
    VP (Imp Sg P3) => x_ + "huela" ;
    VP (Imp Pl P1) => x_ + "olamos" ;
    VP (Imp Pl P2) => x_ + "oled" ;
    VP (Imp Pl P3) => x_ + "huelan" ;
    VP (Pass Sg Masc) => x_ + "olido" ;
    VP (Pass Sg Fem) => x_ + "olida" ;
    VP (Pass Pl Masc) => x_ + "olidos" ;
    VP (Pass Pl Fem) => x_ + "olidas"
    }
  } ;
oper pagar_53 : Str -> Verbum = \pagar ->
  let pag_ = Predef.tk 2 pagar in
 {s = table {
    VI Infn => pag_ + "ar" ;
    VI Ger => pag_ + "ando" ;
    VI Part => pag_ + "ado" ;
    VP (Pres Ind Sg P1) => pag_ + "o" ;
    VP (Pres Ind Sg P2) => pag_ + "as" ;
    VP (Pres Ind Sg P3) => pag_ + "a" ;
    VP (Pres Ind Pl P1) => pag_ + "amos" ;
    VP (Pres Ind Pl P2) => pag_ + "áis" ;
    VP (Pres Ind Pl P3) => pag_ + "an" ;
    VP (Pres Subj Sg P1) => pag_ + "ue" ;
    VP (Pres Subj Sg P2) => pag_ + "ues" ;
    VP (Pres Subj Sg P3) => pag_ + "ue" ;
    VP (Pres Subj Pl P1) => pag_ + "uemos" ;
    VP (Pres Subj Pl P2) => pag_ + "uéis" ;
    VP (Pres Subj Pl P3) => pag_ + "uen" ;
    VP (Past Ind Sg P1) => pag_ + "aba" ;
    VP (Past Ind Sg P2) => pag_ + "abas" ;
    VP (Past Ind Sg P3) => pag_ + "aba" ;
    VP (Past Ind Pl P1) => pag_ + "ábamos" ;
    VP (Past Ind Pl P2) => pag_ + "abais" ;
    VP (Past Ind Pl P3) => pag_ + "aban" ;
    VP (Past Subj Sg P1) => variants {pag_ + "ara" ; pag_ + "ase"} ;
    VP (Past Subj Sg P2) => variants {pag_ + "aras" ; pag_ + "ases"} ;
    VP (Past Subj Sg P3) => variants {pag_ + "ara" ; pag_ + "ase"} ;
    VP (Past Subj Pl P1) => variants {pag_ + "áramos" ; pag_ + "ásemos"} ;
    VP (Past Subj Pl P2) => variants {pag_ + "arais" ; pag_ + "aseis"} ;
    VP (Past Subj Pl P3) => variants {pag_ + "aran" ; pag_ + "asen"} ;
    VP (Pret Sg P1) => pag_ + "ué" ;
    VP (Pret Sg P2) => pag_ + "aste" ;
    VP (Pret Sg P3) => pag_ + "ó" ;
    VP (Pret Pl P1) => pag_ + "amos" ;
    VP (Pret Pl P2) => pag_ + "asteis" ;
    VP (Pret Pl P3) => pag_ + "aron" ;
    VP (Fut Ind Sg P1) => pag_ + "aré" ;
    VP (Fut Ind Sg P2) => pag_ + "arás" ;
    VP (Fut Ind Sg P3) => pag_ + "ará" ;
    VP (Fut Ind Pl P1) => pag_ + "aremos" ;
    VP (Fut Ind Pl P2) => pag_ + "aréis" ;
    VP (Fut Ind Pl P3) => pag_ + "arán" ;
    VP (Fut Subj Sg P1) => pag_ + "are" ;
    VP (Fut Subj Sg P2) => pag_ + "ares" ;
    VP (Fut Subj Sg P3) => pag_ + "are" ;
    VP (Fut Subj Pl P1) => pag_ + "áremos" ;
    VP (Fut Subj Pl P2) => pag_ + "areis" ;
    VP (Fut Subj Pl P3) => pag_ + "aren" ;
    VP (Cond Sg P1) => pag_ + "aría" ;
    VP (Cond Sg P2) => pag_ + "arías" ;
    VP (Cond Sg P3) => pag_ + "aría" ;
    VP (Cond Pl P1) => pag_ + "aríamos" ;
    VP (Cond Pl P2) => pag_ + "aríais" ;
    VP (Cond Pl P3) => pag_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => pag_ + "a" ;
    VP (Imp Sg P3) => pag_ + "ue" ;
    VP (Imp Pl P1) => pag_ + "uemos" ;
    VP (Imp Pl P2) => pag_ + "ad" ;
    VP (Imp Pl P3) => pag_ + "uen" ;
    VP (Pass Sg Masc) => pag_ + "ado" ;
    VP (Pass Sg Fem) => pag_ + "ada" ;
    VP (Pass Pl Masc) => pag_ + "ados" ;
    VP (Pass Pl Fem) => pag_ + "adas"
    }
  } ;
oper parecer_54 : Str -> Verbum = \parecer ->
  let pare_ = Predef.tk 3 parecer in
 {s = table {
    VI Infn => pare_ + "cer" ;
    VI Ger => pare_ + "ciendo" ;
    VI Part => pare_ + "cido" ;
    VP (Pres Ind Sg P1) => pare_ + "zco" ;
    VP (Pres Ind Sg P2) => pare_ + "ces" ;
    VP (Pres Ind Sg P3) => pare_ + "ce" ;
    VP (Pres Ind Pl P1) => pare_ + "cemos" ;
    VP (Pres Ind Pl P2) => pare_ + "céis" ;
    VP (Pres Ind Pl P3) => pare_ + "cen" ;
    VP (Pres Subj Sg P1) => pare_ + "zca" ;
    VP (Pres Subj Sg P2) => pare_ + "zcas" ;
    VP (Pres Subj Sg P3) => pare_ + "zca" ;
    VP (Pres Subj Pl P1) => pare_ + "zcamos" ;
    VP (Pres Subj Pl P2) => pare_ + "zcáis" ;
    VP (Pres Subj Pl P3) => pare_ + "zcan" ;
    VP (Past Ind Sg P1) => pare_ + "cía" ;
    VP (Past Ind Sg P2) => pare_ + "cías" ;
    VP (Past Ind Sg P3) => pare_ + "cía" ;
    VP (Past Ind Pl P1) => pare_ + "cíamos" ;
    VP (Past Ind Pl P2) => pare_ + "cíais" ;
    VP (Past Ind Pl P3) => pare_ + "cían" ;
    VP (Past Subj Sg P1) => variants {pare_ + "ciera" ; pare_ + "ciese"} ;
    VP (Past Subj Sg P2) => variants {pare_ + "cieras" ; pare_ + "cieses"} ;
    VP (Past Subj Sg P3) => variants {pare_ + "ciera" ; pare_ + "ciese"} ;
    VP (Past Subj Pl P1) => variants {pare_ + "ciéramos" ; pare_ + "ciésemos"} ;
    VP (Past Subj Pl P2) => variants {pare_ + "cierais" ; pare_ + "cieseis"} ;
    VP (Past Subj Pl P3) => variants {pare_ + "cieran" ; pare_ + "ciesen"} ;
    VP (Pret Sg P1) => pare_ + "cí" ;
    VP (Pret Sg P2) => pare_ + "ciste" ;
    VP (Pret Sg P3) => pare_ + "ció" ;
    VP (Pret Pl P1) => pare_ + "cimos" ;
    VP (Pret Pl P2) => pare_ + "cisteis" ;
    VP (Pret Pl P3) => pare_ + "cieron" ;
    VP (Fut Ind Sg P1) => pare_ + "ceré" ;
    VP (Fut Ind Sg P2) => pare_ + "cerás" ;
    VP (Fut Ind Sg P3) => pare_ + "cerá" ;
    VP (Fut Ind Pl P1) => pare_ + "ceremos" ;
    VP (Fut Ind Pl P2) => pare_ + "ceréis" ;
    VP (Fut Ind Pl P3) => pare_ + "cerán" ;
    VP (Fut Subj Sg P1) => pare_ + "ciere" ;
    VP (Fut Subj Sg P2) => pare_ + "cieres" ;
    VP (Fut Subj Sg P3) => pare_ + "ciere" ;
    VP (Fut Subj Pl P1) => pare_ + "ciéremos" ;
    VP (Fut Subj Pl P2) => pare_ + "ciereis" ;
    VP (Fut Subj Pl P3) => pare_ + "cieren" ;
    VP (Cond Sg P1) => pare_ + "cería" ;
    VP (Cond Sg P2) => pare_ + "cerías" ;
    VP (Cond Sg P3) => pare_ + "cería" ;
    VP (Cond Pl P1) => pare_ + "ceríamos" ;
    VP (Cond Pl P2) => pare_ + "ceríais" ;
    VP (Cond Pl P3) => pare_ + "cerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => pare_ + "ce" ;
    VP (Imp Sg P3) => pare_ + "zca" ;
    VP (Imp Pl P1) => pare_ + "zcamos" ;
    VP (Imp Pl P2) => pare_ + "ced" ;
    VP (Imp Pl P3) => pare_ + "zcan" ;
    VP (Pass Sg Masc) => pare_ + "cido" ;
    VP (Pass Sg Fem) => pare_ + "cida" ;
    VP (Pass Pl Masc) => pare_ + "cidos" ;
    VP (Pass Pl Fem) => pare_ + "cidas"
    }
  } ;
oper pedir_55 : Str -> Verbum = \pedir ->
  let p_ = Predef.tk 4 pedir in
 {s = table {
    VI Infn => p_ + "edir" ;
    VI Ger => p_ + "idiendo" ;
    VI Part => p_ + "edido" ;
    VP (Pres Ind Sg P1) => p_ + "ido" ;
    VP (Pres Ind Sg P2) => p_ + "ides" ;
    VP (Pres Ind Sg P3) => p_ + "ide" ;
    VP (Pres Ind Pl P1) => p_ + "edimos" ;
    VP (Pres Ind Pl P2) => p_ + "edís" ;
    VP (Pres Ind Pl P3) => p_ + "iden" ;
    VP (Pres Subj Sg P1) => p_ + "ida" ;
    VP (Pres Subj Sg P2) => p_ + "idas" ;
    VP (Pres Subj Sg P3) => p_ + "ida" ;
    VP (Pres Subj Pl P1) => p_ + "idamos" ;
    VP (Pres Subj Pl P2) => p_ + "idáis" ;
    VP (Pres Subj Pl P3) => p_ + "idan" ;
    VP (Past Ind Sg P1) => p_ + "edía" ;
    VP (Past Ind Sg P2) => p_ + "edías" ;
    VP (Past Ind Sg P3) => p_ + "edía" ;
    VP (Past Ind Pl P1) => p_ + "edíamos" ;
    VP (Past Ind Pl P2) => p_ + "edíais" ;
    VP (Past Ind Pl P3) => p_ + "edían" ;
    VP (Past Subj Sg P1) => variants {p_ + "idiera" ; p_ + "idiese"} ;
    VP (Past Subj Sg P2) => variants {p_ + "idieras" ; p_ + "idieses"} ;
    VP (Past Subj Sg P3) => variants {p_ + "idiera" ; p_ + "idiese"} ;
    VP (Past Subj Pl P1) => variants {p_ + "idiéramos" ; p_ + "idiésemos"} ;
    VP (Past Subj Pl P2) => variants {p_ + "idierais" ; p_ + "idieseis"} ;
    VP (Past Subj Pl P3) => variants {p_ + "idieran" ; p_ + "idiesen"} ;
    VP (Pret Sg P1) => p_ + "edí" ;
    VP (Pret Sg P2) => p_ + "ediste" ;
    VP (Pret Sg P3) => p_ + "idió" ;
    VP (Pret Pl P1) => p_ + "edimos" ;
    VP (Pret Pl P2) => p_ + "edisteis" ;
    VP (Pret Pl P3) => p_ + "idieron" ;
    VP (Fut Ind Sg P1) => p_ + "ediré" ;
    VP (Fut Ind Sg P2) => p_ + "edirás" ;
    VP (Fut Ind Sg P3) => p_ + "edirá" ;
    VP (Fut Ind Pl P1) => p_ + "ediremos" ;
    VP (Fut Ind Pl P2) => p_ + "ediréis" ;
    VP (Fut Ind Pl P3) => p_ + "edirán" ;
    VP (Fut Subj Sg P1) => p_ + "idiere" ;
    VP (Fut Subj Sg P2) => p_ + "idieres" ;
    VP (Fut Subj Sg P3) => p_ + "idiere" ;
    VP (Fut Subj Pl P1) => p_ + "idiéremos" ;
    VP (Fut Subj Pl P2) => p_ + "idiereis" ;
    VP (Fut Subj Pl P3) => p_ + "idieren" ;
    VP (Cond Sg P1) => p_ + "ediría" ;
    VP (Cond Sg P2) => p_ + "edirías" ;
    VP (Cond Sg P3) => p_ + "ediría" ;
    VP (Cond Pl P1) => p_ + "ediríamos" ;
    VP (Cond Pl P2) => p_ + "ediríais" ;
    VP (Cond Pl P3) => p_ + "edirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => p_ + "ide" ;
    VP (Imp Sg P3) => p_ + "ida" ;
    VP (Imp Pl P1) => p_ + "idamos" ;
    VP (Imp Pl P2) => p_ + "edid" ;
    VP (Imp Pl P3) => p_ + "idan" ;
    VP (Pass Sg Masc) => p_ + "edido" ;
    VP (Pass Sg Fem) => p_ + "edida" ;
    VP (Pass Pl Masc) => p_ + "edidos" ;
    VP (Pass Pl Fem) => p_ + "edidas"
    }
  } ;
oper pensar_56 : Str -> Verbum = \pensar ->
  let p_ = Predef.tk 5 pensar in
 {s = table {
    VI Infn => p_ + "ensar" ;
    VI Ger => p_ + "ensando" ;
    VI Part => p_ + "ensado" ;
    VP (Pres Ind Sg P1) => p_ + "ienso" ;
    VP (Pres Ind Sg P2) => p_ + "iensas" ;
    VP (Pres Ind Sg P3) => p_ + "iensa" ;
    VP (Pres Ind Pl P1) => p_ + "ensamos" ;
    VP (Pres Ind Pl P2) => p_ + "ensáis" ;
    VP (Pres Ind Pl P3) => p_ + "iensan" ;
    VP (Pres Subj Sg P1) => p_ + "iense" ;
    VP (Pres Subj Sg P2) => p_ + "ienses" ;
    VP (Pres Subj Sg P3) => p_ + "iense" ;
    VP (Pres Subj Pl P1) => p_ + "ensemos" ;
    VP (Pres Subj Pl P2) => p_ + "enséis" ;
    VP (Pres Subj Pl P3) => p_ + "iensen" ;
    VP (Past Ind Sg P1) => p_ + "ensaba" ;
    VP (Past Ind Sg P2) => p_ + "ensabas" ;
    VP (Past Ind Sg P3) => p_ + "ensaba" ;
    VP (Past Ind Pl P1) => p_ + "ensábamos" ;
    VP (Past Ind Pl P2) => p_ + "ensabais" ;
    VP (Past Ind Pl P3) => p_ + "ensaban" ;
    VP (Past Subj Sg P1) => variants {p_ + "ensara" ; p_ + "ensase"} ;
    VP (Past Subj Sg P2) => variants {p_ + "ensaras" ; p_ + "ensases"} ;
    VP (Past Subj Sg P3) => variants {p_ + "ensara" ; p_ + "ensase"} ;
    VP (Past Subj Pl P1) => variants {p_ + "ensáramos" ; p_ + "ensásemos"} ;
    VP (Past Subj Pl P2) => variants {p_ + "ensarais" ; p_ + "ensaseis"} ;
    VP (Past Subj Pl P3) => variants {p_ + "ensaran" ; p_ + "ensasen"} ;
    VP (Pret Sg P1) => p_ + "ensé" ;
    VP (Pret Sg P2) => p_ + "ensaste" ;
    VP (Pret Sg P3) => p_ + "ensó" ;
    VP (Pret Pl P1) => p_ + "ensamos" ;
    VP (Pret Pl P2) => p_ + "ensasteis" ;
    VP (Pret Pl P3) => p_ + "ensaron" ;
    VP (Fut Ind Sg P1) => p_ + "ensaré" ;
    VP (Fut Ind Sg P2) => p_ + "ensarás" ;
    VP (Fut Ind Sg P3) => p_ + "ensará" ;
    VP (Fut Ind Pl P1) => p_ + "ensaremos" ;
    VP (Fut Ind Pl P2) => p_ + "ensaréis" ;
    VP (Fut Ind Pl P3) => p_ + "ensarán" ;
    VP (Fut Subj Sg P1) => p_ + "ensare" ;
    VP (Fut Subj Sg P2) => p_ + "ensares" ;
    VP (Fut Subj Sg P3) => p_ + "ensare" ;
    VP (Fut Subj Pl P1) => p_ + "ensáremos" ;
    VP (Fut Subj Pl P2) => p_ + "ensareis" ;
    VP (Fut Subj Pl P3) => p_ + "ensaren" ;
    VP (Cond Sg P1) => p_ + "ensaría" ;
    VP (Cond Sg P2) => p_ + "ensarías" ;
    VP (Cond Sg P3) => p_ + "ensaría" ;
    VP (Cond Pl P1) => p_ + "ensaríamos" ;
    VP (Cond Pl P2) => p_ + "ensaríais" ;
    VP (Cond Pl P3) => p_ + "ensarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => p_ + "iensa" ;
    VP (Imp Sg P3) => p_ + "iense" ;
    VP (Imp Pl P1) => p_ + "ensemos" ;
    VP (Imp Pl P2) => p_ + "ensad" ;
    VP (Imp Pl P3) => p_ + "iensen" ;
    VP (Pass Sg Masc) => p_ + "ensado" ;
    VP (Pass Sg Fem) => p_ + "ensada" ;
    VP (Pass Pl Masc) => p_ + "ensados" ;
    VP (Pass Pl Fem) => p_ + "ensadas"
    }
  } ;
oper placer_57 : Str -> Verbum = \placer ->
  let pl_ = Predef.tk 4 placer in
 {s = table {
    VI Infn => pl_ + "acer" ;
    VI Ger => pl_ + "aciendo" ;
    VI Part => pl_ + "acido" ;
    VP (Pres Ind Sg P1) => pl_ + "azco" ;
    VP (Pres Ind Sg P2) => pl_ + "aces" ;
    VP (Pres Ind Sg P3) => pl_ + "ace" ;
    VP (Pres Ind Pl P1) => pl_ + "acemos" ;
    VP (Pres Ind Pl P2) => pl_ + "acéis" ;
    VP (Pres Ind Pl P3) => pl_ + "acen" ;
    VP (Pres Subj Sg P1) => pl_ + "azca" ;
    VP (Pres Subj Sg P2) => pl_ + "azcas" ;
    VP (Pres Subj Sg P3) => variants {pl_ + "azca" ; pl_ + "egue" ; pl_ + "ega"} ;
    VP (Pres Subj Pl P1) => pl_ + "azcamos" ;
    VP (Pres Subj Pl P2) => pl_ + "azcáis" ;
    VP (Pres Subj Pl P3) => pl_ + "azcan" ;
    VP (Past Ind Sg P1) => pl_ + "acía" ;
    VP (Past Ind Sg P2) => pl_ + "acías" ;
    VP (Past Ind Sg P3) => pl_ + "acía" ;
    VP (Past Ind Pl P1) => pl_ + "acíamos" ;
    VP (Past Ind Pl P2) => pl_ + "acíais" ;
    VP (Past Ind Pl P3) => pl_ + "acían" ;
    VP (Past Subj Sg P1) => variants {pl_ + "aciera" ; pl_ + "aciese"} ;
    VP (Past Subj Sg P2) => variants {pl_ + "acieras" ; pl_ + "acieses"} ;
    VP (Past Subj Sg P3) => variants {pl_ + "aciera" ; pl_ + "aciese" ; pl_ + "uguiera" ; pl_ + "uguiese"} ;
    VP (Past Subj Pl P1) => variants {pl_ + "aciéramos" ; pl_ + "aciésemos"} ;
    VP (Past Subj Pl P2) => variants {pl_ + "acierais" ; pl_ + "acieseis"} ;
    VP (Past Subj Pl P3) => variants {pl_ + "acieran" ; pl_ + "aciesen"} ;
    VP (Pret Sg P1) => pl_ + "ací" ;
    VP (Pret Sg P2) => pl_ + "aciste" ;
    VP (Pret Sg P3) => variants {pl_ + "ació" ; pl_ + "ugo"} ;
    VP (Pret Pl P1) => pl_ + "acimos" ;
    VP (Pret Pl P2) => pl_ + "acisteis" ;
    VP (Pret Pl P3) => variants {pl_ + "acieron" ; pl_ + "uguieron"} ;
    VP (Fut Ind Sg P1) => pl_ + "aceré" ;
    VP (Fut Ind Sg P2) => pl_ + "acerás" ;
    VP (Fut Ind Sg P3) => pl_ + "acerá" ;
    VP (Fut Ind Pl P1) => pl_ + "aceremos" ;
    VP (Fut Ind Pl P2) => pl_ + "aceréis" ;
    VP (Fut Ind Pl P3) => pl_ + "acerán" ;
    VP (Fut Subj Sg P1) => pl_ + "aciere" ;
    VP (Fut Subj Sg P2) => pl_ + "acieres" ;
    VP (Fut Subj Sg P3) => variants {pl_ + "aciere" ; pl_ + "uguiere"} ;
    VP (Fut Subj Pl P1) => pl_ + "aciéremos" ;
    VP (Fut Subj Pl P2) => pl_ + "aciereis" ;
    VP (Fut Subj Pl P3) => pl_ + "acieren" ;
    VP (Cond Sg P1) => pl_ + "acería" ;
    VP (Cond Sg P2) => pl_ + "acerías" ;
    VP (Cond Sg P3) => pl_ + "acería" ;
    VP (Cond Pl P1) => pl_ + "aceríamos" ;
    VP (Cond Pl P2) => pl_ + "aceríais" ;
    VP (Cond Pl P3) => pl_ + "acerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => pl_ + "ace" ;
    VP (Imp Sg P3) => pl_ + "azca" ;
    VP (Imp Pl P1) => pl_ + "azcamos" ;
    VP (Imp Pl P2) => pl_ + "aced" ;
    VP (Imp Pl P3) => pl_ + "azcan" ;
    VP (Pass Sg Masc) => pl_ + "acido" ;
    VP (Pass Sg Fem) => pl_ + "acida" ;
    VP (Pass Pl Masc) => pl_ + "acidos" ;
    VP (Pass Pl Fem) => pl_ + "acidas"
    }
  } ;
oper poder_58 : Str -> Verbum = \poder ->
  let p_ = Predef.tk 4 poder in
 {s = table {
    VI Infn => p_ + "oder" ;
    VI Ger => p_ + "udiendo" ;
    VI Part => p_ + "odido" ;
    VP (Pres Ind Sg P1) => p_ + "uedo" ;
    VP (Pres Ind Sg P2) => p_ + "uedes" ;
    VP (Pres Ind Sg P3) => p_ + "uede" ;
    VP (Pres Ind Pl P1) => p_ + "odemos" ;
    VP (Pres Ind Pl P2) => p_ + "odéis" ;
    VP (Pres Ind Pl P3) => p_ + "ueden" ;
    VP (Pres Subj Sg P1) => p_ + "ueda" ;
    VP (Pres Subj Sg P2) => p_ + "uedas" ;
    VP (Pres Subj Sg P3) => p_ + "ueda" ;
    VP (Pres Subj Pl P1) => p_ + "odamos" ;
    VP (Pres Subj Pl P2) => p_ + "odáis" ;
    VP (Pres Subj Pl P3) => p_ + "uedan" ;
    VP (Past Ind Sg P1) => p_ + "odía" ;
    VP (Past Ind Sg P2) => p_ + "odías" ;
    VP (Past Ind Sg P3) => p_ + "odía" ;
    VP (Past Ind Pl P1) => p_ + "odíamos" ;
    VP (Past Ind Pl P2) => p_ + "odíais" ;
    VP (Past Ind Pl P3) => p_ + "odían" ;
    VP (Past Subj Sg P1) => variants {p_ + "udiera" ; p_ + "udiese"} ;
    VP (Past Subj Sg P2) => variants {p_ + "udieras" ; p_ + "udieses"} ;
    VP (Past Subj Sg P3) => variants {p_ + "udiera" ; p_ + "udiese"} ;
    VP (Past Subj Pl P1) => variants {p_ + "udiéramos" ; p_ + "udiésemos"} ;
    VP (Past Subj Pl P2) => variants {p_ + "udierais" ; p_ + "udieseis"} ;
    VP (Past Subj Pl P3) => variants {p_ + "udieran" ; p_ + "udiesen"} ;
    VP (Pret Sg P1) => p_ + "ude" ;
    VP (Pret Sg P2) => p_ + "udiste" ;
    VP (Pret Sg P3) => p_ + "udo" ;
    VP (Pret Pl P1) => p_ + "udimos" ;
    VP (Pret Pl P2) => p_ + "udisteis" ;
    VP (Pret Pl P3) => p_ + "udieron" ;
    VP (Fut Ind Sg P1) => p_ + "odré" ;
    VP (Fut Ind Sg P2) => p_ + "odrás" ;
    VP (Fut Ind Sg P3) => p_ + "odrá" ;
    VP (Fut Ind Pl P1) => p_ + "odremos" ;
    VP (Fut Ind Pl P2) => p_ + "odréis" ;
    VP (Fut Ind Pl P3) => p_ + "odrán" ;
    VP (Fut Subj Sg P1) => p_ + "udiere" ;
    VP (Fut Subj Sg P2) => p_ + "udieres" ;
    VP (Fut Subj Sg P3) => p_ + "udiere" ;
    VP (Fut Subj Pl P1) => p_ + "udiéremos" ;
    VP (Fut Subj Pl P2) => p_ + "udiereis" ;
    VP (Fut Subj Pl P3) => p_ + "udieren" ;
    VP (Cond Sg P1) => p_ + "odría" ;
    VP (Cond Sg P2) => p_ + "odrías" ;
    VP (Cond Sg P3) => p_ + "odría" ;
    VP (Cond Pl P1) => p_ + "odríamos" ;
    VP (Cond Pl P2) => p_ + "odríais" ;
    VP (Cond Pl P3) => p_ + "odrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => p_ + "uede" ;
    VP (Imp Sg P3) => p_ + "ueda" ;
    VP (Imp Pl P1) => p_ + "odamos" ;
    VP (Imp Pl P2) => p_ + "oded" ;
    VP (Imp Pl P3) => p_ + "uedan" ;
    VP (Pass Sg Masc) => p_ + "odido" ;
    VP (Pass Sg Fem) => p_ + "odida" ;
    VP (Pass Pl Masc) => p_ + "odidos" ;
    VP (Pass Pl Fem) => p_ + "odidas"
    }
  } ;
oper poner_60 : Str -> Verbum = \poner ->
  let p_ = Predef.tk 4 poner in
 {s = table {
    VI Infn => p_ + "oner" ;
    VI Ger => p_ + "oniendo" ;
    VI Part => p_ + "uesto" ;
    VP (Pres Ind Sg P1) => p_ + "ongo" ;
    VP (Pres Ind Sg P2) => p_ + "ones" ;
    VP (Pres Ind Sg P3) => p_ + "one" ;
    VP (Pres Ind Pl P1) => p_ + "onemos" ;
    VP (Pres Ind Pl P2) => p_ + "onéis" ;
    VP (Pres Ind Pl P3) => p_ + "onen" ;
    VP (Pres Subj Sg P1) => p_ + "onga" ;
    VP (Pres Subj Sg P2) => p_ + "ongas" ;
    VP (Pres Subj Sg P3) => p_ + "onga" ;
    VP (Pres Subj Pl P1) => p_ + "ongamos" ;
    VP (Pres Subj Pl P2) => p_ + "ongáis" ;
    VP (Pres Subj Pl P3) => p_ + "ongan" ;
    VP (Past Ind Sg P1) => p_ + "onía" ;
    VP (Past Ind Sg P2) => p_ + "onías" ;
    VP (Past Ind Sg P3) => p_ + "onía" ;
    VP (Past Ind Pl P1) => p_ + "oníamos" ;
    VP (Past Ind Pl P2) => p_ + "oníais" ;
    VP (Past Ind Pl P3) => p_ + "onían" ;
    VP (Past Subj Sg P1) => variants {p_ + "usiera" ; p_ + "usiese"} ;
    VP (Past Subj Sg P2) => variants {p_ + "usieras" ; p_ + "usieses"} ;
    VP (Past Subj Sg P3) => variants {p_ + "usiera" ; p_ + "usiese"} ;
    VP (Past Subj Pl P1) => variants {p_ + "usiéramos" ; p_ + "usiésemos"} ;
    VP (Past Subj Pl P2) => variants {p_ + "usierais" ; p_ + "usieseis"} ;
    VP (Past Subj Pl P3) => variants {p_ + "usieran" ; p_ + "usiesen"} ;
    VP (Pret Sg P1) => p_ + "use" ;
    VP (Pret Sg P2) => p_ + "usiste" ;
    VP (Pret Sg P3) => p_ + "uso" ;
    VP (Pret Pl P1) => p_ + "usimos" ;
    VP (Pret Pl P2) => p_ + "usisteis" ;
    VP (Pret Pl P3) => p_ + "usieron" ;
    VP (Fut Ind Sg P1) => p_ + "ondré" ;
    VP (Fut Ind Sg P2) => p_ + "ondrás" ;
    VP (Fut Ind Sg P3) => p_ + "ondrá" ;
    VP (Fut Ind Pl P1) => p_ + "ondremos" ;
    VP (Fut Ind Pl P2) => p_ + "ondréis" ;
    VP (Fut Ind Pl P3) => p_ + "ondrán" ;
    VP (Fut Subj Sg P1) => p_ + "usiere" ;
    VP (Fut Subj Sg P2) => p_ + "usieres" ;
    VP (Fut Subj Sg P3) => p_ + "usiere" ;
    VP (Fut Subj Pl P1) => p_ + "usiéremos" ;
    VP (Fut Subj Pl P2) => p_ + "usiereis" ;
    VP (Fut Subj Pl P3) => p_ + "usieren" ;
    VP (Cond Sg P1) => p_ + "ondría" ;
    VP (Cond Sg P2) => p_ + "ondrías" ;
    VP (Cond Sg P3) => p_ + "ondría" ;
    VP (Cond Pl P1) => p_ + "ondríamos" ;
    VP (Cond Pl P2) => p_ + "ondríais" ;
    VP (Cond Pl P3) => p_ + "ondrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => p_ + "on" ;
    VP (Imp Sg P3) => p_ + "onga" ;
    VP (Imp Pl P1) => p_ + "ongamos" ;
    VP (Imp Pl P2) => p_ + "oned" ;
    VP (Imp Pl P3) => p_ + "ongan" ;
    VP (Pass Sg Masc) => p_ + "uesto" ;
    VP (Pass Sg Fem) => p_ + "uesta" ;
    VP (Pass Pl Masc) => p_ + "uestos" ;
    VP (Pass Pl Fem) => p_ + "uestas"
    }
  } ;
oper predecir_61 : Str -> Verbum = \predecir ->
  let pred_ = Predef.tk 4 predecir in
 {s = table {
    VI Infn => pred_ + "ecir" ;
    VI Ger => pred_ + "iciendo" ;
    VI Part => pred_ + "icho" ;
    VP (Pres Ind Sg P1) => pred_ + "igo" ;
    VP (Pres Ind Sg P2) => pred_ + "ices" ;
    VP (Pres Ind Sg P3) => pred_ + "ice" ;
    VP (Pres Ind Pl P1) => pred_ + "ecimos" ;
    VP (Pres Ind Pl P2) => pred_ + "ecís" ;
    VP (Pres Ind Pl P3) => pred_ + "icen" ;
    VP (Pres Subj Sg P1) => pred_ + "iga" ;
    VP (Pres Subj Sg P2) => pred_ + "igas" ;
    VP (Pres Subj Sg P3) => pred_ + "iga" ;
    VP (Pres Subj Pl P1) => pred_ + "igamos" ;
    VP (Pres Subj Pl P2) => pred_ + "igáis" ;
    VP (Pres Subj Pl P3) => pred_ + "igan" ;
    VP (Past Ind Sg P1) => pred_ + "ecía" ;
    VP (Past Ind Sg P2) => pred_ + "ecías" ;
    VP (Past Ind Sg P3) => pred_ + "ecía" ;
    VP (Past Ind Pl P1) => pred_ + "ecíamos" ;
    VP (Past Ind Pl P2) => pred_ + "ecíais" ;
    VP (Past Ind Pl P3) => pred_ + "ecían" ;
    VP (Past Subj Sg P1) => variants {pred_ + "ijera" ; pred_ + "ijese"} ;
    VP (Past Subj Sg P2) => variants {pred_ + "ijeras" ; pred_ + "ijeses"} ;
    VP (Past Subj Sg P3) => variants {pred_ + "ijera" ; pred_ + "ijese"} ;
    VP (Past Subj Pl P1) => variants {pred_ + "ijéramos" ; pred_ + "ijésemos"} ;
    VP (Past Subj Pl P2) => variants {pred_ + "ijerais" ; pred_ + "ijeseis"} ;
    VP (Past Subj Pl P3) => variants {pred_ + "ijeran" ; pred_ + "ijesen"} ;
    VP (Pret Sg P1) => pred_ + "ije" ;
    VP (Pret Sg P2) => pred_ + "ijiste" ;
    VP (Pret Sg P3) => pred_ + "ijo" ;
    VP (Pret Pl P1) => pred_ + "ijimos" ;
    VP (Pret Pl P2) => pred_ + "ijisteis" ;
    VP (Pret Pl P3) => pred_ + "ijeron" ;
    VP (Fut Ind Sg P1) => pred_ + "eciré" ;
    VP (Fut Ind Sg P2) => pred_ + "ecirás" ;
    VP (Fut Ind Sg P3) => pred_ + "ecirá" ;
    VP (Fut Ind Pl P1) => pred_ + "eciremos" ;
    VP (Fut Ind Pl P2) => pred_ + "eciréis" ;
    VP (Fut Ind Pl P3) => pred_ + "ecirán" ;
    VP (Fut Subj Sg P1) => pred_ + "ijere" ;
    VP (Fut Subj Sg P2) => pred_ + "ijeres" ;
    VP (Fut Subj Sg P3) => pred_ + "ijere" ;
    VP (Fut Subj Pl P1) => pred_ + "ijéremos" ;
    VP (Fut Subj Pl P2) => pred_ + "ijereis" ;
    VP (Fut Subj Pl P3) => pred_ + "ijeren" ;
    VP (Cond Sg P1) => pred_ + "eciría" ;
    VP (Cond Sg P2) => pred_ + "ecirías" ;
    VP (Cond Sg P3) => pred_ + "eciría" ;
    VP (Cond Pl P1) => pred_ + "eciríamos" ;
    VP (Cond Pl P2) => pred_ + "eciríais" ;
    VP (Cond Pl P3) => pred_ + "ecirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => pred_ + "ice" ;
    VP (Imp Sg P3) => pred_ + "iga" ;
    VP (Imp Pl P1) => pred_ + "igamos" ;
    VP (Imp Pl P2) => pred_ + "ecid" ;
    VP (Imp Pl P3) => pred_ + "igan" ;
    VP (Pass Sg Masc) => pred_ + "icho" ;
    VP (Pass Sg Fem) => pred_ + "icha" ;
    VP (Pass Pl Masc) => pred_ + "ichos" ;
    VP (Pass Pl Fem) => pred_ + "ichas"
    }
  } ;
oper producir_62 : Str -> Verbum = \producir ->
  let produ_ = Predef.tk 3 producir in
 {s = table {
    VI Infn => produ_ + "cir" ;
    VI Ger => produ_ + "ciendo" ;
    VI Part => produ_ + "cido" ;
    VP (Pres Ind Sg P1) => produ_ + "zco" ;
    VP (Pres Ind Sg P2) => produ_ + "ces" ;
    VP (Pres Ind Sg P3) => produ_ + "ce" ;
    VP (Pres Ind Pl P1) => produ_ + "cimos" ;
    VP (Pres Ind Pl P2) => produ_ + "cís" ;
    VP (Pres Ind Pl P3) => produ_ + "cen" ;
    VP (Pres Subj Sg P1) => produ_ + "zca" ;
    VP (Pres Subj Sg P2) => produ_ + "zcas" ;
    VP (Pres Subj Sg P3) => produ_ + "zca" ;
    VP (Pres Subj Pl P1) => produ_ + "zcamos" ;
    VP (Pres Subj Pl P2) => produ_ + "zcáis" ;
    VP (Pres Subj Pl P3) => produ_ + "zcan" ;
    VP (Past Ind Sg P1) => produ_ + "cía" ;
    VP (Past Ind Sg P2) => produ_ + "cías" ;
    VP (Past Ind Sg P3) => produ_ + "cía" ;
    VP (Past Ind Pl P1) => produ_ + "cíamos" ;
    VP (Past Ind Pl P2) => produ_ + "cíais" ;
    VP (Past Ind Pl P3) => produ_ + "cían" ;
    VP (Past Subj Sg P1) => variants {produ_ + "jera" ; produ_ + "jese"} ;
    VP (Past Subj Sg P2) => variants {produ_ + "jeras" ; produ_ + "jeses"} ;
    VP (Past Subj Sg P3) => variants {produ_ + "jera" ; produ_ + "jese"} ;
    VP (Past Subj Pl P1) => variants {produ_ + "jéramos" ; produ_ + "jésemos"} ;
    VP (Past Subj Pl P2) => variants {produ_ + "jerais" ; produ_ + "jeseis"} ;
    VP (Past Subj Pl P3) => variants {produ_ + "jeran" ; produ_ + "jesen"} ;
    VP (Pret Sg P1) => produ_ + "je" ;
    VP (Pret Sg P2) => produ_ + "jiste" ;
    VP (Pret Sg P3) => produ_ + "jo" ;
    VP (Pret Pl P1) => produ_ + "jimos" ;
    VP (Pret Pl P2) => produ_ + "jisteis" ;
    VP (Pret Pl P3) => produ_ + "jeron" ;
    VP (Fut Ind Sg P1) => produ_ + "ciré" ;
    VP (Fut Ind Sg P2) => produ_ + "cirás" ;
    VP (Fut Ind Sg P3) => produ_ + "cirá" ;
    VP (Fut Ind Pl P1) => produ_ + "ciremos" ;
    VP (Fut Ind Pl P2) => produ_ + "ciréis" ;
    VP (Fut Ind Pl P3) => produ_ + "cirán" ;
    VP (Fut Subj Sg P1) => produ_ + "jere" ;
    VP (Fut Subj Sg P2) => produ_ + "jeres" ;
    VP (Fut Subj Sg P3) => produ_ + "jere" ;
    VP (Fut Subj Pl P1) => produ_ + "jéremos" ;
    VP (Fut Subj Pl P2) => produ_ + "jereis" ;
    VP (Fut Subj Pl P3) => produ_ + "jeren" ;
    VP (Cond Sg P1) => produ_ + "ciría" ;
    VP (Cond Sg P2) => produ_ + "cirías" ;
    VP (Cond Sg P3) => produ_ + "ciría" ;
    VP (Cond Pl P1) => produ_ + "ciríamos" ;
    VP (Cond Pl P2) => produ_ + "ciríais" ;
    VP (Cond Pl P3) => produ_ + "cirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => produ_ + "ce" ;
    VP (Imp Sg P3) => produ_ + "zca" ;
    VP (Imp Pl P1) => produ_ + "zcamos" ;
    VP (Imp Pl P2) => produ_ + "cid" ;
    VP (Imp Pl P3) => produ_ + "zcan" ;
    VP (Pass Sg Masc) => produ_ + "cido" ;
    VP (Pass Sg Fem) => produ_ + "cida" ;
    VP (Pass Pl Masc) => produ_ + "cidos" ;
    VP (Pass Pl Fem) => produ_ + "cidas"
    }
  } ;
oper prohibir_63 : Str -> Verbum = \prohibir ->
  let proh_ = Predef.tk 4 prohibir in
 {s = table {
    VI Infn => proh_ + "ibir" ;
    VI Ger => proh_ + "ibiendo" ;
    VI Part => proh_ + "ibido" ;
    VP (Pres Ind Sg P1) => proh_ + "íbo" ;
    VP (Pres Ind Sg P2) => proh_ + "íbes" ;
    VP (Pres Ind Sg P3) => proh_ + "íbe" ;
    VP (Pres Ind Pl P1) => proh_ + "ibimos" ;
    VP (Pres Ind Pl P2) => proh_ + "ibís" ;
    VP (Pres Ind Pl P3) => proh_ + "íben" ;
    VP (Pres Subj Sg P1) => proh_ + "íba" ;
    VP (Pres Subj Sg P2) => proh_ + "íbas" ;
    VP (Pres Subj Sg P3) => proh_ + "íba" ;
    VP (Pres Subj Pl P1) => proh_ + "ibamos" ;
    VP (Pres Subj Pl P2) => proh_ + "ibáis" ;
    VP (Pres Subj Pl P3) => proh_ + "íban" ;
    VP (Past Ind Sg P1) => proh_ + "ibía" ;
    VP (Past Ind Sg P2) => proh_ + "ibías" ;
    VP (Past Ind Sg P3) => proh_ + "ibía" ;
    VP (Past Ind Pl P1) => proh_ + "ibíamos" ;
    VP (Past Ind Pl P2) => proh_ + "ibíais" ;
    VP (Past Ind Pl P3) => proh_ + "ibían" ;
    VP (Past Subj Sg P1) => variants {proh_ + "ibiera" ; proh_ + "ibiese"} ;
    VP (Past Subj Sg P2) => variants {proh_ + "ibieras" ; proh_ + "ibieses"} ;
    VP (Past Subj Sg P3) => variants {proh_ + "ibiera" ; proh_ + "ibiese"} ;
    VP (Past Subj Pl P1) => variants {proh_ + "ibiéramos" ; proh_ + "ibiésemos"} ;
    VP (Past Subj Pl P2) => variants {proh_ + "ibierais" ; proh_ + "ibieseis"} ;
    VP (Past Subj Pl P3) => variants {proh_ + "ibieran" ; proh_ + "ibiesen"} ;
    VP (Pret Sg P1) => proh_ + "ibí" ;
    VP (Pret Sg P2) => proh_ + "ibiste" ;
    VP (Pret Sg P3) => proh_ + "ibió" ;
    VP (Pret Pl P1) => proh_ + "ibimos" ;
    VP (Pret Pl P2) => proh_ + "ibisteis" ;
    VP (Pret Pl P3) => proh_ + "ibieron" ;
    VP (Fut Ind Sg P1) => proh_ + "ibiré" ;
    VP (Fut Ind Sg P2) => proh_ + "ibirás" ;
    VP (Fut Ind Sg P3) => proh_ + "ibirá" ;
    VP (Fut Ind Pl P1) => proh_ + "ibiremos" ;
    VP (Fut Ind Pl P2) => proh_ + "ibiréis" ;
    VP (Fut Ind Pl P3) => proh_ + "ibirán" ;
    VP (Fut Subj Sg P1) => proh_ + "ibiere" ;
    VP (Fut Subj Sg P2) => proh_ + "ibieres" ;
    VP (Fut Subj Sg P3) => proh_ + "ibiere" ;
    VP (Fut Subj Pl P1) => proh_ + "ibiéremos" ;
    VP (Fut Subj Pl P2) => proh_ + "ibiereis" ;
    VP (Fut Subj Pl P3) => proh_ + "ibieren" ;
    VP (Cond Sg P1) => proh_ + "ibiría" ;
    VP (Cond Sg P2) => proh_ + "ibirías" ;
    VP (Cond Sg P3) => proh_ + "ibiría" ;
    VP (Cond Pl P1) => proh_ + "ibiríamos" ;
    VP (Cond Pl P2) => proh_ + "ibiríais" ;
    VP (Cond Pl P3) => proh_ + "ibirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => proh_ + "íbe" ;
    VP (Imp Sg P3) => proh_ + "íba" ;
    VP (Imp Pl P1) => proh_ + "ibamos" ;
    VP (Imp Pl P2) => proh_ + "ibid" ;
    VP (Imp Pl P3) => proh_ + "íban" ;
    VP (Pass Sg Masc) => proh_ + "ibido" ;
    VP (Pass Sg Fem) => proh_ + "ibida" ;
    VP (Pass Pl Masc) => proh_ + "ibidos" ;
    VP (Pass Pl Fem) => proh_ + "ibidas"
    }
  } ;
oper querer_64 : Str -> Verbum = \querer ->
  let qu_ = Predef.tk 4 querer in
 {s = table {
    VI Infn => qu_ + "erer" ;
    VI Ger => qu_ + "eriendo" ;
    VI Part => qu_ + "erido" ;
    VP (Pres Ind Sg P1) => qu_ + "iero" ;
    VP (Pres Ind Sg P2) => qu_ + "ieres" ;
    VP (Pres Ind Sg P3) => qu_ + "iere" ;
    VP (Pres Ind Pl P1) => qu_ + "eremos" ;
    VP (Pres Ind Pl P2) => qu_ + "eréis" ;
    VP (Pres Ind Pl P3) => qu_ + "ieren" ;
    VP (Pres Subj Sg P1) => qu_ + "iera" ;
    VP (Pres Subj Sg P2) => qu_ + "ieras" ;
    VP (Pres Subj Sg P3) => qu_ + "iera" ;
    VP (Pres Subj Pl P1) => qu_ + "eramos" ;
    VP (Pres Subj Pl P2) => qu_ + "eráis" ;
    VP (Pres Subj Pl P3) => qu_ + "ieran" ;
    VP (Past Ind Sg P1) => qu_ + "ería" ;
    VP (Past Ind Sg P2) => qu_ + "erías" ;
    VP (Past Ind Sg P3) => qu_ + "ería" ;
    VP (Past Ind Pl P1) => qu_ + "eríamos" ;
    VP (Past Ind Pl P2) => qu_ + "eríais" ;
    VP (Past Ind Pl P3) => qu_ + "erían" ;
    VP (Past Subj Sg P1) => variants {qu_ + "isiera" ; qu_ + "isiese"} ;
    VP (Past Subj Sg P2) => variants {qu_ + "isieras" ; qu_ + "isieses"} ;
    VP (Past Subj Sg P3) => variants {qu_ + "isiera" ; qu_ + "isiese"} ;
    VP (Past Subj Pl P1) => variants {qu_ + "isiéramos" ; qu_ + "isiésemos"} ;
    VP (Past Subj Pl P2) => variants {qu_ + "isierais" ; qu_ + "isieseis"} ;
    VP (Past Subj Pl P3) => variants {qu_ + "isieran" ; qu_ + "isiesen"} ;
    VP (Pret Sg P1) => qu_ + "ise" ;
    VP (Pret Sg P2) => qu_ + "isiste" ;
    VP (Pret Sg P3) => qu_ + "iso" ;
    VP (Pret Pl P1) => qu_ + "isimos" ;
    VP (Pret Pl P2) => qu_ + "isisteis" ;
    VP (Pret Pl P3) => qu_ + "isieron" ;
    VP (Fut Ind Sg P1) => qu_ + "erré" ;
    VP (Fut Ind Sg P2) => qu_ + "errás" ;
    VP (Fut Ind Sg P3) => qu_ + "errá" ;
    VP (Fut Ind Pl P1) => qu_ + "erremos" ;
    VP (Fut Ind Pl P2) => qu_ + "erréis" ;
    VP (Fut Ind Pl P3) => qu_ + "errán" ;
    VP (Fut Subj Sg P1) => qu_ + "isiere" ;
    VP (Fut Subj Sg P2) => qu_ + "isieres" ;
    VP (Fut Subj Sg P3) => qu_ + "isiere" ;
    VP (Fut Subj Pl P1) => qu_ + "isiéremos" ;
    VP (Fut Subj Pl P2) => qu_ + "isiereis" ;
    VP (Fut Subj Pl P3) => qu_ + "isieren" ;
    VP (Cond Sg P1) => qu_ + "erría" ;
    VP (Cond Sg P2) => qu_ + "errías" ;
    VP (Cond Sg P3) => qu_ + "erría" ;
    VP (Cond Pl P1) => qu_ + "erríamos" ;
    VP (Cond Pl P2) => qu_ + "erríais" ;
    VP (Cond Pl P3) => qu_ + "errían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => qu_ + "iere" ;
    VP (Imp Sg P3) => qu_ + "iera" ;
    VP (Imp Pl P1) => qu_ + "eramos" ;
    VP (Imp Pl P2) => qu_ + "ered" ;
    VP (Imp Pl P3) => qu_ + "ieran" ;
    VP (Pass Sg Masc) => qu_ + "erido" ;
    VP (Pass Sg Fem) => qu_ + "erida" ;
    VP (Pass Pl Masc) => qu_ + "eridos" ;
    VP (Pass Pl Fem) => qu_ + "eridas"
    }
  } ;
oper raer_65 : Str -> Verbum = \raer ->
  let ra_ = Predef.tk 2 raer in
 {s = table {
    VI Infn => ra_ + "er" ;
    VI Ger => ra_ + "yendo" ;
    VI Part => ra_ + "ído" ;
    VP (Pres Ind Sg P1) => variants {ra_ + "o" ; ra_ + "igo"} ;
    VP (Pres Ind Sg P2) => ra_ + "es" ;
    VP (Pres Ind Sg P3) => ra_ + "e" ;
    VP (Pres Ind Pl P1) => ra_ + "emos" ;
    VP (Pres Ind Pl P2) => ra_ + "éis" ;
    VP (Pres Ind Pl P3) => ra_ + "en" ;
    VP (Pres Subj Sg P1) => ra_ + "iga" ;
    VP (Pres Subj Sg P2) => ra_ + "igas" ;
    VP (Pres Subj Sg P3) => ra_ + "iga" ;
    VP (Pres Subj Pl P1) => ra_ + "igamos" ;
    VP (Pres Subj Pl P2) => ra_ + "igáis" ;
    VP (Pres Subj Pl P3) => ra_ + "igan" ;
    VP (Past Ind Sg P1) => ra_ + "ía" ;
    VP (Past Ind Sg P2) => ra_ + "ías" ;
    VP (Past Ind Sg P3) => ra_ + "ía" ;
    VP (Past Ind Pl P1) => ra_ + "íamos" ;
    VP (Past Ind Pl P2) => ra_ + "íais" ;
    VP (Past Ind Pl P3) => ra_ + "ían" ;
    VP (Past Subj Sg P1) => variants {ra_ + "yera" ; ra_ + "yese"} ;
    VP (Past Subj Sg P2) => variants {ra_ + "yeras" ; ra_ + "yeses"} ;
    VP (Past Subj Sg P3) => variants {ra_ + "yera" ; ra_ + "yese"} ;
    VP (Past Subj Pl P1) => variants {ra_ + "yéramos" ; ra_ + "yésemos"} ;
    VP (Past Subj Pl P2) => variants {ra_ + "yerais" ; ra_ + "yeseis"} ;
    VP (Past Subj Pl P3) => variants {ra_ + "yeran" ; ra_ + "yesen"} ;
    VP (Pret Sg P1) => ra_ + "í" ;
    VP (Pret Sg P2) => ra_ + "íste" ;
    VP (Pret Sg P3) => ra_ + "yó" ;
    VP (Pret Pl P1) => ra_ + "ímos" ;
    VP (Pret Pl P2) => ra_ + "ísteis" ;
    VP (Pret Pl P3) => ra_ + "yeron" ;
    VP (Fut Ind Sg P1) => ra_ + "eré" ;
    VP (Fut Ind Sg P2) => ra_ + "erás" ;
    VP (Fut Ind Sg P3) => ra_ + "erá" ;
    VP (Fut Ind Pl P1) => ra_ + "eremos" ;
    VP (Fut Ind Pl P2) => ra_ + "eréis" ;
    VP (Fut Ind Pl P3) => ra_ + "erán" ;
    VP (Fut Subj Sg P1) => ra_ + "yere" ;
    VP (Fut Subj Sg P2) => ra_ + "yeres" ;
    VP (Fut Subj Sg P3) => ra_ + "yere" ;
    VP (Fut Subj Pl P1) => ra_ + "yéremos" ;
    VP (Fut Subj Pl P2) => ra_ + "yereis" ;
    VP (Fut Subj Pl P3) => ra_ + "yeren" ;
    VP (Cond Sg P1) => ra_ + "ería" ;
    VP (Cond Sg P2) => ra_ + "erías" ;
    VP (Cond Sg P3) => ra_ + "ería" ;
    VP (Cond Pl P1) => ra_ + "eríamos" ;
    VP (Cond Pl P2) => ra_ + "eríais" ;
    VP (Cond Pl P3) => ra_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ra_ + "e" ;
    VP (Imp Sg P3) => ra_ + "iga" ;
    VP (Imp Pl P1) => ra_ + "igamos" ;
    VP (Imp Pl P2) => ra_ + "ed" ;
    VP (Imp Pl P3) => ra_ + "igan" ;
    VP (Pass Sg Masc) => ra_ + "ído" ;
    VP (Pass Sg Fem) => ra_ + "ída" ;
    VP (Pass Pl Masc) => ra_ + "ídos" ;
    VP (Pass Pl Fem) => ra_ + "ídas"
    }
  } ;
oper regar_66 : Str -> Verbum = \regar ->
  let r_ = Predef.tk 4 regar in
 {s = table {
    VI Infn => r_ + "egar" ;
    VI Ger => r_ + "egando" ;
    VI Part => r_ + "egado" ;
    VP (Pres Ind Sg P1) => r_ + "iego" ;
    VP (Pres Ind Sg P2) => r_ + "iegas" ;
    VP (Pres Ind Sg P3) => r_ + "iega" ;
    VP (Pres Ind Pl P1) => r_ + "egamos" ;
    VP (Pres Ind Pl P2) => r_ + "egáis" ;
    VP (Pres Ind Pl P3) => r_ + "iegan" ;
    VP (Pres Subj Sg P1) => r_ + "iegue" ;
    VP (Pres Subj Sg P2) => r_ + "iegues" ;
    VP (Pres Subj Sg P3) => r_ + "iegue" ;
    VP (Pres Subj Pl P1) => r_ + "eguemos" ;
    VP (Pres Subj Pl P2) => r_ + "eguéis" ;
    VP (Pres Subj Pl P3) => r_ + "ieguen" ;
    VP (Past Ind Sg P1) => r_ + "egaba" ;
    VP (Past Ind Sg P2) => r_ + "egabas" ;
    VP (Past Ind Sg P3) => r_ + "egaba" ;
    VP (Past Ind Pl P1) => r_ + "egábamos" ;
    VP (Past Ind Pl P2) => r_ + "egabais" ;
    VP (Past Ind Pl P3) => r_ + "egaban" ;
    VP (Past Subj Sg P1) => variants {r_ + "egara" ; r_ + "egase"} ;
    VP (Past Subj Sg P2) => variants {r_ + "egaras" ; r_ + "egases"} ;
    VP (Past Subj Sg P3) => variants {r_ + "egara" ; r_ + "egase"} ;
    VP (Past Subj Pl P1) => variants {r_ + "egáramos" ; r_ + "egásemos"} ;
    VP (Past Subj Pl P2) => variants {r_ + "egarais" ; r_ + "egaseis"} ;
    VP (Past Subj Pl P3) => variants {r_ + "egaran" ; r_ + "egasen"} ;
    VP (Pret Sg P1) => r_ + "egué" ;
    VP (Pret Sg P2) => r_ + "egaste" ;
    VP (Pret Sg P3) => r_ + "egó" ;
    VP (Pret Pl P1) => r_ + "egamos" ;
    VP (Pret Pl P2) => r_ + "egasteis" ;
    VP (Pret Pl P3) => r_ + "egaron" ;
    VP (Fut Ind Sg P1) => r_ + "egaré" ;
    VP (Fut Ind Sg P2) => r_ + "egarás" ;
    VP (Fut Ind Sg P3) => r_ + "egará" ;
    VP (Fut Ind Pl P1) => r_ + "egaremos" ;
    VP (Fut Ind Pl P2) => r_ + "egaréis" ;
    VP (Fut Ind Pl P3) => r_ + "egarán" ;
    VP (Fut Subj Sg P1) => r_ + "egare" ;
    VP (Fut Subj Sg P2) => r_ + "egares" ;
    VP (Fut Subj Sg P3) => r_ + "egare" ;
    VP (Fut Subj Pl P1) => r_ + "egáremos" ;
    VP (Fut Subj Pl P2) => r_ + "egareis" ;
    VP (Fut Subj Pl P3) => r_ + "egaren" ;
    VP (Cond Sg P1) => r_ + "egaría" ;
    VP (Cond Sg P2) => r_ + "egarías" ;
    VP (Cond Sg P3) => r_ + "egaría" ;
    VP (Cond Pl P1) => r_ + "egaríamos" ;
    VP (Cond Pl P2) => r_ + "egaríais" ;
    VP (Cond Pl P3) => r_ + "egarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => r_ + "iega" ;
    VP (Imp Sg P3) => r_ + "iegue" ;
    VP (Imp Pl P1) => r_ + "eguemos" ;
    VP (Imp Pl P2) => r_ + "egad" ;
    VP (Imp Pl P3) => r_ + "ieguen" ;
    VP (Pass Sg Masc) => r_ + "egado" ;
    VP (Pass Sg Fem) => r_ + "egada" ;
    VP (Pass Pl Masc) => r_ + "egados" ;
    VP (Pass Pl Fem) => r_ + "egadas"
    }
  } ;
oper reñir_68 : Str -> Verbum = \reñir ->
  let r_ = Predef.tk 4 reñir in
 {s = table {
    VI Infn => r_ + "eñir" ;
    VI Ger => r_ + "iñiendo" ;
    VI Part => r_ + "eñido" ;
    VP (Pres Ind Sg P1) => r_ + "iño" ;
    VP (Pres Ind Sg P2) => r_ + "iñes" ;
    VP (Pres Ind Sg P3) => r_ + "iñe" ;
    VP (Pres Ind Pl P1) => r_ + "eñimos" ;
    VP (Pres Ind Pl P2) => r_ + "eñís" ;
    VP (Pres Ind Pl P3) => r_ + "iñen" ;
    VP (Pres Subj Sg P1) => r_ + "iña" ;
    VP (Pres Subj Sg P2) => r_ + "iñas" ;
    VP (Pres Subj Sg P3) => r_ + "iña" ;
    VP (Pres Subj Pl P1) => r_ + "iñamos" ;
    VP (Pres Subj Pl P2) => r_ + "iñáis" ;
    VP (Pres Subj Pl P3) => r_ + "iñan" ;
    VP (Past Ind Sg P1) => r_ + "eñía" ;
    VP (Past Ind Sg P2) => r_ + "eñías" ;
    VP (Past Ind Sg P3) => r_ + "eñía" ;
    VP (Past Ind Pl P1) => r_ + "eñíamos" ;
    VP (Past Ind Pl P2) => r_ + "eñíais" ;
    VP (Past Ind Pl P3) => r_ + "eñían" ;
    VP (Past Subj Sg P1) => variants {r_ + "iñera" ; r_ + "iñese"} ;
    VP (Past Subj Sg P2) => variants {r_ + "iñeras" ; r_ + "iñeses"} ;
    VP (Past Subj Sg P3) => variants {r_ + "iñera" ; r_ + "iñese"} ;
    VP (Past Subj Pl P1) => variants {r_ + "iñéramos" ; r_ + "iñésemos"} ;
    VP (Past Subj Pl P2) => variants {r_ + "iñerais" ; r_ + "iñeseis"} ;
    VP (Past Subj Pl P3) => variants {r_ + "iñeran" ; r_ + "iñesen"} ;
    VP (Pret Sg P1) => r_ + "eñí" ;
    VP (Pret Sg P2) => r_ + "eñiste" ;
    VP (Pret Sg P3) => r_ + "iñó" ;
    VP (Pret Pl P1) => r_ + "eñimos" ;
    VP (Pret Pl P2) => r_ + "eñisteis" ;
    VP (Pret Pl P3) => r_ + "iñeron" ;
    VP (Fut Ind Sg P1) => r_ + "eñiré" ;
    VP (Fut Ind Sg P2) => r_ + "eñirás" ;
    VP (Fut Ind Sg P3) => r_ + "eñirá" ;
    VP (Fut Ind Pl P1) => r_ + "eñiremos" ;
    VP (Fut Ind Pl P2) => r_ + "eñiréis" ;
    VP (Fut Ind Pl P3) => r_ + "eñirán" ;
    VP (Fut Subj Sg P1) => r_ + "iñere" ;
    VP (Fut Subj Sg P2) => r_ + "iñeres" ;
    VP (Fut Subj Sg P3) => r_ + "iñere" ;
    VP (Fut Subj Pl P1) => r_ + "iñéremos" ;
    VP (Fut Subj Pl P2) => r_ + "iñereis" ;
    VP (Fut Subj Pl P3) => r_ + "iñeren" ;
    VP (Cond Sg P1) => r_ + "eñiría" ;
    VP (Cond Sg P2) => r_ + "eñirías" ;
    VP (Cond Sg P3) => r_ + "eñiría" ;
    VP (Cond Pl P1) => r_ + "eñiríamos" ;
    VP (Cond Pl P2) => r_ + "eñiríais" ;
    VP (Cond Pl P3) => r_ + "eñirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => r_ + "iñe" ;
    VP (Imp Sg P3) => r_ + "iña" ;
    VP (Imp Pl P1) => r_ + "iñamos" ;
    VP (Imp Pl P2) => r_ + "eñid" ;
    VP (Imp Pl P3) => r_ + "iñan" ;
    VP (Pass Sg Masc) => r_ + "eñido" ;
    VP (Pass Sg Fem) => r_ + "eñida" ;
    VP (Pass Pl Masc) => r_ + "eñidos" ;
    VP (Pass Pl Fem) => r_ + "eñidas"
    }
  } ;
oper reunir_69 : Str -> Verbum = \reunir ->
  let re_ = Predef.tk 4 reunir in
 {s = table {
    VI Infn => re_ + "unir" ;
    VI Ger => re_ + "uniendo" ;
    VI Part => re_ + "unido" ;
    VP (Pres Ind Sg P1) => re_ + "úno" ;
    VP (Pres Ind Sg P2) => re_ + "únes" ;
    VP (Pres Ind Sg P3) => re_ + "úne" ;
    VP (Pres Ind Pl P1) => re_ + "unimos" ;
    VP (Pres Ind Pl P2) => re_ + "unís" ;
    VP (Pres Ind Pl P3) => re_ + "únen" ;
    VP (Pres Subj Sg P1) => re_ + "úna" ;
    VP (Pres Subj Sg P2) => re_ + "únas" ;
    VP (Pres Subj Sg P3) => re_ + "úna" ;
    VP (Pres Subj Pl P1) => re_ + "unamos" ;
    VP (Pres Subj Pl P2) => re_ + "unáis" ;
    VP (Pres Subj Pl P3) => re_ + "únan" ;
    VP (Past Ind Sg P1) => re_ + "unía" ;
    VP (Past Ind Sg P2) => re_ + "unías" ;
    VP (Past Ind Sg P3) => re_ + "unía" ;
    VP (Past Ind Pl P1) => re_ + "uníamos" ;
    VP (Past Ind Pl P2) => re_ + "uníais" ;
    VP (Past Ind Pl P3) => re_ + "unían" ;
    VP (Past Subj Sg P1) => variants {re_ + "uniera" ; re_ + "uniese"} ;
    VP (Past Subj Sg P2) => variants {re_ + "unieras" ; re_ + "unieses"} ;
    VP (Past Subj Sg P3) => variants {re_ + "uniera" ; re_ + "uniese"} ;
    VP (Past Subj Pl P1) => variants {re_ + "uniéramos" ; re_ + "uniésemos"} ;
    VP (Past Subj Pl P2) => variants {re_ + "unierais" ; re_ + "unieseis"} ;
    VP (Past Subj Pl P3) => variants {re_ + "unieran" ; re_ + "uniesen"} ;
    VP (Pret Sg P1) => re_ + "uní" ;
    VP (Pret Sg P2) => re_ + "uniste" ;
    VP (Pret Sg P3) => re_ + "unió" ;
    VP (Pret Pl P1) => re_ + "unimos" ;
    VP (Pret Pl P2) => re_ + "unisteis" ;
    VP (Pret Pl P3) => re_ + "unieron" ;
    VP (Fut Ind Sg P1) => re_ + "uniré" ;
    VP (Fut Ind Sg P2) => re_ + "unirás" ;
    VP (Fut Ind Sg P3) => re_ + "unirá" ;
    VP (Fut Ind Pl P1) => re_ + "uniremos" ;
    VP (Fut Ind Pl P2) => re_ + "uniréis" ;
    VP (Fut Ind Pl P3) => re_ + "unirán" ;
    VP (Fut Subj Sg P1) => re_ + "uniere" ;
    VP (Fut Subj Sg P2) => re_ + "unieres" ;
    VP (Fut Subj Sg P3) => re_ + "uniere" ;
    VP (Fut Subj Pl P1) => re_ + "uniéremos" ;
    VP (Fut Subj Pl P2) => re_ + "uniereis" ;
    VP (Fut Subj Pl P3) => re_ + "unieren" ;
    VP (Cond Sg P1) => re_ + "uniría" ;
    VP (Cond Sg P2) => re_ + "unirías" ;
    VP (Cond Sg P3) => re_ + "uniría" ;
    VP (Cond Pl P1) => re_ + "uniríamos" ;
    VP (Cond Pl P2) => re_ + "uniríais" ;
    VP (Cond Pl P3) => re_ + "unirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => re_ + "úne" ;
    VP (Imp Sg P3) => re_ + "úna" ;
    VP (Imp Pl P1) => re_ + "unamos" ;
    VP (Imp Pl P2) => re_ + "unid" ;
    VP (Imp Pl P3) => re_ + "únan" ;
    VP (Pass Sg Masc) => re_ + "unido" ;
    VP (Pass Sg Fem) => re_ + "unida" ;
    VP (Pass Pl Masc) => re_ + "unidos" ;
    VP (Pass Pl Fem) => re_ + "unidas"
    }
  } ;
oper roer_70 : Str -> Verbum = \roer ->
  let ro_ = Predef.tk 2 roer in
 {s = table {
    VI Infn => ro_ + "er" ;
    VI Ger => ro_ + "yendo" ;
    VI Part => ro_ + "ído" ;
    VP (Pres Ind Sg P1) => variants {ro_ + "o" ; ro_ + "igo"} ;
    VP (Pres Ind Sg P2) => ro_ + "es" ;
    VP (Pres Ind Sg P3) => ro_ + "e" ;
    VP (Pres Ind Pl P1) => ro_ + "emos" ;
    VP (Pres Ind Pl P2) => ro_ + "éis" ;
    VP (Pres Ind Pl P3) => ro_ + "en" ;
    VP (Pres Subj Sg P1) => ro_ + "a" ;
    VP (Pres Subj Sg P2) => ro_ + "as" ;
    VP (Pres Subj Sg P3) => ro_ + "a" ;
    VP (Pres Subj Pl P1) => ro_ + "amos" ;
    VP (Pres Subj Pl P2) => ro_ + "áis" ;
    VP (Pres Subj Pl P3) => ro_ + "an" ;
    VP (Past Ind Sg P1) => ro_ + "ía" ;
    VP (Past Ind Sg P2) => ro_ + "ías" ;
    VP (Past Ind Sg P3) => ro_ + "ía" ;
    VP (Past Ind Pl P1) => ro_ + "íamos" ;
    VP (Past Ind Pl P2) => ro_ + "íais" ;
    VP (Past Ind Pl P3) => ro_ + "ían" ;
    VP (Past Subj Sg P1) => variants {ro_ + "yera" ; ro_ + "yese"} ;
    VP (Past Subj Sg P2) => variants {ro_ + "yeras" ; ro_ + "yeses"} ;
    VP (Past Subj Sg P3) => variants {ro_ + "yera" ; ro_ + "yese"} ;
    VP (Past Subj Pl P1) => variants {ro_ + "yéramos" ; ro_ + "yésemos"} ;
    VP (Past Subj Pl P2) => variants {ro_ + "yerais" ; ro_ + "yeseis"} ;
    VP (Past Subj Pl P3) => variants {ro_ + "yeran" ; ro_ + "yesen"} ;
    VP (Pret Sg P1) => ro_ + "í" ;
    VP (Pret Sg P2) => ro_ + "íste" ;
    VP (Pret Sg P3) => ro_ + "yó" ;
    VP (Pret Pl P1) => ro_ + "ímos" ;
    VP (Pret Pl P2) => ro_ + "ísteis" ;
    VP (Pret Pl P3) => ro_ + "yeron" ;
    VP (Fut Ind Sg P1) => ro_ + "eré" ;
    VP (Fut Ind Sg P2) => ro_ + "erás" ;
    VP (Fut Ind Sg P3) => ro_ + "erá" ;
    VP (Fut Ind Pl P1) => ro_ + "eremos" ;
    VP (Fut Ind Pl P2) => ro_ + "eréis" ;
    VP (Fut Ind Pl P3) => ro_ + "erán" ;
    VP (Fut Subj Sg P1) => ro_ + "yere" ;
    VP (Fut Subj Sg P2) => ro_ + "yeres" ;
    VP (Fut Subj Sg P3) => ro_ + "yere" ;
    VP (Fut Subj Pl P1) => ro_ + "yéremos" ;
    VP (Fut Subj Pl P2) => ro_ + "yereis" ;
    VP (Fut Subj Pl P3) => ro_ + "yeren" ;
    VP (Cond Sg P1) => ro_ + "ería" ;
    VP (Cond Sg P2) => ro_ + "erías" ;
    VP (Cond Sg P3) => ro_ + "ería" ;
    VP (Cond Pl P1) => ro_ + "eríamos" ;
    VP (Cond Pl P2) => ro_ + "eríais" ;
    VP (Cond Pl P3) => ro_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ro_ + "e" ;
    VP (Imp Sg P3) => ro_ + "a" ;
    VP (Imp Pl P1) => ro_ + "amos" ;
    VP (Imp Pl P2) => ro_ + "ed" ;
    VP (Imp Pl P3) => ro_ + "an" ;
    VP (Pass Sg Masc) => ro_ + "ído" ;
    VP (Pass Sg Fem) => ro_ + "ída" ;
    VP (Pass Pl Masc) => ro_ + "ídos" ;
    VP (Pass Pl Fem) => ro_ + "ídas"
    }
  } ;
oper saber_71 : Str -> Verbum = \saber ->
  let s_ = Predef.tk 4 saber in
 {s = table {
    VI Infn => s_ + "aber" ;
    VI Ger => s_ + "abiendo" ;
    VI Part => s_ + "abido" ;
    VP (Pres Ind Sg P1) => s_ + "é" ;
    VP (Pres Ind Sg P2) => s_ + "abes" ;
    VP (Pres Ind Sg P3) => s_ + "abe" ;
    VP (Pres Ind Pl P1) => s_ + "abemos" ;
    VP (Pres Ind Pl P2) => s_ + "abéis" ;
    VP (Pres Ind Pl P3) => s_ + "aben" ;
    VP (Pres Subj Sg P1) => s_ + "epa" ;
    VP (Pres Subj Sg P2) => s_ + "epas" ;
    VP (Pres Subj Sg P3) => s_ + "epa" ;
    VP (Pres Subj Pl P1) => s_ + "epamos" ;
    VP (Pres Subj Pl P2) => s_ + "epáis" ;
    VP (Pres Subj Pl P3) => s_ + "epan" ;
    VP (Past Ind Sg P1) => s_ + "abía" ;
    VP (Past Ind Sg P2) => s_ + "abías" ;
    VP (Past Ind Sg P3) => s_ + "abía" ;
    VP (Past Ind Pl P1) => s_ + "abíamos" ;
    VP (Past Ind Pl P2) => s_ + "abíais" ;
    VP (Past Ind Pl P3) => s_ + "abían" ;
    VP (Past Subj Sg P1) => variants {s_ + "upiera" ; s_ + "upiese"} ;
    VP (Past Subj Sg P2) => variants {s_ + "upieras" ; s_ + "upieses"} ;
    VP (Past Subj Sg P3) => variants {s_ + "upiera" ; s_ + "upiese"} ;
    VP (Past Subj Pl P1) => variants {s_ + "upiéramos" ; s_ + "upiésemos"} ;
    VP (Past Subj Pl P2) => variants {s_ + "upierais" ; s_ + "upieseis"} ;
    VP (Past Subj Pl P3) => variants {s_ + "upieran" ; s_ + "upiesen"} ;
    VP (Pret Sg P1) => s_ + "upe" ;
    VP (Pret Sg P2) => s_ + "upiste" ;
    VP (Pret Sg P3) => s_ + "upo" ;
    VP (Pret Pl P1) => s_ + "upimos" ;
    VP (Pret Pl P2) => s_ + "upisteis" ;
    VP (Pret Pl P3) => s_ + "upieron" ;
    VP (Fut Ind Sg P1) => s_ + "abré" ;
    VP (Fut Ind Sg P2) => s_ + "abrás" ;
    VP (Fut Ind Sg P3) => s_ + "abrá" ;
    VP (Fut Ind Pl P1) => s_ + "abremos" ;
    VP (Fut Ind Pl P2) => s_ + "abréis" ;
    VP (Fut Ind Pl P3) => s_ + "abrán" ;
    VP (Fut Subj Sg P1) => s_ + "upiere" ;
    VP (Fut Subj Sg P2) => s_ + "upieres" ;
    VP (Fut Subj Sg P3) => s_ + "upiere" ;
    VP (Fut Subj Pl P1) => s_ + "upiéremos" ;
    VP (Fut Subj Pl P2) => s_ + "upiereis" ;
    VP (Fut Subj Pl P3) => s_ + "upieren" ;
    VP (Cond Sg P1) => s_ + "abría" ;
    VP (Cond Sg P2) => s_ + "abrías" ;
    VP (Cond Sg P3) => s_ + "abría" ;
    VP (Cond Pl P1) => s_ + "abríamos" ;
    VP (Cond Pl P2) => s_ + "abríais" ;
    VP (Cond Pl P3) => s_ + "abrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => s_ + "abe" ;
    VP (Imp Sg P3) => s_ + "epa" ;
    VP (Imp Pl P1) => s_ + "epamos" ;
    VP (Imp Pl P2) => s_ + "abed" ;
    VP (Imp Pl P3) => s_ + "epan" ;
    VP (Pass Sg Masc) => s_ + "abido" ;
    VP (Pass Sg Fem) => s_ + "abida" ;
    VP (Pass Pl Masc) => s_ + "abidos" ;
    VP (Pass Pl Fem) => s_ + "abidas"
    }
  } ;
oper sacar_72 : Str -> Verbum = \sacar ->
  let sa_ = Predef.tk 3 sacar in
 {s = table {
    VI Infn => sa_ + "car" ;
    VI Ger => sa_ + "cando" ;
    VI Part => sa_ + "cado" ;
    VP (Pres Ind Sg P1) => sa_ + "co" ;
    VP (Pres Ind Sg P2) => sa_ + "cas" ;
    VP (Pres Ind Sg P3) => sa_ + "ca" ;
    VP (Pres Ind Pl P1) => sa_ + "camos" ;
    VP (Pres Ind Pl P2) => sa_ + "cáis" ;
    VP (Pres Ind Pl P3) => sa_ + "can" ;
    VP (Pres Subj Sg P1) => sa_ + "que" ;
    VP (Pres Subj Sg P2) => sa_ + "ques" ;
    VP (Pres Subj Sg P3) => sa_ + "que" ;
    VP (Pres Subj Pl P1) => sa_ + "quemos" ;
    VP (Pres Subj Pl P2) => sa_ + "quéis" ;
    VP (Pres Subj Pl P3) => sa_ + "quen" ;
    VP (Past Ind Sg P1) => sa_ + "caba" ;
    VP (Past Ind Sg P2) => sa_ + "cabas" ;
    VP (Past Ind Sg P3) => sa_ + "caba" ;
    VP (Past Ind Pl P1) => sa_ + "cábamos" ;
    VP (Past Ind Pl P2) => sa_ + "cabais" ;
    VP (Past Ind Pl P3) => sa_ + "caban" ;
    VP (Past Subj Sg P1) => variants {sa_ + "cara" ; sa_ + "case"} ;
    VP (Past Subj Sg P2) => variants {sa_ + "caras" ; sa_ + "cases"} ;
    VP (Past Subj Sg P3) => variants {sa_ + "cara" ; sa_ + "case"} ;
    VP (Past Subj Pl P1) => variants {sa_ + "cáramos" ; sa_ + "cásemos"} ;
    VP (Past Subj Pl P2) => variants {sa_ + "carais" ; sa_ + "caseis"} ;
    VP (Past Subj Pl P3) => variants {sa_ + "caran" ; sa_ + "casen"} ;
    VP (Pret Sg P1) => sa_ + "qué" ;
    VP (Pret Sg P2) => sa_ + "caste" ;
    VP (Pret Sg P3) => sa_ + "có" ;
    VP (Pret Pl P1) => sa_ + "camos" ;
    VP (Pret Pl P2) => sa_ + "casteis" ;
    VP (Pret Pl P3) => sa_ + "caron" ;
    VP (Fut Ind Sg P1) => sa_ + "caré" ;
    VP (Fut Ind Sg P2) => sa_ + "carás" ;
    VP (Fut Ind Sg P3) => sa_ + "cará" ;
    VP (Fut Ind Pl P1) => sa_ + "caremos" ;
    VP (Fut Ind Pl P2) => sa_ + "caréis" ;
    VP (Fut Ind Pl P3) => sa_ + "carán" ;
    VP (Fut Subj Sg P1) => sa_ + "care" ;
    VP (Fut Subj Sg P2) => sa_ + "cares" ;
    VP (Fut Subj Sg P3) => sa_ + "care" ;
    VP (Fut Subj Pl P1) => sa_ + "cáremos" ;
    VP (Fut Subj Pl P2) => sa_ + "careis" ;
    VP (Fut Subj Pl P3) => sa_ + "caren" ;
    VP (Cond Sg P1) => sa_ + "caría" ;
    VP (Cond Sg P2) => sa_ + "carías" ;
    VP (Cond Sg P3) => sa_ + "caría" ;
    VP (Cond Pl P1) => sa_ + "caríamos" ;
    VP (Cond Pl P2) => sa_ + "caríais" ;
    VP (Cond Pl P3) => sa_ + "carían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => sa_ + "ca" ;
    VP (Imp Sg P3) => sa_ + "que" ;
    VP (Imp Pl P1) => sa_ + "quemos" ;
    VP (Imp Pl P2) => sa_ + "cad" ;
    VP (Imp Pl P3) => sa_ + "quen" ;
    VP (Pass Sg Masc) => sa_ + "cado" ;
    VP (Pass Sg Fem) => sa_ + "cada" ;
    VP (Pass Pl Masc) => sa_ + "cados" ;
    VP (Pass Pl Fem) => sa_ + "cadas"
    }
  } ;
oper salir_73 : Str -> Verbum = \salir ->
  let sal_ = Predef.tk 2 salir in
 {s = table {
    VI Infn => sal_ + "ir" ;
    VI Ger => sal_ + "iendo" ;
    VI Part => sal_ + "ido" ;
    VP (Pres Ind Sg P1) => sal_ + "go" ;
    VP (Pres Ind Sg P2) => sal_ + "es" ;
    VP (Pres Ind Sg P3) => sal_ + "e" ;
    VP (Pres Ind Pl P1) => sal_ + "imos" ;
    VP (Pres Ind Pl P2) => sal_ + "ís" ;
    VP (Pres Ind Pl P3) => sal_ + "en" ;
    VP (Pres Subj Sg P1) => sal_ + "ga" ;
    VP (Pres Subj Sg P2) => sal_ + "gas" ;
    VP (Pres Subj Sg P3) => sal_ + "ga" ;
    VP (Pres Subj Pl P1) => sal_ + "gamos" ;
    VP (Pres Subj Pl P2) => sal_ + "gáis" ;
    VP (Pres Subj Pl P3) => sal_ + "gan" ;
    VP (Past Ind Sg P1) => sal_ + "ía" ;
    VP (Past Ind Sg P2) => sal_ + "ías" ;
    VP (Past Ind Sg P3) => sal_ + "ía" ;
    VP (Past Ind Pl P1) => sal_ + "íamos" ;
    VP (Past Ind Pl P2) => sal_ + "íais" ;
    VP (Past Ind Pl P3) => sal_ + "ían" ;
    VP (Past Subj Sg P1) => variants {sal_ + "iera" ; sal_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {sal_ + "ieras" ; sal_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {sal_ + "iera" ; sal_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {sal_ + "iéramos" ; sal_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {sal_ + "ierais" ; sal_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {sal_ + "ieran" ; sal_ + "iesen"} ;
    VP (Pret Sg P1) => sal_ + "í" ;
    VP (Pret Sg P2) => sal_ + "iste" ;
    VP (Pret Sg P3) => sal_ + "ió" ;
    VP (Pret Pl P1) => sal_ + "imos" ;
    VP (Pret Pl P2) => sal_ + "isteis" ;
    VP (Pret Pl P3) => sal_ + "ieron" ;
    VP (Fut Ind Sg P1) => sal_ + "dré" ;
    VP (Fut Ind Sg P2) => sal_ + "drás" ;
    VP (Fut Ind Sg P3) => sal_ + "drá" ;
    VP (Fut Ind Pl P1) => sal_ + "dremos" ;
    VP (Fut Ind Pl P2) => sal_ + "dréis" ;
    VP (Fut Ind Pl P3) => sal_ + "drán" ;
    VP (Fut Subj Sg P1) => sal_ + "iere" ;
    VP (Fut Subj Sg P2) => sal_ + "ieres" ;
    VP (Fut Subj Sg P3) => sal_ + "iere" ;
    VP (Fut Subj Pl P1) => sal_ + "iéremos" ;
    VP (Fut Subj Pl P2) => sal_ + "iereis" ;
    VP (Fut Subj Pl P3) => sal_ + "ieren" ;
    VP (Cond Sg P1) => sal_ + "dría" ;
    VP (Cond Sg P2) => sal_ + "drías" ;
    VP (Cond Sg P3) => sal_ + "dría" ;
    VP (Cond Pl P1) => sal_ + "dríamos" ;
    VP (Cond Pl P2) => sal_ + "dríais" ;
    VP (Cond Pl P3) => sal_ + "drían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => sal_ + "" ;
    VP (Imp Sg P3) => sal_ + "ga" ;
    VP (Imp Pl P1) => sal_ + "gamos" ;
    VP (Imp Pl P2) => sal_ + "id" ;
    VP (Imp Pl P3) => sal_ + "gan" ;
    VP (Pass Sg Masc) => sal_ + "ido" ;
    VP (Pass Sg Fem) => sal_ + "ida" ;
    VP (Pass Pl Masc) => sal_ + "idos" ;
    VP (Pass Pl Fem) => sal_ + "idas"
    }
  } ;
oper satisfacer_74 : Str -> Verbum = \satisfacer ->
  let satisf_ = Predef.tk 4 satisfacer in
 {s = table {
    VI Infn => satisf_ + "acer" ;
    VI Ger => satisf_ + "aciendo" ;
    VI Part => satisf_ + "echo" ;
    VP (Pres Ind Sg P1) => satisf_ + "ago" ;
    VP (Pres Ind Sg P2) => satisf_ + "aces" ;
    VP (Pres Ind Sg P3) => satisf_ + "ace" ;
    VP (Pres Ind Pl P1) => satisf_ + "acemos" ;
    VP (Pres Ind Pl P2) => satisf_ + "acéis" ;
    VP (Pres Ind Pl P3) => satisf_ + "acen" ;
    VP (Pres Subj Sg P1) => satisf_ + "aga" ;
    VP (Pres Subj Sg P2) => satisf_ + "agas" ;
    VP (Pres Subj Sg P3) => satisf_ + "aga" ;
    VP (Pres Subj Pl P1) => satisf_ + "agamos" ;
    VP (Pres Subj Pl P2) => satisf_ + "agáis" ;
    VP (Pres Subj Pl P3) => satisf_ + "agan" ;
    VP (Past Ind Sg P1) => satisf_ + "acía" ;
    VP (Past Ind Sg P2) => satisf_ + "acías" ;
    VP (Past Ind Sg P3) => satisf_ + "acía" ;
    VP (Past Ind Pl P1) => satisf_ + "acíamos" ;
    VP (Past Ind Pl P2) => satisf_ + "acíais" ;
    VP (Past Ind Pl P3) => satisf_ + "acían" ;
    VP (Past Subj Sg P1) => variants {satisf_ + "iciera" ; satisf_ + "iciese"} ;
    VP (Past Subj Sg P2) => variants {satisf_ + "icieras" ; satisf_ + "icieses"} ;
    VP (Past Subj Sg P3) => variants {satisf_ + "iciera" ; satisf_ + "iciese"} ;
    VP (Past Subj Pl P1) => variants {satisf_ + "iciéramos" ; satisf_ + "iciésemos"} ;
    VP (Past Subj Pl P2) => variants {satisf_ + "icierais" ; satisf_ + "icieseis"} ;
    VP (Past Subj Pl P3) => variants {satisf_ + "icieran" ; satisf_ + "iciesen"} ;
    VP (Pret Sg P1) => satisf_ + "ice" ;
    VP (Pret Sg P2) => satisf_ + "iciste" ;
    VP (Pret Sg P3) => satisf_ + "izo" ;
    VP (Pret Pl P1) => satisf_ + "icimos" ;
    VP (Pret Pl P2) => satisf_ + "icisteis" ;
    VP (Pret Pl P3) => satisf_ + "icieron" ;
    VP (Fut Ind Sg P1) => satisf_ + "aré" ;
    VP (Fut Ind Sg P2) => satisf_ + "arás" ;
    VP (Fut Ind Sg P3) => satisf_ + "ará" ;
    VP (Fut Ind Pl P1) => satisf_ + "aremos" ;
    VP (Fut Ind Pl P2) => satisf_ + "aréis" ;
    VP (Fut Ind Pl P3) => satisf_ + "arán" ;
    VP (Fut Subj Sg P1) => satisf_ + "iciere" ;
    VP (Fut Subj Sg P2) => satisf_ + "icieres" ;
    VP (Fut Subj Sg P3) => satisf_ + "iciere" ;
    VP (Fut Subj Pl P1) => satisf_ + "iciéremos" ;
    VP (Fut Subj Pl P2) => satisf_ + "iciereis" ;
    VP (Fut Subj Pl P3) => satisf_ + "icieren" ;
    VP (Cond Sg P1) => satisf_ + "aría" ;
    VP (Cond Sg P2) => satisf_ + "arías" ;
    VP (Cond Sg P3) => satisf_ + "aría" ;
    VP (Cond Pl P1) => satisf_ + "aríamos" ;
    VP (Cond Pl P2) => satisf_ + "aríais" ;
    VP (Cond Pl P3) => satisf_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => variants {satisf_ + "az" ; satisf_ + "ace"} ;
    VP (Imp Sg P3) => satisf_ + "aga" ;
    VP (Imp Pl P1) => satisf_ + "agamos" ;
    VP (Imp Pl P2) => satisf_ + "aced" ;
    VP (Imp Pl P3) => satisf_ + "agan" ;
    VP (Pass Sg Masc) => satisf_ + "echo" ;
    VP (Pass Sg Fem) => satisf_ + "echa" ;
    VP (Pass Pl Masc) => satisf_ + "echos" ;
    VP (Pass Pl Fem) => satisf_ + "echas"
    }
  } ;
oper sentir_76 : Str -> Verbum = \sentir ->
  let s_ = Predef.tk 5 sentir in
 {s = table {
    VI Infn => s_ + "entir" ;
    VI Ger => s_ + "intiendo" ;
    VI Part => s_ + "entido" ;
    VP (Pres Ind Sg P1) => s_ + "iento" ;
    VP (Pres Ind Sg P2) => s_ + "ientes" ;
    VP (Pres Ind Sg P3) => s_ + "iente" ;
    VP (Pres Ind Pl P1) => s_ + "entimos" ;
    VP (Pres Ind Pl P2) => s_ + "entís" ;
    VP (Pres Ind Pl P3) => s_ + "ienten" ;
    VP (Pres Subj Sg P1) => s_ + "ienta" ;
    VP (Pres Subj Sg P2) => s_ + "ientas" ;
    VP (Pres Subj Sg P3) => s_ + "ienta" ;
    VP (Pres Subj Pl P1) => s_ + "intamos" ;
    VP (Pres Subj Pl P2) => s_ + "intáis" ;
    VP (Pres Subj Pl P3) => s_ + "ientan" ;
    VP (Past Ind Sg P1) => s_ + "entía" ;
    VP (Past Ind Sg P2) => s_ + "entías" ;
    VP (Past Ind Sg P3) => s_ + "entía" ;
    VP (Past Ind Pl P1) => s_ + "entíamos" ;
    VP (Past Ind Pl P2) => s_ + "entíais" ;
    VP (Past Ind Pl P3) => s_ + "entían" ;
    VP (Past Subj Sg P1) => variants {s_ + "intiera" ; s_ + "intiese"} ;
    VP (Past Subj Sg P2) => variants {s_ + "intieras" ; s_ + "intieses"} ;
    VP (Past Subj Sg P3) => variants {s_ + "intiera" ; s_ + "intiese"} ;
    VP (Past Subj Pl P1) => variants {s_ + "intiéramos" ; s_ + "intiésemos"} ;
    VP (Past Subj Pl P2) => variants {s_ + "intierais" ; s_ + "intieseis"} ;
    VP (Past Subj Pl P3) => variants {s_ + "intieran" ; s_ + "intiesen"} ;
    VP (Pret Sg P1) => s_ + "entí" ;
    VP (Pret Sg P2) => s_ + "entiste" ;
    VP (Pret Sg P3) => s_ + "intió" ;
    VP (Pret Pl P1) => s_ + "entimos" ;
    VP (Pret Pl P2) => s_ + "entisteis" ;
    VP (Pret Pl P3) => s_ + "intieron" ;
    VP (Fut Ind Sg P1) => s_ + "entiré" ;
    VP (Fut Ind Sg P2) => s_ + "entirás" ;
    VP (Fut Ind Sg P3) => s_ + "entirá" ;
    VP (Fut Ind Pl P1) => s_ + "entiremos" ;
    VP (Fut Ind Pl P2) => s_ + "entiréis" ;
    VP (Fut Ind Pl P3) => s_ + "entirán" ;
    VP (Fut Subj Sg P1) => s_ + "intiere" ;
    VP (Fut Subj Sg P2) => s_ + "intieres" ;
    VP (Fut Subj Sg P3) => s_ + "intiere" ;
    VP (Fut Subj Pl P1) => s_ + "intiéremos" ;
    VP (Fut Subj Pl P2) => s_ + "intiereis" ;
    VP (Fut Subj Pl P3) => s_ + "intieren" ;
    VP (Cond Sg P1) => s_ + "entiría" ;
    VP (Cond Sg P2) => s_ + "entirías" ;
    VP (Cond Sg P3) => s_ + "entiría" ;
    VP (Cond Pl P1) => s_ + "entiríamos" ;
    VP (Cond Pl P2) => s_ + "entiríais" ;
    VP (Cond Pl P3) => s_ + "entirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => s_ + "iente" ;
    VP (Imp Sg P3) => s_ + "ienta" ;
    VP (Imp Pl P1) => s_ + "intamos" ;
    VP (Imp Pl P2) => s_ + "entid" ;
    VP (Imp Pl P3) => s_ + "ientan" ;
    VP (Pass Sg Masc) => s_ + "entido" ;
    VP (Pass Sg Fem) => s_ + "entida" ;
    VP (Pass Pl Masc) => s_ + "entidos" ;
    VP (Pass Pl Fem) => s_ + "entidas"
    }
  } ;
oper soler_77 : Str -> Verbum = \soler ->
  let s_ = Predef.tk 4 soler in
 {s = table {
    VI Infn => s_ + "oler" ;
    VI Ger => variants {} ;
    VI Part => variants {} ;
    VP (Pres Ind Sg P1) => s_ + "uelo" ;
    VP (Pres Ind Sg P2) => s_ + "ueles" ;
    VP (Pres Ind Sg P3) => s_ + "uele" ;
    VP (Pres Ind Pl P1) => s_ + "olemos" ;
    VP (Pres Ind Pl P2) => s_ + "oléis" ;
    VP (Pres Ind Pl P3) => s_ + "uelen" ;
    VP (Pres Subj Sg P1) => s_ + "uela" ;
    VP (Pres Subj Sg P2) => s_ + "uelas" ;
    VP (Pres Subj Sg P3) => s_ + "uela" ;
    VP (Pres Subj Pl P1) => s_ + "olamos" ;
    VP (Pres Subj Pl P2) => s_ + "oláis" ;
    VP (Pres Subj Pl P3) => s_ + "uelan" ;
    VP (Past Ind Sg P1) => s_ + "olía" ;
    VP (Past Ind Sg P2) => s_ + "olías" ;
    VP (Past Ind Sg P3) => s_ + "olía" ;
    VP (Past Ind Pl P1) => s_ + "olíamos" ;
    VP (Past Ind Pl P2) => s_ + "olíais" ;
    VP (Past Ind Pl P3) => s_ + "olían" ;
    VP (Past Subj Sg P1) => variants {s_ + "oliera" ; s_ + "oliese"} ;
    VP (Past Subj Sg P2) => variants {s_ + "olieras" ; s_ + "olieses"} ;
    VP (Past Subj Sg P3) => variants {s_ + "oliera" ; s_ + "oliese"} ;
    VP (Past Subj Pl P1) => variants {s_ + "oliéramos" ; s_ + "oliésemos"} ;
    VP (Past Subj Pl P2) => variants {s_ + "olierais" ; s_ + "olieseis"} ;
    VP (Past Subj Pl P3) => variants {s_ + "olieran" ; s_ + "oliesen"} ;
    VP (Pret Sg P1) => s_ + "olí" ;
    VP (Pret Sg P2) => s_ + "oliste" ;
    VP (Pret Sg P3) => s_ + "olió" ;
    VP (Pret Pl P1) => s_ + "olimos" ;
    VP (Pret Pl P2) => s_ + "olisteis" ;
    VP (Pret Pl P3) => s_ + "olieron" ;
    VP (Fut Ind Sg P1) => variants {} ;
    VP (Fut Ind Sg P2) => variants {} ;
    VP (Fut Ind Sg P3) => variants {} ;
    VP (Fut Ind Pl P1) => variants {} ;
    VP (Fut Ind Pl P2) => variants {} ;
    VP (Fut Ind Pl P3) => variants {} ;
    VP (Fut Subj Sg P1) => variants {} ;
    VP (Fut Subj Sg P2) => variants {} ;
    VP (Fut Subj Sg P3) => variants {} ;
    VP (Fut Subj Pl P1) => variants {} ;
    VP (Fut Subj Pl P2) => variants {} ;
    VP (Fut Subj Pl P3) => variants {} ;
    VP (Cond Sg P1) => variants {} ;
    VP (Cond Sg P2) => variants {} ;
    VP (Cond Sg P3) => variants {} ;
    VP (Cond Pl P1) => variants {} ;
    VP (Cond Pl P2) => variants {} ;
    VP (Cond Pl P3) => variants {} ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => variants {} ;
    VP (Imp Sg P3) => variants {} ;
    VP (Imp Pl P1) => variants {} ;
    VP (Imp Pl P2) => variants {} ;
    VP (Imp Pl P3) => variants {} ;
    VP (Pass Sg Masc) => variants {} ;
    VP (Pass Sg Fem) => variants {} ;
    VP (Pass Pl Masc) => variants {} ;
    VP (Pass Pl Fem) => variants {}
    }
  } ;
oper tañer_78 : Str -> Verbum = \tañer ->
  let tañ_ = Predef.tk 2 tañer in
 {s = table {
    VI Infn => tañ_ + "er" ;
    VI Ger => tañ_ + "endo" ;
    VI Part => tañ_ + "ido" ;
    VP (Pres Ind Sg P1) => tañ_ + "o" ;
    VP (Pres Ind Sg P2) => tañ_ + "es" ;
    VP (Pres Ind Sg P3) => tañ_ + "e" ;
    VP (Pres Ind Pl P1) => tañ_ + "emos" ;
    VP (Pres Ind Pl P2) => tañ_ + "éis" ;
    VP (Pres Ind Pl P3) => tañ_ + "en" ;
    VP (Pres Subj Sg P1) => tañ_ + "a" ;
    VP (Pres Subj Sg P2) => tañ_ + "as" ;
    VP (Pres Subj Sg P3) => tañ_ + "a" ;
    VP (Pres Subj Pl P1) => tañ_ + "amos" ;
    VP (Pres Subj Pl P2) => tañ_ + "áis" ;
    VP (Pres Subj Pl P3) => tañ_ + "an" ;
    VP (Past Ind Sg P1) => tañ_ + "ía" ;
    VP (Past Ind Sg P2) => tañ_ + "ías" ;
    VP (Past Ind Sg P3) => tañ_ + "ía" ;
    VP (Past Ind Pl P1) => tañ_ + "íamos" ;
    VP (Past Ind Pl P2) => tañ_ + "íais" ;
    VP (Past Ind Pl P3) => tañ_ + "ían" ;
    VP (Past Subj Sg P1) => variants {tañ_ + "era" ; tañ_ + "ese"} ;
    VP (Past Subj Sg P2) => variants {tañ_ + "eras" ; tañ_ + "eses"} ;
    VP (Past Subj Sg P3) => variants {tañ_ + "era" ; tañ_ + "ese"} ;
    VP (Past Subj Pl P1) => variants {tañ_ + "éramos" ; tañ_ + "ésemos"} ;
    VP (Past Subj Pl P2) => variants {tañ_ + "erais" ; tañ_ + "eseis"} ;
    VP (Past Subj Pl P3) => variants {tañ_ + "eran" ; tañ_ + "esen"} ;
    VP (Pret Sg P1) => tañ_ + "í" ;
    VP (Pret Sg P2) => tañ_ + "iste" ;
    VP (Pret Sg P3) => tañ_ + "ó" ;
    VP (Pret Pl P1) => tañ_ + "imos" ;
    VP (Pret Pl P2) => tañ_ + "isteis" ;
    VP (Pret Pl P3) => tañ_ + "eron" ;
    VP (Fut Ind Sg P1) => tañ_ + "eré" ;
    VP (Fut Ind Sg P2) => tañ_ + "erás" ;
    VP (Fut Ind Sg P3) => tañ_ + "erá" ;
    VP (Fut Ind Pl P1) => tañ_ + "eremos" ;
    VP (Fut Ind Pl P2) => tañ_ + "eréis" ;
    VP (Fut Ind Pl P3) => tañ_ + "erán" ;
    VP (Fut Subj Sg P1) => tañ_ + "ere" ;
    VP (Fut Subj Sg P2) => tañ_ + "eres" ;
    VP (Fut Subj Sg P3) => tañ_ + "ere" ;
    VP (Fut Subj Pl P1) => tañ_ + "éremos" ;
    VP (Fut Subj Pl P2) => tañ_ + "ereis" ;
    VP (Fut Subj Pl P3) => tañ_ + "eren" ;
    VP (Cond Sg P1) => tañ_ + "ería" ;
    VP (Cond Sg P2) => tañ_ + "erías" ;
    VP (Cond Sg P3) => tañ_ + "ería" ;
    VP (Cond Pl P1) => tañ_ + "eríamos" ;
    VP (Cond Pl P2) => tañ_ + "eríais" ;
    VP (Cond Pl P3) => tañ_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => tañ_ + "e" ;
    VP (Imp Sg P3) => tañ_ + "a" ;
    VP (Imp Pl P1) => tañ_ + "amos" ;
    VP (Imp Pl P2) => tañ_ + "ed" ;
    VP (Imp Pl P3) => tañ_ + "an" ;
    VP (Pass Sg Masc) => tañ_ + "ido" ;
    VP (Pass Sg Fem) => tañ_ + "ida" ;
    VP (Pass Pl Masc) => tañ_ + "idos" ;
    VP (Pass Pl Fem) => tañ_ + "idas"
    }
  } ;
oper traer_79 : Str -> Verbum = \traer ->
  let tra_ = Predef.tk 2 traer in
 {s = table {
    VI Infn => tra_ + "er" ;
    VI Ger => tra_ + "yendo" ;
    VI Part => tra_ + "ído" ;
    VP (Pres Ind Sg P1) => tra_ + "o" ;
    VP (Pres Ind Sg P2) => tra_ + "es" ;
    VP (Pres Ind Sg P3) => tra_ + "e" ;
    VP (Pres Ind Pl P1) => tra_ + "emos" ;
    VP (Pres Ind Pl P2) => tra_ + "éis" ;
    VP (Pres Ind Pl P3) => tra_ + "en" ;
    VP (Pres Subj Sg P1) => tra_ + "a" ;
    VP (Pres Subj Sg P2) => tra_ + "as" ;
    VP (Pres Subj Sg P3) => tra_ + "a" ;
    VP (Pres Subj Pl P1) => tra_ + "amos" ;
    VP (Pres Subj Pl P2) => tra_ + "áis" ;
    VP (Pres Subj Pl P3) => tra_ + "an" ;
    VP (Past Ind Sg P1) => tra_ + "ía" ;
    VP (Past Ind Sg P2) => tra_ + "ías" ;
    VP (Past Ind Sg P3) => tra_ + "ía" ;
    VP (Past Ind Pl P1) => tra_ + "íamos" ;
    VP (Past Ind Pl P2) => tra_ + "íais" ;
    VP (Past Ind Pl P3) => tra_ + "ían" ;
    VP (Past Subj Sg P1) => variants {tra_ + "yera" ; tra_ + "yese"} ;
    VP (Past Subj Sg P2) => variants {tra_ + "yeras" ; tra_ + "yeses"} ;
    VP (Past Subj Sg P3) => variants {tra_ + "yera" ; tra_ + "yese"} ;
    VP (Past Subj Pl P1) => variants {tra_ + "yéramos" ; tra_ + "yésemos"} ;
    VP (Past Subj Pl P2) => variants {tra_ + "yerais" ; tra_ + "yeseis"} ;
    VP (Past Subj Pl P3) => variants {tra_ + "yeran" ; tra_ + "yesen"} ;
    VP (Pret Sg P1) => tra_ + "í" ;
    VP (Pret Sg P2) => tra_ + "íste" ;
    VP (Pret Sg P3) => tra_ + "yó" ;
    VP (Pret Pl P1) => tra_ + "ímos" ;
    VP (Pret Pl P2) => tra_ + "ísteis" ;
    VP (Pret Pl P3) => tra_ + "yeron" ;
    VP (Fut Ind Sg P1) => tra_ + "eré" ;
    VP (Fut Ind Sg P2) => tra_ + "erás" ;
    VP (Fut Ind Sg P3) => tra_ + "erá" ;
    VP (Fut Ind Pl P1) => tra_ + "eremos" ;
    VP (Fut Ind Pl P2) => tra_ + "eréis" ;
    VP (Fut Ind Pl P3) => tra_ + "erán" ;
    VP (Fut Subj Sg P1) => tra_ + "yere" ;
    VP (Fut Subj Sg P2) => tra_ + "yeres" ;
    VP (Fut Subj Sg P3) => tra_ + "yere" ;
    VP (Fut Subj Pl P1) => tra_ + "yéremos" ;
    VP (Fut Subj Pl P2) => tra_ + "yereis" ;
    VP (Fut Subj Pl P3) => tra_ + "yeren" ;
    VP (Cond Sg P1) => tra_ + "ería" ;
    VP (Cond Sg P2) => tra_ + "erías" ;
    VP (Cond Sg P3) => tra_ + "ería" ;
    VP (Cond Pl P1) => tra_ + "eríamos" ;
    VP (Cond Pl P2) => tra_ + "eríais" ;
    VP (Cond Pl P3) => tra_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => tra_ + "e" ;
    VP (Imp Sg P3) => tra_ + "a" ;
    VP (Imp Pl P1) => tra_ + "amos" ;
    VP (Imp Pl P2) => tra_ + "ed" ;
    VP (Imp Pl P3) => tra_ + "an" ;
    VP (Pass Sg Masc) => tra_ + "ído" ;
    VP (Pass Sg Fem) => tra_ + "ída" ;
    VP (Pass Pl Masc) => tra_ + "ídos" ;
    VP (Pass Pl Fem) => tra_ + "ídas"
    }
  } ;
oper trocar_80 : Str -> Verbum = \trocar ->
  let tr_ = Predef.tk 4 trocar in
 {s = table {
    VI Infn => tr_ + "ocar" ;
    VI Ger => tr_ + "ocando" ;
    VI Part => tr_ + "ocado" ;
    VP (Pres Ind Sg P1) => tr_ + "ueco" ;
    VP (Pres Ind Sg P2) => tr_ + "uecas" ;
    VP (Pres Ind Sg P3) => tr_ + "ueca" ;
    VP (Pres Ind Pl P1) => tr_ + "ocamos" ;
    VP (Pres Ind Pl P2) => tr_ + "ocáis" ;
    VP (Pres Ind Pl P3) => tr_ + "uecan" ;
    VP (Pres Subj Sg P1) => tr_ + "ueque" ;
    VP (Pres Subj Sg P2) => tr_ + "ueques" ;
    VP (Pres Subj Sg P3) => tr_ + "ueque" ;
    VP (Pres Subj Pl P1) => tr_ + "oquemos" ;
    VP (Pres Subj Pl P2) => tr_ + "oquéis" ;
    VP (Pres Subj Pl P3) => tr_ + "uequen" ;
    VP (Past Ind Sg P1) => tr_ + "ocaba" ;
    VP (Past Ind Sg P2) => tr_ + "ocabas" ;
    VP (Past Ind Sg P3) => tr_ + "ocaba" ;
    VP (Past Ind Pl P1) => tr_ + "ocábamos" ;
    VP (Past Ind Pl P2) => tr_ + "ocabais" ;
    VP (Past Ind Pl P3) => tr_ + "ocaban" ;
    VP (Past Subj Sg P1) => variants {tr_ + "ocara" ; tr_ + "ocase"} ;
    VP (Past Subj Sg P2) => variants {tr_ + "ocaras" ; tr_ + "ocases"} ;
    VP (Past Subj Sg P3) => variants {tr_ + "ocara" ; tr_ + "ocase"} ;
    VP (Past Subj Pl P1) => variants {tr_ + "ocáramos" ; tr_ + "ocásemos"} ;
    VP (Past Subj Pl P2) => variants {tr_ + "ocarais" ; tr_ + "ocaseis"} ;
    VP (Past Subj Pl P3) => variants {tr_ + "ocaran" ; tr_ + "ocasen"} ;
    VP (Pret Sg P1) => tr_ + "oqué" ;
    VP (Pret Sg P2) => tr_ + "ocaste" ;
    VP (Pret Sg P3) => tr_ + "ocó" ;
    VP (Pret Pl P1) => tr_ + "ocamos" ;
    VP (Pret Pl P2) => tr_ + "ocasteis" ;
    VP (Pret Pl P3) => tr_ + "ocaron" ;
    VP (Fut Ind Sg P1) => tr_ + "ocaré" ;
    VP (Fut Ind Sg P2) => tr_ + "ocarás" ;
    VP (Fut Ind Sg P3) => tr_ + "ocará" ;
    VP (Fut Ind Pl P1) => tr_ + "ocaremos" ;
    VP (Fut Ind Pl P2) => tr_ + "ocaréis" ;
    VP (Fut Ind Pl P3) => tr_ + "ocarán" ;
    VP (Fut Subj Sg P1) => tr_ + "ocare" ;
    VP (Fut Subj Sg P2) => tr_ + "ocares" ;
    VP (Fut Subj Sg P3) => tr_ + "ocare" ;
    VP (Fut Subj Pl P1) => tr_ + "ocáremos" ;
    VP (Fut Subj Pl P2) => tr_ + "ocareis" ;
    VP (Fut Subj Pl P3) => tr_ + "ocaren" ;
    VP (Cond Sg P1) => tr_ + "ocaría" ;
    VP (Cond Sg P2) => tr_ + "ocarías" ;
    VP (Cond Sg P3) => tr_ + "ocaría" ;
    VP (Cond Pl P1) => tr_ + "ocaríamos" ;
    VP (Cond Pl P2) => tr_ + "ocaríais" ;
    VP (Cond Pl P3) => tr_ + "ocarían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => tr_ + "ueca" ;
    VP (Imp Sg P3) => tr_ + "ueque" ;
    VP (Imp Pl P1) => tr_ + "oquemos" ;
    VP (Imp Pl P2) => tr_ + "ocad" ;
    VP (Imp Pl P3) => tr_ + "uequen" ;
    VP (Pass Sg Masc) => tr_ + "ocado" ;
    VP (Pass Sg Fem) => tr_ + "ocada" ;
    VP (Pass Pl Masc) => tr_ + "ocados" ;
    VP (Pass Pl Fem) => tr_ + "ocadas"
    }
  } ;
oper valer_81 : Str -> Verbum = \valer ->
  let val_ = Predef.tk 2 valer in
 {s = table {
    VI Infn => val_ + "er" ;
    VI Ger => val_ + "iendo" ;
    VI Part => val_ + "ido" ;
    VP (Pres Ind Sg P1) => val_ + "go" ;
    VP (Pres Ind Sg P2) => val_ + "es" ;
    VP (Pres Ind Sg P3) => val_ + "e" ;
    VP (Pres Ind Pl P1) => val_ + "emos" ;
    VP (Pres Ind Pl P2) => val_ + "éis" ;
    VP (Pres Ind Pl P3) => val_ + "en" ;
    VP (Pres Subj Sg P1) => val_ + "ga" ;
    VP (Pres Subj Sg P2) => val_ + "gas" ;
    VP (Pres Subj Sg P3) => val_ + "ga" ;
    VP (Pres Subj Pl P1) => val_ + "gamos" ;
    VP (Pres Subj Pl P2) => val_ + "gáis" ;
    VP (Pres Subj Pl P3) => val_ + "gan" ;
    VP (Past Ind Sg P1) => val_ + "ía" ;
    VP (Past Ind Sg P2) => val_ + "ías" ;
    VP (Past Ind Sg P3) => val_ + "ía" ;
    VP (Past Ind Pl P1) => val_ + "íamos" ;
    VP (Past Ind Pl P2) => val_ + "íais" ;
    VP (Past Ind Pl P3) => val_ + "ían" ;
    VP (Past Subj Sg P1) => variants {val_ + "iera" ; val_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {val_ + "ieras" ; val_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {val_ + "iera" ; val_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {val_ + "iéramos" ; val_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {val_ + "ierais" ; val_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {val_ + "ieran" ; val_ + "iesen"} ;
    VP (Pret Sg P1) => val_ + "í" ;
    VP (Pret Sg P2) => val_ + "iste" ;
    VP (Pret Sg P3) => val_ + "ió" ;
    VP (Pret Pl P1) => val_ + "imos" ;
    VP (Pret Pl P2) => val_ + "isteis" ;
    VP (Pret Pl P3) => val_ + "ieron" ;
    VP (Fut Ind Sg P1) => val_ + "dré" ;
    VP (Fut Ind Sg P2) => val_ + "drás" ;
    VP (Fut Ind Sg P3) => val_ + "drá" ;
    VP (Fut Ind Pl P1) => val_ + "dremos" ;
    VP (Fut Ind Pl P2) => val_ + "dréis" ;
    VP (Fut Ind Pl P3) => val_ + "drán" ;
    VP (Fut Subj Sg P1) => val_ + "iere" ;
    VP (Fut Subj Sg P2) => val_ + "ieres" ;
    VP (Fut Subj Sg P3) => val_ + "iere" ;
    VP (Fut Subj Pl P1) => val_ + "iéremos" ;
    VP (Fut Subj Pl P2) => val_ + "iereis" ;
    VP (Fut Subj Pl P3) => val_ + "ieren" ;
    VP (Cond Sg P1) => val_ + "dría" ;
    VP (Cond Sg P2) => val_ + "drías" ;
    VP (Cond Sg P3) => val_ + "dría" ;
    VP (Cond Pl P1) => val_ + "dríamos" ;
    VP (Cond Pl P2) => val_ + "dríais" ;
    VP (Cond Pl P3) => val_ + "drían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => val_ + "e" ;
    VP (Imp Sg P3) => val_ + "ga" ;
    VP (Imp Pl P1) => val_ + "gamos" ;
    VP (Imp Pl P2) => val_ + "ed" ;
    VP (Imp Pl P3) => val_ + "gan" ;
    VP (Pass Sg Masc) => val_ + "ido" ;
    VP (Pass Sg Fem) => val_ + "ida" ;
    VP (Pass Pl Masc) => val_ + "idos" ;
    VP (Pass Pl Fem) => val_ + "idas"
    }
  } ;
oper venir_82 : Str -> Verbum = \venir ->
  let v_ = Predef.tk 4 venir in
 {s = table {
    VI Infn => v_ + "enir" ;
    VI Ger => v_ + "iniendo" ;
    VI Part => v_ + "enido" ;
    VP (Pres Ind Sg P1) => v_ + "engo" ;
    VP (Pres Ind Sg P2) => v_ + "ienes" ;
    VP (Pres Ind Sg P3) => v_ + "iene" ;
    VP (Pres Ind Pl P1) => v_ + "enimos" ;
    VP (Pres Ind Pl P2) => v_ + "enís" ;
    VP (Pres Ind Pl P3) => v_ + "ienen" ;
    VP (Pres Subj Sg P1) => v_ + "enga" ;
    VP (Pres Subj Sg P2) => v_ + "engas" ;
    VP (Pres Subj Sg P3) => v_ + "enga" ;
    VP (Pres Subj Pl P1) => v_ + "engamos" ;
    VP (Pres Subj Pl P2) => v_ + "engáis" ;
    VP (Pres Subj Pl P3) => v_ + "engan" ;
    VP (Past Ind Sg P1) => v_ + "enía" ;
    VP (Past Ind Sg P2) => v_ + "enías" ;
    VP (Past Ind Sg P3) => v_ + "enía" ;
    VP (Past Ind Pl P1) => v_ + "eníamos" ;
    VP (Past Ind Pl P2) => v_ + "eníais" ;
    VP (Past Ind Pl P3) => v_ + "enían" ;
    VP (Past Subj Sg P1) => variants {v_ + "iniera" ; v_ + "iniese"} ;
    VP (Past Subj Sg P2) => variants {v_ + "inieras" ; v_ + "inieses"} ;
    VP (Past Subj Sg P3) => variants {v_ + "iniera" ; v_ + "iniese"} ;
    VP (Past Subj Pl P1) => variants {v_ + "iniéramos" ; v_ + "iniésemos"} ;
    VP (Past Subj Pl P2) => variants {v_ + "inierais" ; v_ + "inieseis"} ;
    VP (Past Subj Pl P3) => variants {v_ + "inieran" ; v_ + "iniesen"} ;
    VP (Pret Sg P1) => v_ + "ine" ;
    VP (Pret Sg P2) => v_ + "iniste" ;
    VP (Pret Sg P3) => v_ + "ino" ;
    VP (Pret Pl P1) => v_ + "inimos" ;
    VP (Pret Pl P2) => v_ + "inisteis" ;
    VP (Pret Pl P3) => v_ + "inieron" ;
    VP (Fut Ind Sg P1) => v_ + "endré" ;
    VP (Fut Ind Sg P2) => v_ + "endrás" ;
    VP (Fut Ind Sg P3) => v_ + "endrá" ;
    VP (Fut Ind Pl P1) => v_ + "endremos" ;
    VP (Fut Ind Pl P2) => v_ + "endréis" ;
    VP (Fut Ind Pl P3) => v_ + "endrán" ;
    VP (Fut Subj Sg P1) => v_ + "iniere" ;
    VP (Fut Subj Sg P2) => v_ + "inieres" ;
    VP (Fut Subj Sg P3) => v_ + "iniere" ;
    VP (Fut Subj Pl P1) => v_ + "iniéremos" ;
    VP (Fut Subj Pl P2) => v_ + "iniereis" ;
    VP (Fut Subj Pl P3) => v_ + "inieren" ;
    VP (Cond Sg P1) => v_ + "endría" ;
    VP (Cond Sg P2) => v_ + "endrías" ;
    VP (Cond Sg P3) => v_ + "endría" ;
    VP (Cond Pl P1) => v_ + "endríamos" ;
    VP (Cond Pl P2) => v_ + "endríais" ;
    VP (Cond Pl P3) => v_ + "endrían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => v_ + "en" ;
    VP (Imp Sg P3) => v_ + "enga" ;
    VP (Imp Pl P1) => v_ + "engamos" ;
    VP (Imp Pl P2) => v_ + "enid" ;
    VP (Imp Pl P3) => v_ + "engan" ;
    VP (Pass Sg Masc) => v_ + "enido" ;
    VP (Pass Sg Fem) => v_ + "enida" ;
    VP (Pass Pl Masc) => v_ + "enidos" ;
    VP (Pass Pl Fem) => v_ + "enidas"
    }
  } ;
oper ver_83 : Str -> Verbum = \ver ->
  let v_ = Predef.tk 2 ver in
 {s = table {
    VI Infn => v_ + "er" ;
    VI Ger => v_ + "iendo" ;
    VI Part => v_ + "isto" ;
    VP (Pres Ind Sg P1) => v_ + "eo" ;
    VP (Pres Ind Sg P2) => v_ + "es" ;
    VP (Pres Ind Sg P3) => v_ + "e" ;
    VP (Pres Ind Pl P1) => v_ + "emos" ;
    VP (Pres Ind Pl P2) => v_ + "eis" ;
    VP (Pres Ind Pl P3) => v_ + "en" ;
    VP (Pres Subj Sg P1) => v_ + "ea" ;
    VP (Pres Subj Sg P2) => v_ + "eas" ;
    VP (Pres Subj Sg P3) => v_ + "ea" ;
    VP (Pres Subj Pl P1) => v_ + "eamos" ;
    VP (Pres Subj Pl P2) => v_ + "eáis" ;
    VP (Pres Subj Pl P3) => v_ + "ean" ;
    VP (Past Ind Sg P1) => v_ + "eía" ;
    VP (Past Ind Sg P2) => v_ + "eías" ;
    VP (Past Ind Sg P3) => v_ + "eía" ;
    VP (Past Ind Pl P1) => v_ + "eíamos" ;
    VP (Past Ind Pl P2) => v_ + "eíais" ;
    VP (Past Ind Pl P3) => v_ + "eían" ;
    VP (Past Subj Sg P1) => variants {v_ + "iera" ; v_ + "iese"} ;
    VP (Past Subj Sg P2) => variants {v_ + "ieras" ; v_ + "ieses"} ;
    VP (Past Subj Sg P3) => variants {v_ + "iera" ; v_ + "iese"} ;
    VP (Past Subj Pl P1) => variants {v_ + "iéramos" ; v_ + "iésemos"} ;
    VP (Past Subj Pl P2) => variants {v_ + "ierais" ; v_ + "ieseis"} ;
    VP (Past Subj Pl P3) => variants {v_ + "ieran" ; v_ + "iesen"} ;
    VP (Pret Sg P1) => v_ + "i" ;
    VP (Pret Sg P2) => v_ + "iste" ;
    VP (Pret Sg P3) => v_ + "io" ;
    VP (Pret Pl P1) => v_ + "imos" ;
    VP (Pret Pl P2) => v_ + "isteis" ;
    VP (Pret Pl P3) => v_ + "ieron" ;
    VP (Fut Ind Sg P1) => v_ + "eré" ;
    VP (Fut Ind Sg P2) => v_ + "erás" ;
    VP (Fut Ind Sg P3) => v_ + "erá" ;
    VP (Fut Ind Pl P1) => v_ + "eremos" ;
    VP (Fut Ind Pl P2) => v_ + "eréis" ;
    VP (Fut Ind Pl P3) => v_ + "erán" ;
    VP (Fut Subj Sg P1) => v_ + "iere" ;
    VP (Fut Subj Sg P2) => v_ + "ieres" ;
    VP (Fut Subj Sg P3) => v_ + "iere" ;
    VP (Fut Subj Pl P1) => v_ + "iéremos" ;
    VP (Fut Subj Pl P2) => v_ + "iereis" ;
    VP (Fut Subj Pl P3) => v_ + "ieren" ;
    VP (Cond Sg P1) => v_ + "ería" ;
    VP (Cond Sg P2) => v_ + "erías" ;
    VP (Cond Sg P3) => v_ + "ería" ;
    VP (Cond Pl P1) => v_ + "eríamos" ;
    VP (Cond Pl P2) => v_ + "eríais" ;
    VP (Cond Pl P3) => v_ + "erían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => v_ + "e" ;
    VP (Imp Sg P3) => v_ + "ea" ;
    VP (Imp Pl P1) => v_ + "eamos" ;
    VP (Imp Pl P2) => v_ + "ed" ;
    VP (Imp Pl P3) => v_ + "ean" ;
    VP (Pass Sg Masc) => v_ + "isto" ;
    VP (Pass Sg Fem) => v_ + "ista" ;
    VP (Pass Pl Masc) => v_ + "istos" ;
    VP (Pass Pl Fem) => v_ + "istas"
    }
  } ;
oper volver_84 : Str -> Verbum = \volver ->
  let v_ = Predef.tk 5 volver in
 {s = table {
    VI Infn => v_ + "olver" ;
    VI Ger => v_ + "olviendo" ;
    VI Part => v_ + "uelto" ;
    VP (Pres Ind Sg P1) => v_ + "uelvo" ;
    VP (Pres Ind Sg P2) => v_ + "uelves" ;
    VP (Pres Ind Sg P3) => v_ + "uelve" ;
    VP (Pres Ind Pl P1) => v_ + "olvemos" ;
    VP (Pres Ind Pl P2) => v_ + "olvéis" ;
    VP (Pres Ind Pl P3) => v_ + "uelven" ;
    VP (Pres Subj Sg P1) => v_ + "uelva" ;
    VP (Pres Subj Sg P2) => v_ + "uelvas" ;
    VP (Pres Subj Sg P3) => v_ + "uelva" ;
    VP (Pres Subj Pl P1) => v_ + "olvamos" ;
    VP (Pres Subj Pl P2) => v_ + "olváis" ;
    VP (Pres Subj Pl P3) => v_ + "uelvan" ;
    VP (Past Ind Sg P1) => v_ + "olvía" ;
    VP (Past Ind Sg P2) => v_ + "olvías" ;
    VP (Past Ind Sg P3) => v_ + "olvía" ;
    VP (Past Ind Pl P1) => v_ + "olvíamos" ;
    VP (Past Ind Pl P2) => v_ + "olvíais" ;
    VP (Past Ind Pl P3) => v_ + "olvían" ;
    VP (Past Subj Sg P1) => variants {v_ + "olviera" ; v_ + "olviese"} ;
    VP (Past Subj Sg P2) => variants {v_ + "olvieras" ; v_ + "olvieses"} ;
    VP (Past Subj Sg P3) => variants {v_ + "olviera" ; v_ + "olviese"} ;
    VP (Past Subj Pl P1) => variants {v_ + "olviéramos" ; v_ + "olviésemos"} ;
    VP (Past Subj Pl P2) => variants {v_ + "olvierais" ; v_ + "olvieseis"} ;
    VP (Past Subj Pl P3) => variants {v_ + "olvieran" ; v_ + "olviesen"} ;
    VP (Pret Sg P1) => v_ + "olví" ;
    VP (Pret Sg P2) => v_ + "olviste" ;
    VP (Pret Sg P3) => v_ + "olvió" ;
    VP (Pret Pl P1) => v_ + "olvimos" ;
    VP (Pret Pl P2) => v_ + "olvisteis" ;
    VP (Pret Pl P3) => v_ + "olvieron" ;
    VP (Fut Ind Sg P1) => v_ + "olveré" ;
    VP (Fut Ind Sg P2) => v_ + "olverás" ;
    VP (Fut Ind Sg P3) => v_ + "olverá" ;
    VP (Fut Ind Pl P1) => v_ + "olveremos" ;
    VP (Fut Ind Pl P2) => v_ + "olveréis" ;
    VP (Fut Ind Pl P3) => v_ + "olverán" ;
    VP (Fut Subj Sg P1) => v_ + "olviere" ;
    VP (Fut Subj Sg P2) => v_ + "olvieres" ;
    VP (Fut Subj Sg P3) => v_ + "olviere" ;
    VP (Fut Subj Pl P1) => v_ + "olviéremos" ;
    VP (Fut Subj Pl P2) => v_ + "olviereis" ;
    VP (Fut Subj Pl P3) => v_ + "olvieren" ;
    VP (Cond Sg P1) => v_ + "olvería" ;
    VP (Cond Sg P2) => v_ + "olverías" ;
    VP (Cond Sg P3) => v_ + "olvería" ;
    VP (Cond Pl P1) => v_ + "olveríamos" ;
    VP (Cond Pl P2) => v_ + "olveríais" ;
    VP (Cond Pl P3) => v_ + "olverían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => v_ + "uelve" ;
    VP (Imp Sg P3) => v_ + "uelva" ;
    VP (Imp Pl P1) => v_ + "olvamos" ;
    VP (Imp Pl P2) => v_ + "olved" ;
    VP (Imp Pl P3) => v_ + "uelvan" ;
    VP (Pass Sg Masc) => v_ + "uelto" ;
    VP (Pass Sg Fem) => v_ + "uelta" ;
    VP (Pass Pl Masc) => v_ + "ueltos" ;
    VP (Pass Pl Fem) => v_ + "ueltas"
    }
  } ;
oper yacer_85 : Str -> Verbum = \yacer ->
  let ya_ = Predef.tk 3 yacer in
 {s = table {
    VI Infn => ya_ + "cer" ;
    VI Ger => ya_ + "ciendo" ;
    VI Part => ya_ + "cido" ;
    VP (Pres Ind Sg P1) => ya_ + "zgo" ;
    VP (Pres Ind Sg P2) => ya_ + "ces" ;
    VP (Pres Ind Sg P3) => ya_ + "ce" ;
    VP (Pres Ind Pl P1) => ya_ + "cemos" ;
    VP (Pres Ind Pl P2) => ya_ + "céis" ;
    VP (Pres Ind Pl P3) => ya_ + "cen" ;
    VP (Pres Subj Sg P1) => ya_ + "zga" ;
    VP (Pres Subj Sg P2) => ya_ + "zgas" ;
    VP (Pres Subj Sg P3) => ya_ + "zga" ;
    VP (Pres Subj Pl P1) => ya_ + "zgamos" ;
    VP (Pres Subj Pl P2) => ya_ + "zgáis" ;
    VP (Pres Subj Pl P3) => ya_ + "zgan" ;
    VP (Past Ind Sg P1) => ya_ + "cía" ;
    VP (Past Ind Sg P2) => ya_ + "cías" ;
    VP (Past Ind Sg P3) => ya_ + "cía" ;
    VP (Past Ind Pl P1) => ya_ + "cíamos" ;
    VP (Past Ind Pl P2) => ya_ + "cíais" ;
    VP (Past Ind Pl P3) => ya_ + "cían" ;
    VP (Past Subj Sg P1) => variants {ya_ + "ciera" ; ya_ + "ciese"} ;
    VP (Past Subj Sg P2) => variants {ya_ + "cieras" ; ya_ + "cieses"} ;
    VP (Past Subj Sg P3) => variants {ya_ + "ciera" ; ya_ + "ciese"} ;
    VP (Past Subj Pl P1) => variants {ya_ + "ciéramos" ; ya_ + "ciésemos"} ;
    VP (Past Subj Pl P2) => variants {ya_ + "cierais" ; ya_ + "cieseis"} ;
    VP (Past Subj Pl P3) => variants {ya_ + "cieran" ; ya_ + "ciesen"} ;
    VP (Pret Sg P1) => ya_ + "cí" ;
    VP (Pret Sg P2) => ya_ + "ciste" ;
    VP (Pret Sg P3) => ya_ + "ció" ;
    VP (Pret Pl P1) => ya_ + "cimos" ;
    VP (Pret Pl P2) => ya_ + "cisteis" ;
    VP (Pret Pl P3) => ya_ + "cieron" ;
    VP (Fut Ind Sg P1) => ya_ + "ceré" ;
    VP (Fut Ind Sg P2) => ya_ + "cerás" ;
    VP (Fut Ind Sg P3) => ya_ + "cerá" ;
    VP (Fut Ind Pl P1) => ya_ + "ceremos" ;
    VP (Fut Ind Pl P2) => ya_ + "ceréis" ;
    VP (Fut Ind Pl P3) => ya_ + "cerán" ;
    VP (Fut Subj Sg P1) => ya_ + "ciere" ;
    VP (Fut Subj Sg P2) => ya_ + "cieres" ;
    VP (Fut Subj Sg P3) => ya_ + "ciere" ;
    VP (Fut Subj Pl P1) => ya_ + "ciéremos" ;
    VP (Fut Subj Pl P2) => ya_ + "ciereis" ;
    VP (Fut Subj Pl P3) => ya_ + "cieren" ;
    VP (Cond Sg P1) => ya_ + "cería" ;
    VP (Cond Sg P2) => ya_ + "cerías" ;
    VP (Cond Sg P3) => ya_ + "cería" ;
    VP (Cond Pl P1) => ya_ + "ceríamos" ;
    VP (Cond Pl P2) => ya_ + "ceríais" ;
    VP (Cond Pl P3) => ya_ + "cerían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => ya_ + "ce" ;
    VP (Imp Sg P3) => ya_ + "zga" ;
    VP (Imp Pl P1) => ya_ + "zgamos" ;
    VP (Imp Pl P2) => ya_ + "ced" ;
    VP (Imp Pl P3) => ya_ + "zgan" ;
    VP (Pass Sg Masc) => ya_ + "cido" ;
    VP (Pass Sg Fem) => ya_ + "cida" ;
    VP (Pass Pl Masc) => ya_ + "cidos" ;
    VP (Pass Pl Fem) => ya_ + "cidas"
    }
  } ;
oper zurcir_86 : Str -> Verbum = \zurcir ->
  let zur_ = Predef.tk 3 zurcir in
 {s = table {
    VI Infn => zur_ + "cir" ;
    VI Ger => zur_ + "ciendo" ;
    VI Part => zur_ + "cido" ;
    VP (Pres Ind Sg P1) => zur_ + "zo" ;
    VP (Pres Ind Sg P2) => zur_ + "ces" ;
    VP (Pres Ind Sg P3) => zur_ + "ce" ;
    VP (Pres Ind Pl P1) => zur_ + "cimos" ;
    VP (Pres Ind Pl P2) => zur_ + "cís" ;
    VP (Pres Ind Pl P3) => zur_ + "cen" ;
    VP (Pres Subj Sg P1) => zur_ + "za" ;
    VP (Pres Subj Sg P2) => zur_ + "zas" ;
    VP (Pres Subj Sg P3) => zur_ + "za" ;
    VP (Pres Subj Pl P1) => zur_ + "zamos" ;
    VP (Pres Subj Pl P2) => zur_ + "záis" ;
    VP (Pres Subj Pl P3) => zur_ + "zan" ;
    VP (Past Ind Sg P1) => zur_ + "cía" ;
    VP (Past Ind Sg P2) => zur_ + "cías" ;
    VP (Past Ind Sg P3) => zur_ + "cía" ;
    VP (Past Ind Pl P1) => zur_ + "cíamos" ;
    VP (Past Ind Pl P2) => zur_ + "cíais" ;
    VP (Past Ind Pl P3) => zur_ + "cían" ;
    VP (Past Subj Sg P1) => variants {zur_ + "ciera" ; zur_ + "ciese"} ;
    VP (Past Subj Sg P2) => variants {zur_ + "cieras" ; zur_ + "cieses"} ;
    VP (Past Subj Sg P3) => variants {zur_ + "ciera" ; zur_ + "ciese"} ;
    VP (Past Subj Pl P1) => variants {zur_ + "ciéramos" ; zur_ + "ciésemos"} ;
    VP (Past Subj Pl P2) => variants {zur_ + "cierais" ; zur_ + "cieseis"} ;
    VP (Past Subj Pl P3) => variants {zur_ + "cieran" ; zur_ + "ciesen"} ;
    VP (Pret Sg P1) => zur_ + "cí" ;
    VP (Pret Sg P2) => zur_ + "ciste" ;
    VP (Pret Sg P3) => zur_ + "ció" ;
    VP (Pret Pl P1) => zur_ + "cimos" ;
    VP (Pret Pl P2) => zur_ + "cisteis" ;
    VP (Pret Pl P3) => zur_ + "cieron" ;
    VP (Fut Ind Sg P1) => zur_ + "ciré" ;
    VP (Fut Ind Sg P2) => zur_ + "cirás" ;
    VP (Fut Ind Sg P3) => zur_ + "cirá" ;
    VP (Fut Ind Pl P1) => zur_ + "ciremos" ;
    VP (Fut Ind Pl P2) => zur_ + "ciréis" ;
    VP (Fut Ind Pl P3) => zur_ + "cirán" ;
    VP (Fut Subj Sg P1) => zur_ + "ciere" ;
    VP (Fut Subj Sg P2) => zur_ + "cieres" ;
    VP (Fut Subj Sg P3) => zur_ + "ciere" ;
    VP (Fut Subj Pl P1) => zur_ + "ciéremos" ;
    VP (Fut Subj Pl P2) => zur_ + "ciereis" ;
    VP (Fut Subj Pl P3) => zur_ + "cieren" ;
    VP (Cond Sg P1) => zur_ + "ciría" ;
    VP (Cond Sg P2) => zur_ + "cirías" ;
    VP (Cond Sg P3) => zur_ + "ciría" ;
    VP (Cond Pl P1) => zur_ + "ciríamos" ;
    VP (Cond Pl P2) => zur_ + "ciríais" ;
    VP (Cond Pl P3) => zur_ + "cirían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => zur_ + "ce" ;
    VP (Imp Sg P3) => zur_ + "za" ;
    VP (Imp Pl P1) => zur_ + "zamos" ;
    VP (Imp Pl P2) => zur_ + "cid" ;
    VP (Imp Pl P3) => zur_ + "zan" ;
    VP (Pass Sg Masc) => zur_ + "cido" ;
    VP (Pass Sg Fem) => zur_ + "cida" ;
    VP (Pass Pl Masc) => zur_ + "cidos" ;
    VP (Pass Pl Fem) => zur_ + "cidas"
    }
  } ;
oper amar_87 : Str -> Verbum = \amar ->
  let am_ = Predef.tk 2 amar in
 {s = table {
    VI Infn => am_ + "ar" ;
    VI Ger => am_ + "ando" ;
    VI Part => am_ + "ado" ;
    VP (Pres Ind Sg P1) => am_ + "o" ;
    VP (Pres Ind Sg P2) => am_ + "as" ;
    VP (Pres Ind Sg P3) => am_ + "a" ;
    VP (Pres Ind Pl P1) => am_ + "amos" ;
    VP (Pres Ind Pl P2) => am_ + "áis" ;
    VP (Pres Ind Pl P3) => am_ + "an" ;
    VP (Pres Subj Sg P1) => am_ + "e" ;
    VP (Pres Subj Sg P2) => am_ + "es" ;
    VP (Pres Subj Sg P3) => am_ + "e" ;
    VP (Pres Subj Pl P1) => am_ + "emos" ;
    VP (Pres Subj Pl P2) => am_ + "éis" ;
    VP (Pres Subj Pl P3) => am_ + "en" ;
    VP (Past Ind Sg P1) => am_ + "aba" ;
    VP (Past Ind Sg P2) => am_ + "abas" ;
    VP (Past Ind Sg P3) => am_ + "aba" ;
    VP (Past Ind Pl P1) => am_ + "ábamos" ;
    VP (Past Ind Pl P2) => am_ + "abais" ;
    VP (Past Ind Pl P3) => am_ + "aban" ;
    VP (Past Subj Sg P1) => variants {am_ + "ara" ; am_ + "ase"} ;
    VP (Past Subj Sg P2) => variants {am_ + "aras" ; am_ + "ases"} ;
    VP (Past Subj Sg P3) => variants {am_ + "ara" ; am_ + "ase"} ;
    VP (Past Subj Pl P1) => variants {am_ + "áramos" ; am_ + "ásemos"} ;
    VP (Past Subj Pl P2) => variants {am_ + "arais" ; am_ + "aseis"} ;
    VP (Past Subj Pl P3) => variants {am_ + "aran" ; am_ + "asen"} ;
    VP (Pret Sg P1) => am_ + "é" ;
    VP (Pret Sg P2) => am_ + "aste" ;
    VP (Pret Sg P3) => am_ + "ó" ;
    VP (Pret Pl P1) => am_ + "amos" ;
    VP (Pret Pl P2) => am_ + "asteis" ;
    VP (Pret Pl P3) => am_ + "aron" ;
    VP (Fut Ind Sg P1) => am_ + "aré" ;
    VP (Fut Ind Sg P2) => am_ + "arás" ;
    VP (Fut Ind Sg P3) => am_ + "ará" ;
    VP (Fut Ind Pl P1) => am_ + "aremos" ;
    VP (Fut Ind Pl P2) => am_ + "aréis" ;
    VP (Fut Ind Pl P3) => am_ + "arán" ;
    VP (Fut Subj Sg P1) => am_ + "are" ;
    VP (Fut Subj Sg P2) => am_ + "ares" ;
    VP (Fut Subj Sg P3) => am_ + "are" ;
    VP (Fut Subj Pl P1) => am_ + "áremos" ;
    VP (Fut Subj Pl P2) => am_ + "areis" ;
    VP (Fut Subj Pl P3) => am_ + "aren" ;
    VP (Cond Sg P1) => am_ + "aría" ;
    VP (Cond Sg P2) => am_ + "arías" ;
    VP (Cond Sg P3) => am_ + "aría" ;
    VP (Cond Pl P1) => am_ + "aríamos" ;
    VP (Cond Pl P2) => am_ + "aríais" ;
    VP (Cond Pl P3) => am_ + "arían" ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => am_ + "a" ;
    VP (Imp Sg P3) => am_ + "e" ;
    VP (Imp Pl P1) => am_ + "emos" ;
    VP (Imp Pl P2) => am_ + "ad" ;
    VP (Imp Pl P3) => am_ + "en" ;
    VP (Pass Sg Masc) => am_ + "ado" ;
    VP (Pass Sg Fem) => am_ + "ada" ;
    VP (Pass Pl Masc) => am_ + "ados" ;
    VP (Pass Pl Fem) => am_ + "adas"
    }
  } ;
oper llover_89 : Str -> Verbum = \llover ->
  let ll_ = Predef.tk 4 llover in
 {s = table {
    VI Infn => ll_ + "over" ;
    VI Ger => ll_ + "oviendo" ;
    VI Part => ll_ + "ovido" ;
    VP (Pres Ind Sg P1) => variants {} ;
    VP (Pres Ind Sg P2) => variants {} ;
    VP (Pres Ind Sg P3) => ll_ + "ueve" ;
    VP (Pres Ind Pl P1) => variants {} ;
    VP (Pres Ind Pl P2) => variants {} ;
    VP (Pres Ind Pl P3) => variants {} ;
    VP (Pres Subj Sg P1) => variants {} ;
    VP (Pres Subj Sg P2) => variants {} ;
    VP (Pres Subj Sg P3) => ll_ + "ueva" ;
    VP (Pres Subj Pl P1) => variants {} ;
    VP (Pres Subj Pl P2) => variants {} ;
    VP (Pres Subj Pl P3) => variants {} ;
    VP (Past Ind Sg P1) => variants {} ;
    VP (Past Ind Sg P2) => variants {} ;
    VP (Past Ind Sg P3) => ll_ + "ovía" ;
    VP (Past Ind Pl P1) => variants {} ;
    VP (Past Ind Pl P2) => variants {} ;
    VP (Past Ind Pl P3) => variants {} ;
    VP (Past Subj Sg P1) => variants {} ;
    VP (Past Subj Sg P2) => variants {} ;
    VP (Past Subj Sg P3) => variants {ll_ + "oviera" ; ll_ + "oviese"} ;
    VP (Past Subj Pl P1) => variants {} ;
    VP (Past Subj Pl P2) => variants {} ;
    VP (Past Subj Pl P3) => variants {} ;
    VP (Pret Sg P1) => variants {} ;
    VP (Pret Sg P2) => variants {} ;
    VP (Pret Sg P3) => ll_ + "ovió" ;
    VP (Pret Pl P1) => variants {} ;
    VP (Pret Pl P2) => variants {} ;
    VP (Pret Pl P3) => variants {} ;
    VP (Fut Ind Sg P1) => variants {} ;
    VP (Fut Ind Sg P2) => variants {} ;
    VP (Fut Ind Sg P3) => ll_ + "overá" ;
    VP (Fut Ind Pl P1) => variants {} ;
    VP (Fut Ind Pl P2) => variants {} ;
    VP (Fut Ind Pl P3) => variants {} ;
    VP (Fut Subj Sg P1) => variants {} ;
    VP (Fut Subj Sg P2) => variants {} ;
    VP (Fut Subj Sg P3) => ll_ + "oviere" ;
    VP (Fut Subj Pl P1) => variants {} ;
    VP (Fut Subj Pl P2) => variants {} ;
    VP (Fut Subj Pl P3) => variants {} ;
    VP (Cond Sg P1) => variants {} ;
    VP (Cond Sg P2) => variants {} ;
    VP (Cond Sg P3) => ll_ + "overía" ;
    VP (Cond Pl P1) => variants {} ;
    VP (Cond Pl P2) => variants {} ;
    VP (Cond Pl P3) => variants {} ;
    VP (Imp Sg P1) => variants {} ;
    VP (Imp Sg P2) => variants {} ;
    VP (Imp Sg P3) => variants {} ;
    VP (Imp Pl P1) => variants {} ;
    VP (Imp Pl P2) => variants {} ;
    VP (Imp Pl P3) => variants {} ;
    VP (Pass Sg Masc) => variants {} ;
    VP (Pass Sg Fem) => variants {} ;
    VP (Pass Pl Masc) => variants {} ;
    VP (Pass Pl Fem) => variants {}
    }
  } ;
}
