GF Resource Grammar Library: Synopsis
B. Bringert and A. Ranta


%!postproc(html): '(SRC="categories.png")'  '\1 USEMAP="#categories"'
%!postproc(html): '#LParadigms'  '<a name="RParadigms"></a>'
%!postproc(tex): '#LParadigms' ''
%!postproc(html): '(?i)(HREF="#A")( TITLE="[^"]*")?'  '\1 TITLE="A - one-place adjective"'
%!postproc(html): '(?i)(HREF="#A2")( TITLE="[^"]*")?'  '\1 TITLE="A2 - two-place adjective"'
%!postproc(html): '(?i)(HREF="#AP")( TITLE="[^"]*")?'  '\1 TITLE="AP - adjectival phrase"'
%!postproc(html): '(?i)(HREF="#AdA")( TITLE="[^"]*")?'  '\1 TITLE="AdA - adjective-modifying adverb"'
%!postproc(html): '(?i)(HREF="#AdN")( TITLE="[^"]*")?'  '\1 TITLE="AdN - numeral-modifying adverb"'
%!postproc(html): '(?i)(HREF="#AdV")( TITLE="[^"]*")?'  '\1 TITLE="AdV - adverb directly attached to verb"'
%!postproc(html): '(?i)(HREF="#Adv")( TITLE="[^"]*")?'  '\1 TITLE="Adv - verb-phrase-modifying adverb"'
%!postproc(html): '(?i)(HREF="#Ant")( TITLE="[^"]*")?'  '\1 TITLE="Ant - anteriority"'
%!postproc(html): '(?i)(HREF="#CAdv")( TITLE="[^"]*")?'  '\1 TITLE="CAdv - comparative adverb"'
%!postproc(html): '(?i)(HREF="#CN")( TITLE="[^"]*")?'  '\1 TITLE="CN - common noun (without determiner)"'
%!postproc(html): '(?i)(HREF="#Card")( TITLE="[^"]*")?'  '\1 TITLE="Card - cardinal number"'
%!postproc(html): '(?i)(HREF="#Cl")( TITLE="[^"]*")?'  '\1 TITLE="Cl - declarative clause, with all tenses"'
%!postproc(html): '(?i)(HREF="#Comp")( TITLE="[^"]*")?'  '\1 TITLE="Comp - complement of copula, such as AP"'
%!postproc(html): '(?i)(HREF="#Conj")( TITLE="[^"]*")?'  '\1 TITLE="Conj - conjunction"'
%!postproc(html): '(?i)(HREF="#Det")( TITLE="[^"]*")?'  '\1 TITLE="Det - determiner phrase"'
%!postproc(html): '(?i)(HREF="#Digits")( TITLE="[^"]*")?'  '\1 TITLE="Digits - cardinal or ordinal in digits"'
%!postproc(html): '(?i)(HREF="#IAdv")( TITLE="[^"]*")?'  '\1 TITLE="IAdv - interrogative adverb"'
%!postproc(html): '(?i)(HREF="#IComp")( TITLE="[^"]*")?'  '\1 TITLE="IComp - interrogative complement of copula"'
%!postproc(html): '(?i)(HREF="#IDet")( TITLE="[^"]*")?'  '\1 TITLE="IDet - interrogative determiner"'
%!postproc(html): '(?i)(HREF="#IP")( TITLE="[^"]*")?'  '\1 TITLE="IP - interrogative pronoun"'
%!postproc(html): '(?i)(HREF="#Imp")( TITLE="[^"]*")?'  '\1 TITLE="Imp - imperative"'
%!postproc(html): '(?i)(HREF="#Interj")( TITLE="[^"]*")?'  '\1 TITLE="Interj - interjection"'
%!postproc(html): '(?i)(HREF="#N")( TITLE="[^"]*")?'  '\1 TITLE="N - common noun"'
%!postproc(html): '(?i)(HREF="#N2")( TITLE="[^"]*")?'  '\1 TITLE="N2 - relational noun"'
%!postproc(html): '(?i)(HREF="#N3")( TITLE="[^"]*")?'  '\1 TITLE="N3 - three-place relational noun"'
%!postproc(html): '(?i)(HREF="#NP")( TITLE="[^"]*")?'  '\1 TITLE="NP - noun phrase (subject or object)"'
%!postproc(html): '(?i)(HREF="#Num")( TITLE="[^"]*")?'  '\1 TITLE="Num - number determining element"'
%!postproc(html): '(?i)(HREF="#Numeral")( TITLE="[^"]*")?'  '\1 TITLE="Numeral - cardinal or ordinal in words"'
%!postproc(html): '(?i)(HREF="#Ord")( TITLE="[^"]*")?'  '\1 TITLE="Ord - ordinal number (used in Det)"'
%!postproc(html): '(?i)(HREF="#PConj")( TITLE="[^"]*")?'  '\1 TITLE="PConj - phrase-beginning conjunction"'
%!postproc(html): '(?i)(HREF="#PN")( TITLE="[^"]*")?'  '\1 TITLE="PN - proper name"'
%!postproc(html): '(?i)(HREF="#Phr")( TITLE="[^"]*")?'  '\1 TITLE="Phr - phrase in a text"'
%!postproc(html): '(?i)(HREF="#Pol")( TITLE="[^"]*")?'  '\1 TITLE="Pol - polarity"'
%!postproc(html): '(?i)(HREF="#Predet")( TITLE="[^"]*")?'  '\1 TITLE="Predet - predeterminer (prefixed Quant)"'
%!postproc(html): '(?i)(HREF="#Prep")( TITLE="[^"]*")?'  '\1 TITLE="Prep - preposition, or just case"'
%!postproc(html): '(?i)(HREF="#Pron")( TITLE="[^"]*")?'  '\1 TITLE="Pron - personal pronoun"'
%!postproc(html): '(?i)(HREF="#QCl")( TITLE="[^"]*")?'  '\1 TITLE="QCl - question clause, with all tenses"'
%!postproc(html): '(?i)(HREF="#QS")( TITLE="[^"]*")?'  '\1 TITLE="QS - question"'
%!postproc(html): '(?i)(HREF="#Quant")( TITLE="[^"]*")?'  '\1 TITLE="Quant - quantifier ('nucleus' of Det)"'
%!postproc(html): '(?i)(HREF="#RCl")( TITLE="[^"]*")?'  '\1 TITLE="RCl - relative clause, with all tenses"'
%!postproc(html): '(?i)(HREF="#RP")( TITLE="[^"]*")?'  '\1 TITLE="RP - relative pronoun"'
%!postproc(html): '(?i)(HREF="#RS")( TITLE="[^"]*")?'  '\1 TITLE="RS - relative"'
%!postproc(html): '(?i)(HREF="#S")( TITLE="[^"]*")?'  '\1 TITLE="S - declarative sentence"'
%!postproc(html): '(?i)(HREF="#SC")( TITLE="[^"]*")?'  '\1 TITLE="SC - embedded sentence or question"'
%!postproc(html): '(?i)(HREF="#Subj")( TITLE="[^"]*")?'  '\1 TITLE="Subj - subjunction"'
%!postproc(html): '(?i)(HREF="#Temp")( TITLE="[^"]*")?'  '\1 TITLE="Temp - temporal and aspectual features"'
%!postproc(html): '(?i)(HREF="#Tense")( TITLE="[^"]*")?'  '\1 TITLE="Tense - tense"'
%!postproc(html): '(?i)(HREF="#Text")( TITLE="[^"]*")?'  '\1 TITLE="Text - text consisting of several phrases"'
%!postproc(html): '(?i)(HREF="#Utt")( TITLE="[^"]*")?'  '\1 TITLE="Utt - sentence, question, word..."'
%!postproc(html): '(?i)(HREF="#V")( TITLE="[^"]*")?'  '\1 TITLE="V - one-place verb"'
%!postproc(html): '(?i)(HREF="#V2")( TITLE="[^"]*")?'  '\1 TITLE="V2 - two-place verb"'
%!postproc(html): '(?i)(HREF="#V2A")( TITLE="[^"]*")?'  '\1 TITLE="V2A - verb with NP and AP complement"'
%!postproc(html): '(?i)(HREF="#V2Q")( TITLE="[^"]*")?'  '\1 TITLE="V2Q - verb with NP and Q complement"'
%!postproc(html): '(?i)(HREF="#V2S")( TITLE="[^"]*")?'  '\1 TITLE="V2S - verb with NP and S complement"'
%!postproc(html): '(?i)(HREF="#V2V")( TITLE="[^"]*")?'  '\1 TITLE="V2V - verb with NP and V complement"'
%!postproc(html): '(?i)(HREF="#V3")( TITLE="[^"]*")?'  '\1 TITLE="V3 - three-place verb"'
%!postproc(html): '(?i)(HREF="#VA")( TITLE="[^"]*")?'  '\1 TITLE="VA - adjective-complement verb"'
%!postproc(html): '(?i)(HREF="#VP")( TITLE="[^"]*")?'  '\1 TITLE="VP - verb phrase"'
%!postproc(html): '(?i)(HREF="#VPSlash")( TITLE="[^"]*")?'  '\1 TITLE="VPSlash - verb phrase missing complement"'
%!postproc(html): '(?i)(HREF="#VQ")( TITLE="[^"]*")?'  '\1 TITLE="VQ - question-complement verb"'
%!postproc(html): '(?i)(HREF="#VS")( TITLE="[^"]*")?'  '\1 TITLE="VS - sentence-complement verb"'
%!postproc(html): '(?i)(HREF="#VV")( TITLE="[^"]*")?'  '\1 TITLE="VV - verb-phrase-complement verb"'
%!postproc(html): '(?i)(HREF="#Voc")( TITLE="[^"]*")?'  '\1 TITLE="Voc - vocative or "please""'
%!include: synopsis-intro.txt
=Categories=


Source 1: [``http://www.grammaticalframework.org/lib/resource/src/abstract/Common.gf`` ../src/abstract/Common.gf]


Source 2: [``http://www.grammaticalframework.org/lib/resource/src/abstract/Cat.gf`` ../src/abstract/Cat.gf]


==A hierarchic view==

%!include: categories-intro.txt
==Explanations==

|| Category  | Explanation  | Example  ||
| [A #A] | one-place adjective | //warm// |
| [A2 #A2] | two-place adjective | //divisible// |
| [AP #AP] | adjectival phrase | //very warm// |
| [AdA #AdA] | adjective-modifying adverb | //very// |
| [AdN #AdN] | numeral-modifying adverb | //more than// |
| [AdV #AdV] | adverb directly attached to verb | //always// |
| [Adv #Adv] | verb-phrase-modifying adverb | //in the house// |
| [Ant #Ant] | anteriority | simultaneous, anterior |
| [CAdv #CAdv] | comparative adverb | //more// |
| [CN #CN] | common noun (without determiner) | //red house// |
| [Card #Card] | cardinal number | //seven// |
| [Cl #Cl] | declarative clause, with all tenses | //she looks at this// |
| [Comp #Comp] | complement of copula, such as AP | //very warm// |
| [Conj #Conj] | conjunction | //and// |
| [Det #Det] | determiner phrase | //those seven// |
| [Digits #Digits] | cardinal or ordinal in digits | //1,000/1,000th// |
| [IAdv #IAdv] | interrogative adverb | //why// |
| [IComp #IComp] | interrogative complement of copula | //where// |
| [IDet #IDet] | interrogative determiner | //how many// |
| [IP #IP] | interrogative pronoun | //who// |
| [Imp #Imp] | imperative | //look at this// |
| [Interj #Interj] | interjection | //alas// |
| [N #N] | common noun | //house// |
| [N2 #N2] | relational noun | //son// |
| [N3 #N3] | three-place relational noun | //connection// |
| [NP #NP] | noun phrase (subject or object) | //the red house// |
| [Num #Num] | number determining element | //seven// |
| [Numeral #Numeral] | cardinal or ordinal in words | //five/fifth// |
| [Ord #Ord] | ordinal number (used in Det) | //seventh// |
| [PConj #PConj] | phrase-beginning conjunction | //therefore// |
| [PN #PN] | proper name | //Paris// |
| [Phr #Phr] | phrase in a text | //but be quiet please// |
| [Pol #Pol] | polarity | positive, negative |
| [Predet #Predet] | predeterminer (prefixed Quant) | //all// |
| [Prep #Prep] | preposition, or just case | //in// |
| [Pron #Pron] | personal pronoun | //she// |
| [QCl #QCl] | question clause, with all tenses | //why does she walk// |
| [QS #QS] | question | //where did she live// |
| [Quant #Quant] | quantifier ('nucleus' of Det) | //this/these// |
| [RCl #RCl] | relative clause, with all tenses | //in which she lives// |
| [RP #RP] | relative pronoun | //in which// |
| [RS #RS] | relative | //in which she lived// |
| [S #S] | declarative sentence | //she lived here// |
| [SC #SC] | embedded sentence or question | //that it rains// |
| [Subj #Subj] | subjunction | //if// |
| [Temp #Temp] | temporal and aspectual features | past anterior |
| [Tense #Tense] | tense | present, past, future |
| [Text #Text] | text consisting of several phrases | //He is here. Why?// |
| [Utt #Utt] | sentence, question, word... | //be quiet// |
| [V #V] | one-place verb | //sleep// |
| [V2 #V2] | two-place verb | //love// |
| [V2A #V2A] | verb with NP and AP complement | //paint// |
| [V2Q #V2Q] | verb with NP and Q complement | //ask// |
| [V2S #V2S] | verb with NP and S complement | //tell// |
| [V2V #V2V] | verb with NP and V complement | //cause// |
| [V3 #V3] | three-place verb | //show// |
| [VA #VA] | adjective-complement verb | //look// |
| [VP #VP] | verb phrase | //is very warm// |
| [VPSlash #VPSlash] | verb phrase missing complement | //give to John// |
| [VQ #VQ] | question-complement verb | //wonder// |
| [VS #VS] | sentence-complement verb | //claim// |
| [VV #VV] | verb-phrase-complement verb | //want// |
| [Voc #Voc] | vocative or "please" | //my darling// |


=Syntax Rules and Structural Words=


Source 1: [``http://www.grammaticalframework.org/lib/resource/src/api/Constructors.gf`` ../src/api/Constructors.gf]


Source 2: [``http://www.grammaticalframework.org/lib/resource/src/abstract/Structural.gf`` ../src/abstract/Structural.gf]


==A - one-place adjective==[A]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==A2 - two-place adjective==[A2]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==AP - adjectival phrase==[AP]
|| Function  | Type  | Example  ||
| ``comparAP`` | [A #A] ``->`` [AP #AP] | //warmer// |
| ``mkAP`` | [A #A] ``->`` [AP #AP] | //warm// |
| ``mkAP`` | [A #A] ``->`` [NP #NP] ``->`` [AP #AP] | //warmer than Paris// |
| ``mkAP`` | [A2 #A2] ``->`` [NP #NP] ``->`` [AP #AP] | //married to her// |
| ``mkAP`` | [A2 #A2] ``->`` [AP #AP] | //married// |
| ``mkAP`` | [AP #AP] ``->`` [S #S] ``->`` [AP #AP] | //probable that John walks// |
| ``mkAP`` | [AP #AP] ``->`` [QS #QS] ``->`` [AP #AP] | //uncertain if John walks// |
| ``mkAP`` | [AP #AP] ``->`` [VP #VP] ``->`` [AP #AP] | //ready to go// |
| ``mkAP`` | [AP #AP] ``->`` [SC #SC] ``->`` [AP #AP] | //ready to go// |
| ``mkAP`` | [AdA #AdA] ``->`` [A #A] ``->`` [AP #AP] | //very old// |
| ``mkAP`` | [AdA #AdA] ``->`` [AP #AP] ``->`` [AP #AP] | //very very old// |
| ``mkAP`` | [Conj #Conj] ``->`` [AP #AP] ``->`` [AP #AP] ``->`` [AP #AP] | //old and big// |
| ``mkAP`` | [Conj #Conj] ``->`` [ListAP #ListAP] ``->`` [AP #AP] | //old, big and warm// |
| ``mkAP`` | [Ord #Ord] ``->`` [AP #AP] | //oldest// |
| ``mkAP`` | [CAdv #CAdv] ``->`` [AP #AP] ``->`` [NP #NP] ``->`` [AP #AP] | //as old as John// |
| ``reflAP`` | [A2 #A2] ``->`` [AP #AP] | //married to himself// |
==AdA - adjective-modifying adverb==[AdA]
|| Function  | Type  | Example  ||
| ``almost_AdA`` | [AdA #AdA] | //almost// |
| ``quite_Adv`` | [AdA #AdA] | //quite// |
| ``so_AdA`` | [AdA #AdA] | //so// |
| ``too_AdA`` | [AdA #AdA] | //too// |
| ``very_AdA`` | [AdA #AdA] | //very// |
==AdN - numeral-modifying adverb==[AdN]
|| Function  | Type  | Example  ||
| ``almost_AdN`` | [AdN #AdN] | //almost// |
| ``at_least_AdN`` | [AdN #AdN] | //at// |
| ``at_most_AdN`` | [AdN #AdN] | //at// |
| ``mkAdN`` | [CAdv #CAdv] ``->`` [AdN #AdN] | //more than// |
==AdV - adverb directly attached to verb==[AdV]
|| Function  | Type  | Example  ||
| ``always_AdV`` | [AdV #AdV] | //always// |
==Adv - verb-phrase-modifying adverb==[Adv]
|| Function  | Type  | Example  ||
| ``everywhere_Adv`` | [Adv #Adv] | //everywhere// |
| ``here7from_Adv`` | [Adv #Adv] | //from here// |
| ``here7to_Adv`` | [Adv #Adv] | //to here// |
| ``here_Adv`` | [Adv #Adv] | //here// |
| ``mkAdv`` | [A #A] ``->`` [Adv #Adv] | //warmly// |
| ``mkAdv`` | [Prep #Prep] ``->`` [NP #NP] ``->`` [Adv #Adv] | //in the house// |
| ``mkAdv`` | [Subj #Subj] ``->`` [S #S] ``->`` [Adv #Adv] | //when John walks// |
| ``mkAdv`` | [CAdv #CAdv] ``->`` [A #A] ``->`` [NP #NP] ``->`` [Adv #Adv] | //more warmly than John// |
| ``mkAdv`` | [CAdv #CAdv] ``->`` [A #A] ``->`` [S #S] ``->`` [Adv #Adv] | //more warmly than he runs// |
| ``mkAdv`` | [AdA #AdA] ``->`` [Adv #Adv] ``->`` [Adv #Adv] | //very warmly// |
| ``mkAdv`` | [Conj #Conj] ``->`` [Adv #Adv] ``->`` [Adv #Adv] ``->`` [Adv #Adv] | //here and now// |
| ``mkAdv`` | [Conj #Conj] ``->`` [ListAdv #ListAdv] ``->`` [Adv #Adv] | //with John, here and now// |
| ``somewhere_Adv`` | [Adv #Adv] | //somewhere// |
| ``there7from_Adv`` | [Adv #Adv] | //from there// |
| ``there7to_Adv`` | [Adv #Adv] | //to there// |
| ``there_Adv`` | [Adv #Adv] | //there// |
==Ant - anteriority==[Ant]
|| Function  | Type  | Example  ||
| ``anteriorAnt`` | [Ant #Ant] | //John has walked// |
| ``simultaneousAnt`` | [Ant #Ant] | //John walks [default]// |
==CAdv - comparative adverb==[CAdv]
|| Function  | Type  | Example  ||
| ``as_CAdv`` | [CAdv #CAdv] | //as// |
| ``less_CAdv`` | [CAdv #CAdv] | //less// |
| ``more_CAdv`` | [CAdv #CAdv] | //more// |
==CN - common noun (without determiner)==[CN]
|| Function  | Type  | Example  ||
| ``mkCN`` | [N #N] ``->`` [CN #CN] | //house// |
| ``mkCN`` | [N2 #N2] ``->`` [NP #NP] ``->`` [CN #CN] | //mother of John// |
| ``mkCN`` | [N3 #N3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [CN #CN] | //distance from this city to Paris// |
| ``mkCN`` | [N2 #N2] ``->`` [CN #CN] | //mother// |
| ``mkCN`` | [N3 #N3] ``->`` [CN #CN] | //distance// |
| ``mkCN`` | [A #A] ``->`` [N #N] ``->`` [CN #CN] | //big house// |
| ``mkCN`` | [A #A] ``->`` [CN #CN] ``->`` [CN #CN] | //big blue house// |
| ``mkCN`` | [AP #AP] ``->`` [N #N] ``->`` [CN #CN] | //very big house// |
| ``mkCN`` | [AP #AP] ``->`` [CN #CN] ``->`` [CN #CN] | //very big blue house// |
| ``mkCN`` | [N #N] ``->`` [RS #RS] ``->`` [CN #CN] | //house that John owns// |
| ``mkCN`` | [CN #CN] ``->`` [RS #RS] ``->`` [CN #CN] | //big house that John loves// |
| ``mkCN`` | [N #N] ``->`` [Adv #Adv] ``->`` [CN #CN] | //house on the hill// |
| ``mkCN`` | [CN #CN] ``->`` [Adv #Adv] ``->`` [CN #CN] | //big house on the hill// |
| ``mkCN`` | [CN #CN] ``->`` [S #S] ``->`` [CN #CN] | //rule that John walks// |
| ``mkCN`` | [CN #CN] ``->`` [QS #QS] ``->`` [CN #CN] | //question if John walks// |
| ``mkCN`` | [CN #CN] ``->`` [VP #VP] ``->`` [CN #CN] | //reason to walk// |
| ``mkCN`` | [CN #CN] ``->`` [SC #SC] ``->`` [CN #CN] | //reason to walk// |
| ``mkCN`` | [N #N] ``->`` [NP #NP] ``->`` [CN #CN] | //king John// |
| ``mkCN`` | [CN #CN] ``->`` [NP #NP] ``->`` [CN #CN] | //old king John// |
==Card - cardinal number==[Card]
|| Function  | Type  | Example  ||
| ``mkCard`` | ``Str`` ``->`` [Card #Card] | //thirty-five (given as "35")// |
| ``mkCard`` | [Numeral #Numeral] ``->`` [Card #Card] | //twenty// |
| ``mkCard`` | [Digits #Digits] ``->`` [Card #Card] | //51// |
| ``mkCard`` | [AdN #AdN] ``->`` [Card #Card] ``->`` [Card #Card] | //almost fifty// |
==Cl - declarative clause, with all tenses==[Cl]
|| Function  | Type  | Example  ||
| ``genericCl`` | [VP #VP] ``->`` [Cl #Cl] | //one walks// |
| ``mkCl`` | [NP #NP] ``->`` [V #V] ``->`` [Cl #Cl] | //John walks// |
| ``mkCl`` | [NP #NP] ``->`` [V2 #V2] ``->`` [NP #NP] ``->`` [Cl #Cl] | //John loves her// |
| ``mkCl`` | [NP #NP] ``->`` [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [Cl #Cl] | //John sends it to her// |
| ``mkCl`` | [NP #NP] ``->`` [VV #VV] ``->`` [VP #VP] ``->`` [Cl #Cl] | //John wants to walk// |
| ``mkCl`` | [NP #NP] ``->`` [VS #VS] ``->`` [S #S] ``->`` [Cl #Cl] | //John says that she walks// |
| ``mkCl`` | [NP #NP] ``->`` [VQ #VQ] ``->`` [QS #QS] ``->`` [Cl #Cl] | //John wonders who walks// |
| ``mkCl`` | [NP #NP] ``->`` [VA #VA] ``->`` [AP #AP] ``->`` [Cl #Cl] | //John becomes old// |
| ``mkCl`` | [NP #NP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [Cl #Cl] | //John paints it red// |
| ``mkCl`` | [NP #NP] ``->`` [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [Cl #Cl] | //John tells her that we walk// |
| ``mkCl`` | [NP #NP] ``->`` [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [Cl #Cl] | //John asks her who walks// |
| ``mkCl`` | [NP #NP] ``->`` [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [Cl #Cl] | //John forces her to walk// |
| ``mkCl`` | [NP #NP] ``->`` [A #A] ``->`` [Cl #Cl] | //John is old// |
| ``mkCl`` | [NP #NP] ``->`` [A #A] ``->`` [NP #NP] ``->`` [Cl #Cl] | //John is older than her// |
| ``mkCl`` | [NP #NP] ``->`` [A2 #A2] ``->`` [NP #NP] ``->`` [Cl #Cl] | //John is married to her// |
| ``mkCl`` | [NP #NP] ``->`` [AP #AP] ``->`` [Cl #Cl] | //John is very old// |
| ``mkCl`` | [NP #NP] ``->`` [NP #NP] ``->`` [Cl #Cl] | //John is the man// |
| ``mkCl`` | [NP #NP] ``->`` [N #N] ``->`` [Cl #Cl] | //John is a man// |
| ``mkCl`` | [NP #NP] ``->`` [CN #CN] ``->`` [Cl #Cl] | //John is an old man// |
| ``mkCl`` | [NP #NP] ``->`` [Adv #Adv] ``->`` [Cl #Cl] | //John is here// |
| ``mkCl`` | [NP #NP] ``->`` [VP #VP] ``->`` [Cl #Cl] | //John always walks here// |
| ``mkCl`` | [N #N] ``->`` [Cl #Cl] | //there is a house// |
| ``mkCl`` | [CN #CN] ``->`` [Cl #Cl] | //there is an old house// |
| ``mkCl`` | [NP #NP] ``->`` [Cl #Cl] | //there are five houses// |
| ``mkCl`` | [NP #NP] ``->`` [RS #RS] ``->`` [Cl #Cl] | //it is John who walks// |
| ``mkCl`` | [Adv #Adv] ``->`` [S #S] ``->`` [Cl #Cl] | //it is here he walks// |
| ``mkCl`` | [V #V] ``->`` [Cl #Cl] | //it rains// |
| ``mkCl`` | [VP #VP] ``->`` [Cl #Cl] | //it is raining// |
| ``mkCl`` | [SC #SC] ``->`` [VP #VP] ``->`` [Cl #Cl] | //mkCl// |
==ClSlash==[ClSlash]
|| Function  | Type  | Example  ||
| ``mkClSlash`` | [NP #NP] ``->`` [VPSlash #VPSlash] ``->`` [ClSlash #ClSlash] | //(whom) he sees here// |
| ``mkClSlash`` | [NP #NP] ``->`` [V2 #V2] ``->`` [ClSlash #ClSlash] | //(whom) he sees// |
| ``mkClSlash`` | [NP #NP] ``->`` [VV #VV] ``->`` [V2 #V2] ``->`` [ClSlash #ClSlash] | //(whom) he wants to see// |
| ``mkClSlash`` | [Cl #Cl] ``->`` [Prep #Prep] ``->`` [ClSlash #ClSlash] | //(with whom) he walks// |
| ``mkClSlash`` | [ClSlash #ClSlash] ``->`` [Adv #Adv] ``->`` [ClSlash #ClSlash] | //(whom) he sees tomorrow// |
| ``mkClSlash`` | [NP #NP] ``->`` [VS #VS] ``->`` [SSlash #SSlash] ``->`` [ClSlash #ClSlash] | //(whom) she says that he loves// |
==Comp - complement of copula, such as AP==[Comp]
|| Function  | Type  | Example  ||
| ``mkComp`` | [AP #AP] ``->`` [Comp #Comp] | //very old// |
| ``mkComp`` | [NP #NP] ``->`` [Comp #Comp] | //this man// |
| ``mkComp`` | [Adv #Adv] ``->`` [Comp #Comp] | //here// |
==Conj - conjunction==[Conj]
|| Function  | Type  | Example  ||
| ``and_Conj`` | [Conj #Conj] | //and// |
| ``both7and_DConj`` | [Conj #Conj] | //both...and// |
| ``either7or_DConj`` | [Conj #Conj] | //either...or// |
| ``if_then_Conj`` | [Conj #Conj] | //if// |
| ``or_Conj`` | [Conj #Conj] | //or// |
==Det - determiner phrase==[Det]
|| Function  | Type  | Example  ||
| ``aPl_Det`` | [Det #Det] | //(houses)// |
| ``aSg_Det`` | [Det #Det] | //a (house)// |
| ``a_Det`` | [Det #Det] | //a (house)// |
| ``every_Det`` | [Det #Det] | //every// |
| ``few_Det`` | [Det #Det] | //few// |
| ``many_Det`` | [Det #Det] | //many// |
| ``mkDet`` | [Quant #Quant] ``->`` [Det #Det] | //this// |
| ``mkDet`` | [Quant #Quant] ``->`` [Card #Card] ``->`` [Det #Det] | //these five// |
| ``mkDet`` | [Quant #Quant] ``->`` [Ord #Ord] ``->`` [Det #Det] | //the best// |
| ``mkDet`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [Ord #Ord] ``->`` [Det #Det] | //these five best// |
| ``mkDet`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [Det #Det] | //these five// |
| ``mkDet`` | [Card #Card] ``->`` [Det #Det] | //forty// |
| ``mkDet`` | [Digits #Digits] ``->`` [Det #Det] | //51// |
| ``mkDet`` | [Numeral #Numeral] ``->`` [Det #Det] | //five// |
| ``mkDet`` | [Pron #Pron] ``->`` [Det #Det] | //my// |
| ``mkDet`` | [Pron #Pron] ``->`` [Num #Num] ``->`` [Det #Det] | //my five// |
| ``much_Det`` | [Det #Det] | //much// |
| ``somePl_Det`` | [Det #Det] | //somePl// |
| ``someSg_Det`` | [Det #Det] | //someSg// |
| ``thePl_Det`` | [Det #Det] | //the (houses)// |
| ``theSg_Det`` | [Det #Det] | //the (houses)// |
| ``the_Det`` | [Det #Det] | //the (house)// |
==Dig==[Dig]
|| Function  | Type  | Example  ||
| ``n0_Dig`` | [Dig #Dig] | //0// |
| ``n1_Dig`` | [Dig #Dig] | //1// |
| ``n2_Dig`` | [Dig #Dig] | //2// |
| ``n3_Dig`` | [Dig #Dig] | //3// |
| ``n4_Dig`` | [Dig #Dig] | //4// |
| ``n5_Dig`` | [Dig #Dig] | //5// |
| ``n6_Dig`` | [Dig #Dig] | //6// |
| ``n7_Dig`` | [Dig #Dig] | //7// |
| ``n8_Dig`` | [Dig #Dig] | //8// |
| ``n9_Dig`` | [Dig #Dig] | //9// |
==Digits - cardinal or ordinal in digits==[Digits]
|| Function  | Type  | Example  ||
| ``mkDigits`` | ``Str`` ``->`` [Digits #Digits] | //35 (from string "35")// |
| ``mkDigits`` | [Dig #Dig] ``->`` [Digits #Digits] | //4// |
| ``mkDigits`` | [Dig #Dig] ``->`` [Digits #Digits] ``->`` [Digits #Digits] | //1,233,432// |
==IAdv - interrogative adverb==[IAdv]
|| Function  | Type  | Example  ||
| ``how8much_IAdv`` | [IAdv #IAdv] | //how8much// |
| ``how_IAdv`` | [IAdv #IAdv] | //how// |
| ``mkIAdv`` | [Prep #Prep] ``->`` [IP #IP] ``->`` [IAdv #IAdv] | //in which city// |
| ``mkIAdv`` | [IAdv #IAdv] ``->`` [Adv #Adv] ``->`` [IAdv #IAdv] | //where in Paris// |
| ``when_IAdv`` | [IAdv #IAdv] | //when// |
| ``where_IAdv`` | [IAdv #IAdv] | //where// |
| ``why_IAdv`` | [IAdv #IAdv] | //why// |
==IComp - interrogative complement of copula==[IComp]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==IDet - interrogative determiner==[IDet]
|| Function  | Type  | Example  ||
| ``how8many_IDet`` | [IDet #IDet] | //how8many// |
| ``mkIDet`` | [IQuant #IQuant] ``->`` [Num #Num] ``->`` [IDet #IDet] | //which (songs)// |
| ``mkIDet`` | [IQuant #IQuant] ``->`` [IDet #IDet] | //mkIDet// |
| ``whichPl_IDet`` | [IDet #IDet] | //whichPl// |
| ``which_IDet`` | [IDet #IDet] | //which// |
==IP - interrogative pronoun==[IP]
|| Function  | Type  | Example  ||
| ``mkIP`` | [IDet #IDet] ``->`` [CN #CN] ``->`` [IP #IP] | //which five big cities// |
| ``mkIP`` | [IDet #IDet] ``->`` [N #N] ``->`` [IP #IP] | //which five cities// |
| ``mkIP`` | [IDet #IDet] ``->`` [IP #IP] | //which five// |
| ``mkIP`` | [IQuant #IQuant] ``->`` [CN #CN] ``->`` [IP #IP] | //which big cities// |
| ``mkIP`` | [IQuant #IQuant] ``->`` [Num #Num] ``->`` [CN #CN] ``->`` [IP #IP] | //which five cities// |
| ``mkIP`` | [IQuant #IQuant] ``->`` [N #N] ``->`` [IP #IP] | //which city// |
| ``mkIP`` | [IP #IP] ``->`` [Adv #Adv] ``->`` [IP #IP] | //who in Paris// |
| ``whatPl_IP`` | [IP #IP] | //what (plural)// |
| ``whatSg_IP`` | [IP #IP] | //what (singular)// |
| ``what_IP`` | [IP #IP] | //what (singular)// |
| ``whoPl_IP`` | [IP #IP] | //who (plural)// |
| ``whoSg_IP`` | [IP #IP] | //who (singular)// |
| ``who_IP`` | [IP #IP] | //who (singular)// |
==IQuant==[IQuant]
|| Function  | Type  | Example  ||
| ``which_IQuant`` | [IQuant #IQuant] | //which// |
==Imp - imperative==[Imp]
|| Function  | Type  | Example  ||
| ``mkImp`` | [VP #VP] ``->`` [Imp #Imp] | //go// |
| ``mkImp`` | [V #V] ``->`` [Imp #Imp] | //take it// |
| ``mkImp`` | [V2 #V2] ``->`` [NP #NP] ``->`` [Imp #Imp] | //come here now// |
==ImpForm==[ImpForm]
|| Function  | Type  | Example  ||
| ``pluralImpForm`` | [ImpForm #ImpForm] | //help yourselves// |
| ``politeImpForm`` | [ImpForm #ImpForm] | //help yourself [polite singular]// |
| ``singularImpForm`` | [ImpForm #ImpForm] | //help yourself [default]// |
==Interj - interjection==[Interj]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==ListAP==[ListAP]
|| Function  | Type  | Example  ||
| ``mkListAP`` | [AP #AP] ``->`` [AP #AP] ``->`` [ListAP #ListAP] | //mkListAP// |
| ``mkListAP`` | [AP #AP] ``->`` [ListAP #ListAP] ``->`` [ListAP #ListAP] | //mkListAP// |
==ListAdv==[ListAdv]
|| Function  | Type  | Example  ||
| ``mkListAdv`` | [Adv #Adv] ``->`` [Adv #Adv] ``->`` [ListAdv #ListAdv] | //mkListAdv// |
| ``mkListAdv`` | [Adv #Adv] ``->`` [ListAdv #ListAdv] ``->`` [ListAdv #ListAdv] | //mkListAdv// |
==ListNP==[ListNP]
|| Function  | Type  | Example  ||
| ``mkListNP`` | [NP #NP] ``->`` [NP #NP] ``->`` [ListNP #ListNP] | //mkListNP// |
| ``mkListNP`` | [NP #NP] ``->`` [ListNP #ListNP] ``->`` [ListNP #ListNP] | //mkListNP// |
==ListRS==[ListRS]
|| Function  | Type  | Example  ||
| ``mkListRS`` | [RS #RS] ``->`` [RS #RS] ``->`` [ListRS #ListRS] | //mkListRS// |
| ``mkListRS`` | [RS #RS] ``->`` [ListRS #ListRS] ``->`` [ListRS #ListRS] | //mkListRS// |
==ListS==[ListS]
|| Function  | Type  | Example  ||
| ``mkListS`` | [S #S] ``->`` [S #S] ``->`` [ListS #ListS] | //mkListS// |
| ``mkListS`` | [S #S] ``->`` [ListS #ListS] ``->`` [ListS #ListS] | //mkListS// |
==N - common noun==[N]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==N2 - relational noun==[N2]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==N3 - three-place relational noun==[N3]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==NP - noun phrase (subject or object)==[NP]
|| Function  | Type  | Example  ||
| ``everybody_NP`` | [NP #NP] | //everybody// |
| ``everything_NP`` | [NP #NP] | //everything// |
| ``mkNP`` | [Quant #Quant] ``->`` [N #N] ``->`` [NP #NP] | //this man// |
| ``mkNP`` | [Quant #Quant] ``->`` [CN #CN] ``->`` [NP #NP] | //this old man// |
| ``mkNP`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [CN #CN] ``->`` [NP #NP] | //these five old men// |
| ``mkNP`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [N #N] ``->`` [NP #NP] | //these five men// |
| ``mkNP`` | [Det #Det] ``->`` [CN #CN] ``->`` [NP #NP] | //the first old man// |
| ``mkNP`` | [Det #Det] ``->`` [N #N] ``->`` [NP #NP] | //the first man// |
| ``mkNP`` | [Numeral #Numeral] ``->`` [CN #CN] ``->`` [NP #NP] | //fifty old men// |
| ``mkNP`` | [Numeral #Numeral] ``->`` [N #N] ``->`` [NP #NP] | //fifty men// |
| ``mkNP`` | [Digits #Digits] ``->`` [CN #CN] ``->`` [NP #NP] | //51 old men// |
| ``mkNP`` | [Digits #Digits] ``->`` [N #N] ``->`` [NP #NP] | //51 men// |
| ``mkNP`` | [Card #Card] ``->`` [CN #CN] ``->`` [NP #NP] | //forty-five old men// |
| ``mkNP`` | [Card #Card] ``->`` [N #N] ``->`` [NP #NP] | //forty-five men// |
| ``mkNP`` | [Pron #Pron] ``->`` [CN #CN] ``->`` [NP #NP] | //my old man// |
| ``mkNP`` | [Pron #Pron] ``->`` [N #N] ``->`` [NP #NP] | //my man// |
| ``mkNP`` | [PN #PN] ``->`` [NP #NP] | //John// |
| ``mkNP`` | [Pron #Pron] ``->`` [NP #NP] | //he// |
| ``mkNP`` | [Quant #Quant] ``->`` [NP #NP] | //this// |
| ``mkNP`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [NP #NP] | //these five// |
| ``mkNP`` | [Det #Det] ``->`` [NP #NP] | //these five best// |
| ``mkNP`` | [CN #CN] ``->`` [NP #NP] | //old beer// |
| ``mkNP`` | [N #N] ``->`` [NP #NP] | //beer// |
| ``mkNP`` | [Predet #Predet] ``->`` [NP #NP] ``->`` [NP #NP] | //only the man// |
| ``mkNP`` | [NP #NP] ``->`` [V2 #V2] ``->`` [NP #NP] | //the man seen// |
| ``mkNP`` | [NP #NP] ``->`` [Adv #Adv] ``->`` [NP #NP] | //Paris today// |
| ``mkNP`` | [NP #NP] ``->`` [RS #RS] ``->`` [NP #NP] | //John, who lives in Paris// |
| ``mkNP`` | [Conj #Conj] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [NP #NP] | //mkNP// |
| ``mkNP`` | [Conj #Conj] ``->`` [ListNP #ListNP] ``->`` [NP #NP] | //mkNP// |
| ``nobody_NP`` | [NP #NP] | //nobody// |
| ``nothing_NP`` | [NP #NP] | //nothing// |
| ``somebody_NP`` | [NP #NP] | //somebody// |
| ``something_NP`` | [NP #NP] | //something// |
==Num - number determining element==[Num]
|| Function  | Type  | Example  ||
| ``mkNum`` | ``Str`` ``->`` [Num #Num] | //thirty-five (given by "35")// |
| ``mkNum`` | [Numeral #Numeral] ``->`` [Num #Num] | //twenty// |
| ``mkNum`` | [Digits #Digits] ``->`` [Num #Num] | //21// |
| ``mkNum`` | [Digit #Digit] ``->`` [Num #Num] | //five// |
| ``mkNum`` | [Card #Card] ``->`` [Num #Num] | //almost ten// |
| ``mkNum`` | [AdN #AdN] ``->`` [Card #Card] ``->`` [Num #Num] | //almost ten// |
| ``pluralNum`` | [Num #Num] | //plural// |
| ``singularNum`` | [Num #Num] | //singular// |
==Numeral - cardinal or ordinal in words==[Numeral]
|| Function  | Type  | Example  ||
| ``mkNumeral`` | [Sub1000 #Sub1000] ``->`` [Numeral #Numeral] | //coerce 1..999// |
| ``mkNumeral`` | [Sub1000 #Sub1000] ``->`` [Sub1000 #Sub1000] ``->`` [Numeral #Numeral] | //1000m + n// |
| ``mkNumeral`` | ``Str`` ``->`` [Numeral #Numeral] | //thirty-five (given by "35")// |
| ``thousandfoldNumeral`` | [Sub1000 #Sub1000] ``->`` [Numeral #Numeral] | //1000n// |
==Ord - ordinal number (used in Det)==[Ord]
|| Function  | Type  | Example  ||
| ``mkOrd`` | [Numeral #Numeral] ``->`` [Ord #Ord] | //twentieth// |
| ``mkOrd`` | [Digits #Digits] ``->`` [Ord #Ord] | //51st// |
| ``mkOrd`` | [Digit #Digit] ``->`` [Ord #Ord] | //fifth// |
| ``mkOrd`` | [A #A] ``->`` [Ord #Ord] | //largest// |
==PConj - phrase-beginning conjunction==[PConj]
|| Function  | Type  | Example  ||
| ``but_PConj`` | [PConj #PConj] | //but// |
| ``mkPConj`` | [Conj #Conj] ``->`` [PConj #PConj] | //and// |
| ``otherwise_PConj`` | [PConj #PConj] | //otherwise// |
| ``therefore_PConj`` | [PConj #PConj] | //therefore// |
==PN - proper name==[PN]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==Phr - phrase in a text==[Phr]
|| Function  | Type  | Example  ||
| ``mkPhr`` | ([PConj #PConj]) ``->`` [Utt #Utt] ``->`` ([Voc #Voc]) ``->`` [Phr #Phr] | //but come here John// |
| ``mkPhr`` | [S #S] ``->`` [Phr #Phr] | //I go home// |
| ``mkPhr`` | [Cl #Cl] ``->`` [Phr #Phr] | //I go home// |
| ``mkPhr`` | [QS #QS] ``->`` [Phr #Phr] | //I go home// |
| ``mkPhr`` | [Imp #Imp] ``->`` [Phr #Phr] | //I go home// |
==Pol - polarity==[Pol]
|| Function  | Type  | Example  ||
| ``negativePol`` | [Pol #Pol] | //John doesn't walk// |
| ``positivePol`` | [Pol #Pol] | //John walks [default]// |
==Predet - predeterminer (prefixed Quant)==[Predet]
|| Function  | Type  | Example  ||
| ``all_Predet`` | [Predet #Predet] | //all// |
| ``most_Predet`` | [Predet #Predet] | //most// |
| ``not_Predet`` | [Predet #Predet] | //not// |
| ``only_Predet`` | [Predet #Predet] | //only// |
==Prep - preposition, or just case==[Prep]
|| Function  | Type  | Example  ||
| ``above_Prep`` | [Prep #Prep] | //above// |
| ``after_Prep`` | [Prep #Prep] | //after// |
| ``before_Prep`` | [Prep #Prep] | //before// |
| ``behind_Prep`` | [Prep #Prep] | //behind// |
| ``between_Prep`` | [Prep #Prep] | //between// |
| ``by8agent_Prep`` | [Prep #Prep] | //by (agent)// |
| ``by8means_Prep`` | [Prep #Prep] | //by (means of)// |
| ``during_Prep`` | [Prep #Prep] | //during// |
| ``except_Prep`` | [Prep #Prep] | //except// |
| ``for_Prep`` | [Prep #Prep] | //for// |
| ``from_Prep`` | [Prep #Prep] | //from// |
| ``in8front_Prep`` | [Prep #Prep] | //in front of// |
| ``in_Prep`` | [Prep #Prep] | //in// |
| ``on_Prep`` | [Prep #Prep] | //on// |
| ``part_Prep`` | [Prep #Prep] | //part// |
| ``possess_Prep`` | [Prep #Prep] | //of (possessive)// |
| ``through_Prep`` | [Prep #Prep] | //through// |
| ``to_Prep`` | [Prep #Prep] | //to// |
| ``under_Prep`` | [Prep #Prep] | //under// |
| ``with_Prep`` | [Prep #Prep] | //with// |
| ``without_Prep`` | [Prep #Prep] | //without// |
==Pron - personal pronoun==[Pron]
|| Function  | Type  | Example  ||
| ``he_Pron`` | [Pron #Pron] | //he// |
| ``i_Pron`` | [Pron #Pron] | //i// |
| ``it_Pron`` | [Pron #Pron] | //it// |
| ``she_Pron`` | [Pron #Pron] | //she// |
| ``they_Pron`` | [Pron #Pron] | //they// |
| ``we_Pron`` | [Pron #Pron] | //we// |
| ``youPl_Pron`` | [Pron #Pron] | //you (plural)// |
| ``youPol_Pron`` | [Pron #Pron] | //you (polite)// |
| ``youSg_Pron`` | [Pron #Pron] | //you (singular)// |
==Punct==[Punct]
|| Function  | Type  | Example  ||
| ``exclMarkPunct`` | [Punct #Punct] | //!// |
| ``fullStopPunct`` | [Punct #Punct] | //.// |
| ``questMarkPunct`` | [Punct #Punct] | //?// |
==QCl - question clause, with all tenses==[QCl]
|| Function  | Type  | Example  ||
| ``mkQCl`` | [Cl #Cl] ``->`` [QCl #QCl] | //does John walk// |
| ``mkQCl`` | [IP #IP] ``->`` [VP #VP] ``->`` [QCl #QCl] | //who walks// |
| ``mkQCl`` | [IP #IP] ``->`` [V #V] ``->`` [QCl #QCl] | //who walks// |
| ``mkQCl`` | [IP #IP] ``->`` [V2 #V2] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who loves her// |
| ``mkQCl`` | [IP #IP] ``->`` [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who sends it to her// |
| ``mkQCl`` | [IP #IP] ``->`` [VV #VV] ``->`` [VP #VP] ``->`` [QCl #QCl] | //who wants to walk// |
| ``mkQCl`` | [IP #IP] ``->`` [VS #VS] ``->`` [S #S] ``->`` [QCl #QCl] | //who says that she walks// |
| ``mkQCl`` | [IP #IP] ``->`` [VQ #VQ] ``->`` [QS #QS] ``->`` [QCl #QCl] | //who wonders who walks// |
| ``mkQCl`` | [IP #IP] ``->`` [VA #VA] ``->`` [AP #AP] ``->`` [QCl #QCl] | //who becomes old// |
| ``mkQCl`` | [IP #IP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [QCl #QCl] | //who paints it red// |
| ``mkQCl`` | [IP #IP] ``->`` [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [QCl #QCl] | //who tells her that we walk// |
| ``mkQCl`` | [IP #IP] ``->`` [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [QCl #QCl] | //who asks her who walks// |
| ``mkQCl`` | [IP #IP] ``->`` [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [QCl #QCl] | //who forces her to walk// |
| ``mkQCl`` | [IP #IP] ``->`` [A #A] ``->`` [QCl #QCl] | //who is old// |
| ``mkQCl`` | [IP #IP] ``->`` [A #A] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is older than her// |
| ``mkQCl`` | [IP #IP] ``->`` [A2 #A2] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is married to her// |
| ``mkQCl`` | [IP #IP] ``->`` [AP #AP] ``->`` [QCl #QCl] | //who is very old// |
| ``mkQCl`` | [IP #IP] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is the man// |
| ``mkQCl`` | [IP #IP] ``->`` [N #N] ``->`` [QCl #QCl] | //who is a man// |
| ``mkQCl`` | [IP #IP] ``->`` [CN #CN] ``->`` [QCl #QCl] | //who is an old man// |
| ``mkQCl`` | [IP #IP] ``->`` [Adv #Adv] ``->`` [QCl #QCl] | //who is here// |
| ``mkQCl`` | [IP #IP] ``->`` [NP #NP] ``->`` [V2 #V2] ``->`` [QCl #QCl] | //who does John love// |
| ``mkQCl`` | [IP #IP] ``->`` [ClSlash #ClSlash] ``->`` [QCl #QCl] | //who does John today// |
| ``mkQCl`` | [IAdv #IAdv] ``->`` [Cl #Cl] ``->`` [QCl #QCl] | //why does John walk// |
| ``mkQCl`` | [Prep #Prep] ``->`` [IP #IP] ``->`` [Cl #Cl] ``->`` [QCl #QCl] | //with whom does John walk// |
| ``mkQCl`` | [IAdv #IAdv] ``->`` [NP #NP] ``->`` [QCl #QCl] | //where is John// |
| ``mkQCl`` | [IComp #IComp] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is this man// |
| ``mkQCl`` | [IP #IP] ``->`` [QCl #QCl] | //which houses are there// |
==QS - question==[QS]
|| Function  | Type  | Example  ||
| ``mkQS`` | ([Tense #Tense]) ``->`` ([Ant #Ant]) ``->`` ([Pol #Pol]) ``->`` [QCl #QCl] ``->`` [QS #QS] | //who wouldn't have walked// |
| ``mkQS`` | [Cl #Cl] ``->`` [QS #QS] | //mkQS// |
==Quant - quantifier ('nucleus' of Det)==[Quant]
|| Function  | Type  | Example  ||
| ``a_Quant`` | [Quant #Quant] | //a// |
| ``mkQuant`` | [Pron #Pron] ``->`` [Quant #Quant] | //my// |
| ``no_Quant`` | [Quant #Quant] | //no// |
| ``that_Quant`` | [Quant #Quant] | //that// |
| ``the_Quant`` | [Quant #Quant] | //the// |
| ``this_Quant`` | [Quant #Quant] | //this// |
==RCl - relative clause, with all tenses==[RCl]
|| Function  | Type  | Example  ||
| ``mkRCl`` | [RP #RP] ``->`` [VP #VP] ``->`` [RCl #RCl] | //that loves John// |
| ``mkRCl`` | [RP #RP] ``->`` [ClSlash #ClSlash] ``->`` [RCl #RCl] | //whom John loves today// |
| ``mkRCl`` | [RP #RP] ``->`` [NP #NP] ``->`` [V2 #V2] ``->`` [RCl #RCl] | //whom John loves// |
| ``mkRCl`` | [Cl #Cl] ``->`` [RCl #RCl] | //such that John loves her// |
==RP - relative pronoun==[RP]
|| Function  | Type  | Example  ||
| ``mkRP`` | [Prep #Prep] ``->`` [NP #NP] ``->`` [RP #RP] ``->`` [RP #RP] | //all the houses in which// |
| ``which_RP`` | [RP #RP] | //which// |
==RS - relative==[RS]
|| Function  | Type  | Example  ||
| ``mkRS`` | ([Tense #Tense]) ``->`` ([Ant #Ant]) ``->`` ([Pol #Pol]) ``->`` [RCl #RCl] ``->`` [RS #RS] | //that wouldn't have walked// |
| ``mkRS`` | [Conj #Conj] ``->`` [RS #RS] ``->`` [RS #RS] ``->`` [RS #RS] | //who walks and whose mother runsx// |
| ``mkRS`` | [Conj #Conj] ``->`` [ListRS #ListRS] ``->`` [RS #RS] | //who walks, whom I see and who sleeps// |
==S - declarative sentence==[S]
|| Function  | Type  | Example  ||
| ``mkS`` | ([Tense #Tense]) ``->`` ([Ant #Ant]) ``->`` ([Pol #Pol]) ``->`` [Cl #Cl] ``->`` [S #S] | //John wouldn't have walked// |
| ``mkS`` | [Conj #Conj] ``->`` [S #S] ``->`` [S #S] ``->`` [S #S] | //John walks and I run// |
| ``mkS`` | [Conj #Conj] ``->`` [ListS #ListS] ``->`` [S #S] | //John walks, I run and you sleep// |
| ``mkS`` | [Adv #Adv] ``->`` [S #S] ``->`` [S #S] | //today, John walks// |
==SC - embedded sentence or question==[SC]
|| Function  | Type  | Example  ||
| ``mkSC`` | [S #S] ``->`` [SC #SC] | //that he walks// |
| ``mkSC`` | [QS #QS] ``->`` [SC #SC] | //whether he walks// |
| ``mkSC`` | [VP #VP] ``->`` [SC #SC] | //to walk// |
==SSlash==[SSlash]
|| Function  | Type  | Example  ||
| ``mkSSlash`` | [Temp #Temp] ``->`` [Pol #Pol] ``->`` [ClSlash #ClSlash] ``->`` [SSlash #SSlash] | //mkSSlash// |
==Sub100==[Sub100]
|| Function  | Type  | Example  ||
| ``mkSub100`` | [Unit #Unit] ``->`` [Sub100 #Sub100] | //coerce 1..9// |
| ``mkSub100`` | [Unit #Unit] ``->`` [Unit #Unit] ``->`` [Sub100 #Sub100] | //10m + n// |
| ``tenfoldSub100`` | [Unit #Unit] ``->`` [Sub100 #Sub100] | //10n// |
==Sub1000==[Sub1000]
|| Function  | Type  | Example  ||
| ``mkSub1000`` | [Sub100 #Sub100] ``->`` [Sub1000 #Sub1000] | //coerce 1..99// |
| ``mkSub1000`` | [Sub10 #Sub10] ``->`` [Sub1000 #Sub1000] | //100n// |
| ``mkSub1000`` | [Sub10 #Sub10] ``->`` [Sub100 #Sub100] ``->`` [Sub1000 #Sub1000] | //100m + n// |
==Subj - subjunction==[Subj]
|| Function  | Type  | Example  ||
| ``although_Subj`` | [Subj #Subj] | //although// |
| ``because_Subj`` | [Subj #Subj] | //because// |
| ``if_Subj`` | [Subj #Subj] | //if// |
| ``that_Subj`` | [Subj #Subj] | //that// |
| ``when_Subj`` | [Subj #Subj] | //when// |
==Temp - temporal and aspectual features==[Temp]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==Tense - tense==[Tense]
|| Function  | Type  | Example  ||
| ``conditionalTense`` | [Tense #Tense] | //John would walk// |
| ``futureTense`` | [Tense #Tense] | //John will walk// |
| ``pastTense`` | [Tense #Tense] | //John walked// |
| ``presentTense`` | [Tense #Tense] | //John walks [default]// |
==Text - text consisting of several phrases==[Text]
|| Function  | Type  | Example  ||
| ``emptyText`` | [Text #Text] | //(empty text)// |
| ``mkText`` | [Phr #Phr] ``->`` ([Punct #Punct]) ``->`` ([Text #Text]) ``->`` [Text #Text] | //John walks? Yes.// |
| ``mkText`` | [Utt #Utt] ``->`` [Text #Text] | //Yes.// |
| ``mkText`` | [S #S] ``->`` [Text #Text] | //John walked.// |
| ``mkText`` | [Cl #Cl] ``->`` [Text #Text] | //John walks.// |
| ``mkText`` | [QS #QS] ``->`` [Text #Text] | //Did John walk?// |
| ``mkText`` | ([Pol #Pol]) ``->`` [Imp #Imp] ``->`` [Text #Text] | //Walk!// |
| ``mkText`` | [Text #Text] ``->`` [Text #Text] ``->`` [Text #Text] | //Where? When? Here. Now!// |
==Unit==[Unit]
|| Function  | Type  | Example  ||
| ``n1_Unit`` | [Unit #Unit] | //one// |
| ``n2_Unit`` | [Unit #Unit] | //two// |
| ``n3_Unit`` | [Unit #Unit] | //three// |
| ``n4_Unit`` | [Unit #Unit] | //four// |
| ``n5_Unit`` | [Unit #Unit] | //five// |
| ``n6_Unit`` | [Unit #Unit] | //six// |
| ``n7_Unit`` | [Unit #Unit] | //seven// |
| ``n8_Unit`` | [Unit #Unit] | //eight// |
| ``n9_Unit`` | [Unit #Unit] | //nine// |
==Utt - sentence, question, word...==[Utt]
|| Function  | Type  | Example  ||
| ``lets_Utt`` | [VP #VP] ``->`` [Utt #Utt] | //let's walk// |
| ``mkUtt`` | [S #S] ``->`` [Utt #Utt] | //John walked// |
| ``mkUtt`` | [Cl #Cl] ``->`` [Utt #Utt] | //John walks// |
| ``mkUtt`` | [QS #QS] ``->`` [Utt #Utt] | //did John walk// |
| ``mkUtt`` | [QCl #QCl] ``->`` [Utt #Utt] | //does John walk// |
| ``mkUtt`` | ([ImpForm #ImpForm]) ``->`` ([Pol #Pol]) ``->`` [Imp #Imp] ``->`` [Utt #Utt] | //don't love yourselves// |
| ``mkUtt`` | [IP #IP] ``->`` [Utt #Utt] | //who// |
| ``mkUtt`` | [IAdv #IAdv] ``->`` [Utt #Utt] | //why// |
| ``mkUtt`` | [NP #NP] ``->`` [Utt #Utt] | //this man// |
| ``mkUtt`` | [Adv #Adv] ``->`` [Utt #Utt] | //here// |
| ``mkUtt`` | [VP #VP] ``->`` [Utt #Utt] | //to sleep// |
| ``mkUtt`` | [CN #CN] ``->`` [Utt #Utt] | //beer// |
| ``mkUtt`` | [AP #AP] ``->`` [Utt #Utt] | //good// |
| ``mkUtt`` | [Card #Card] ``->`` [Utt #Utt] | //five// |
| ``no_Utt`` | [Utt #Utt] | //no// |
| ``yes_Utt`` | [Utt #Utt] | //yes// |
==V - one-place verb==[V]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2 - two-place verb==[V2]
|| Function  | Type  | Example  ||
| ``have_V2`` | [V2 #V2] | //have// |
==V2A - verb with NP and AP complement==[V2A]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2Q - verb with NP and Q complement==[V2Q]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2S - verb with NP and S complement==[V2S]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2V - verb with NP and V complement==[V2V]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V3 - three-place verb==[V3]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VA - adjective-complement verb==[VA]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VP - verb phrase==[VP]
|| Function  | Type  | Example  ||
| ``mkVP`` | [V #V] ``->`` [VP #VP] | //sleep// |
| ``mkVP`` | [V2 #V2] ``->`` [NP #NP] ``->`` [VP #VP] | //love it// |
| ``mkVP`` | [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [VP #VP] | //send a message to her// |
| ``mkVP`` | [VV #VV] ``->`` [VP #VP] ``->`` [VP #VP] | //want to run// |
| ``mkVP`` | [VS #VS] ``->`` [S #S] ``->`` [VP #VP] | //know that she runs// |
| ``mkVP`` | [VQ #VQ] ``->`` [QS #QS] ``->`` [VP #VP] | //wonder if she runs// |
| ``mkVP`` | [VA #VA] ``->`` [AP #AP] ``->`` [VP #VP] | //become red// |
| ``mkVP`` | [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [VP #VP] | //paint it red// |
| ``mkVP`` | [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [VP #VP] | //tell her that we walk// |
| ``mkVP`` | [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [VP #VP] | //ask her who walks// |
| ``mkVP`` | [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [VP #VP] | //force her to walk// |
| ``mkVP`` | [A #A] ``->`` [VP #VP] | //be warm// |
| ``mkVP`` | [A #A] ``->`` [NP #NP] ``->`` [VP #VP] | //be older than her// |
| ``mkVP`` | [A2 #A2] ``->`` [NP #NP] ``->`` [VP #VP] | //be married to her// |
| ``mkVP`` | [AP #AP] ``->`` [VP #VP] | //be warm// |
| ``mkVP`` | [N #N] ``->`` [VP #VP] | //be a man// |
| ``mkVP`` | [CN #CN] ``->`` [VP #VP] | //be an old man// |
| ``mkVP`` | [NP #NP] ``->`` [VP #VP] | //be this man// |
| ``mkVP`` | [Adv #Adv] ``->`` [VP #VP] | //be here// |
| ``mkVP`` | [VP #VP] ``->`` [Adv #Adv] ``->`` [VP #VP] | //sleep here// |
| ``mkVP`` | [AdV #AdV] ``->`` [VP #VP] ``->`` [VP #VP] | //always sleep// |
| ``mkVP`` | [VPSlash #VPSlash] ``->`` [NP #NP] ``->`` [VP #VP] | //paint it black// |
| ``mkVP`` | [VPSlash #VPSlash] ``->`` [VP #VP] | //paint itself black// |
| ``mkVP`` | [Comp #Comp] ``->`` [VP #VP] | //be warm// |
| ``passiveVP`` | [V2 #V2] ``->`` [VP #VP] | //be loved// |
| ``passiveVP`` | [V2 #V2] ``->`` [NP #NP] ``->`` [VP #VP] | //be loved by her// |
| ``progressiveVP`` | [VP #VP] ``->`` [VP #VP] | //be sleeping// |
| ``reflexiveVP`` | [V2 #V2] ``->`` [VP #VP] | //love itself// |
==VPSlash - verb phrase missing complement==[VPSlash]
|| Function  | Type  | Example  ||
| ``mkVPSlash`` | [V2 #V2] ``->`` [VPSlash #VPSlash] | //(whom) (John) loves// |
| ``mkVPSlash`` | [V3 #V3] ``->`` [NP #NP] ``->`` [VPSlash #VPSlash] | //(whom) (John) gives an apple// |
| ``mkVPSlash`` | [V2A #V2A] ``->`` [AP #AP] ``->`` [VPSlash #VPSlash] | //(whom) (John) paints red// |
| ``mkVPSlash`` | [V2Q #V2Q] ``->`` [QS #QS] ``->`` [VPSlash #VPSlash] | //(whom) (John) asks who sleeps// |
| ``mkVPSlash`` | [V2S #V2S] ``->`` [S #S] ``->`` [VPSlash #VPSlash] | //(whom) (John) tells that we sleep// |
| ``mkVPSlash`` | [V2V #V2V] ``->`` [VP #VP] ``->`` [VPSlash #VPSlash] | //(whom) (John) forces to sleep// |
| ``mkVPSlash`` | [VV #VV] ``->`` [VPSlash #VPSlash] ``->`` [VPSlash #VPSlash] | //want always to buy// |
| ``mkVPSlash`` | [V2V #V2V] ``->`` [NP #NP] ``->`` [VPSlash #VPSlash] ``->`` [VPSlash #VPSlash] | //beg me always to buy// |
==VQ - question-complement verb==[VQ]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VS - sentence-complement verb==[VS]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VV - verb-phrase-complement verb==[VV]
|| Function  | Type  | Example  ||
| ``can8know_VV`` | [VV #VV] | //can (capacity)// |
| ``can_VV`` | [VV #VV] | //can (possibility)// |
| ``must_VV`` | [VV #VV] | //must// |
| ``want_VV`` | [VV #VV] | //want// |
==Voc - vocative or "please"==[Voc]
|| Function  | Type  | Example  ||
| ``mkVoc`` | [NP #NP] ``->`` [Voc #Voc] | //John// |
| ``please_Voc`` | [Voc #Voc] | //please// |




=Lexical Paradigms=
==Paradigms for Bulgarian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/bulgarian/ParadigmsBul.gf`` ../src/bulgarian/ParadigmsBul.gf]




|| Function  | Type  ||
| ``mkN001`` | ``Str`` ``->`` [N #N] |
| ``mkN002`` | ``Str`` ``->`` [N #N] |
| ``mkN002a`` | ``Str`` ``->`` [N #N] |
| ``mkN003`` | ``Str`` ``->`` [N #N] |
| ``mkN004`` | ``Str`` ``->`` [N #N] |
| ``mkN005`` | ``Str`` ``->`` [N #N] |
| ``mkN006`` | ``Str`` ``->`` [N #N] |
| ``mkN007`` | ``Str`` ``->`` [N #N] |
| ``mkN007b`` | ``Str`` ``->`` [N #N] |
| ``mkN007a`` | ``Str`` ``->`` [N #N] |
| ``mkN008`` | ``Str`` ``->`` [N #N] |
| ``mkN008b`` | ``Str`` ``->`` [N #N] |
| ``mkN008c`` | ``Str`` ``->`` [N #N] |
| ``mkN008a`` | ``Str`` ``->`` [N #N] |
| ``mkN009`` | ``Str`` ``->`` [N #N] |
| ``mkN009a`` | ``Str`` ``->`` [N #N] |
| ``mkN010`` | ``Str`` ``->`` [N #N] |
| ``mkN011`` | ``Str`` ``->`` [N #N] |
| ``mkN012`` | ``Str`` ``->`` [N #N] |
| ``mkN013`` | ``Str`` ``->`` [N #N] |
| ``mkN014`` | ``Str`` ``->`` [N #N] |
| ``mkN014a`` | ``Str`` ``->`` [N #N] |
| ``mkN015`` | ``Str`` ``->`` [N #N] |
| ``mkN015a`` | ``Str`` ``->`` [N #N] |
| ``mkN016`` | ``Str`` ``->`` [N #N] |
| ``mkN016a`` | ``Str`` ``->`` [N #N] |
| ``mkN017`` | ``Str`` ``->`` [N #N] |
| ``mkN018`` | ``Str`` ``->`` [N #N] |
| ``mkN018a`` | ``Str`` ``->`` [N #N] |
| ``mkN019`` | ``Str`` ``->`` [N #N] |
| ``mkN019a`` | ``Str`` ``->`` [N #N] |
| ``mkN020`` | ``Str`` ``->`` [N #N] |
| ``mkN021`` | ``Str`` ``->`` [N #N] |
| ``mkN022`` | ``Str`` ``->`` [N #N] |
| ``mkN023`` | ``Str`` ``->`` [N #N] |
| ``mkN024a`` | ``Str`` ``->`` [N #N] |
| ``mkN024`` | ``Str`` ``->`` [N #N] |
| ``mkN025`` | ``Str`` ``->`` [N #N] |
| ``mkN026`` | ``Str`` ``->`` [N #N] |
| ``mkN027`` | ``Str`` ``->`` [N #N] |
| ``mkN028`` | ``Str`` ``->`` [N #N] |
| ``mkN028a`` | ``Str`` ``->`` [N #N] |
| ``mkN029`` | ``Str`` ``->`` [N #N] |
| ``mkN030`` | ``Str`` ``->`` [N #N] |
| ``mkN031`` | ``Str`` ``->`` [N #N] |
| ``mkN031a`` | ``Str`` ``->`` [N #N] |
| ``mkN032`` | ``Str`` ``->`` [N #N] |
| ``mkN032a`` | ``Str`` ``->`` [N #N] |
| ``mkN033`` | ``Str`` ``->`` [N #N] |
| ``mkN034`` | ``Str`` ``->`` [N #N] |
| ``mkN035`` | ``Str`` ``->`` [N #N] |
| ``mkN035a`` | ``Str`` ``->`` [N #N] |
| ``mkN036`` | ``Str`` ``->`` [N #N] |
| ``mkN037`` | ``Str`` ``->`` [N #N] |
| ``mkN038`` | ``Str`` ``->`` [N #N] |
| ``mkN039`` | ``Str`` ``->`` [N #N] |
| ``mkN040`` | ``Str`` ``->`` [N #N] |
| ``mkN040a`` | ``Str`` ``->`` [N #N] |
| ``mkN041`` | ``Str`` ``->`` [N #N] |
| ``mkN041a`` | ``Str`` ``->`` [N #N] |
| ``mkN041b`` | ``Str`` ``->`` [N #N] |
| ``mkN042`` | ``Str`` ``->`` [N #N] |
| ``mkN043`` | ``Str`` ``->`` [N #N] |
| ``mkN043a`` | ``Str`` ``->`` [N #N] |
| ``mkN044`` | ``Str`` ``->`` [N #N] |
| ``mkN045`` | ``Str`` ``->`` [N #N] |
| ``mkN046`` | ``Str`` ``->`` [N #N] |
| ``mkN047`` | ``Str`` ``->`` [N #N] |
| ``mkN048`` | ``Str`` ``->`` [N #N] |
| ``mkN049`` | ``Str`` ``->`` [N #N] |
| ``mkN050`` | ``Str`` ``->`` [N #N] |
| ``mkN051`` | ``Str`` ``->`` [N #N] |
| ``mkN052`` | ``Str`` ``->`` [N #N] |
| ``mkN052a`` | ``Str`` ``->`` [N #N] |
| ``mkN053`` | ``Str`` ``->`` [N #N] |
| ``mkN054`` | ``Str`` ``->`` [N #N] |
| ``mkN055`` | ``Str`` ``->`` [N #N] |
| ``mkN056`` | ``Str`` ``->`` [N #N] |
| ``mkN057`` | ``Str`` ``->`` [N #N] |
| ``mkN057a`` | ``Str`` ``->`` [N #N] |
| ``mkN058`` | ``Str`` ``->`` [N #N] |
| ``mkN059`` | ``Str`` ``->`` [N #N] |
| ``mkN060`` | ``Str`` ``->`` [N #N] |
| ``mkN061`` | ``Str`` ``->`` [N #N] |
| ``mkN062`` | ``Str`` ``->`` [N #N] |
| ``mkN063`` | ``Str`` ``->`` [N #N] |
| ``mkN064`` | ``Str`` ``->`` [N #N] |
| ``mkN065`` | ``Str`` ``->`` [N #N] |
| ``mkN066`` | ``Str`` ``->`` [N #N] |
| ``mkN067`` | ``Str`` ``->`` [N #N] |
| ``mkN068`` | ``Str`` ``->`` [N #N] |
| ``mkN069`` | ``Str`` ``->`` [N #N] |
| ``mkN070`` | ``Str`` ``->`` [N #N] |
| ``mkN071`` | ``Str`` ``->`` [N #N] |
| ``mkN072`` | ``Str`` ``->`` [N #N] |
| ``mkN073`` | ``Str`` ``->`` [N #N] |
| ``mkN074`` | ``Str`` ``->`` [N #N] |
| ``mkN075`` | ``Str`` ``->`` [N #N] |
| ``mkA076`` | ``Str`` ``->`` [A #A] |
| ``mkA077`` | ``Str`` ``->`` [A #A] |
| ``mkA078`` | ``Str`` ``->`` [A #A] |
| ``mkA079`` | ``Str`` ``->`` [A #A] |
| ``mkA080`` | ``Str`` ``->`` [A #A] |
| ``mkA081`` | ``Str`` ``->`` [A #A] |
| ``mkA082`` | ``Str`` ``->`` [A #A] |
| ``mkA082a`` | ``Str`` ``->`` [A #A] |
| ``mkA083`` | ``Str`` ``->`` [A #A] |
| ``mkA084`` | ``Str`` ``->`` [A #A] |
| ``mkA084a`` | ``Str`` ``->`` [A #A] |
| ``mkA085`` | ``Str`` ``->`` [A #A] |
| ``mkA086`` | ``Str`` ``->`` [A #A] |
| ``mkA087`` | ``Str`` ``->`` [A #A] |
| ``mkA088`` | ``Str`` ``->`` [A #A] |
| ``mkA089a`` | ``Str`` ``->`` [A #A] |
| ``mkV142`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV143`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV144`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV145`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV145a`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV145b`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV146`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV146a`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV147`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV148`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV149`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV150`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV150a`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV151`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV152`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV152a`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV153`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV154`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV155`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV156`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV157`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV158`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV159`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV160`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV160a`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV161`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV161a`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV162`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV163`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV164`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV165`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV166`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV167`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV168`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV169`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV170`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV171`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV172`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV173`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV174`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV175`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV176`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV177`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV178`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV179`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV180`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV181`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV182`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV183`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV184`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV185`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV186`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV187`` | ``Str`` ``->`` [VTable #VTable] |
| ``mkV188`` | ``Str`` ``->`` [VTable #VTable] |
| ``adjAdv`` | [A #A] ``->`` ``Str`` ``->`` [A #A] ``=`` |


==Paradigms for Catalan==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/catalan/ParadigmsCat.gf`` ../src/catalan/ParadigmsCat.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``accusative`` | [Prep #Prep] |
| ``genitive`` | [Prep #Prep] |
| ``dative`` | [Prep #Prep] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``mkN`` | ``(llum`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(disc,discos`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``compN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``deN2`` | [N #N] ``->`` [N2 #N2] |
| ``aN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``(Anna`` ``:`` ``Str)`` ``->`` [PN #PN] |
| ``mkPN`` | ``(Pilar`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkA`` | ``(sol`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(fort,forta,forts,fortes,fortament`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(bo`` ``:`` ``A)`` ``->`` ``(millor`` ``:`` ``A)`` ``->`` [A #A] |
| ``prefixA`` | [A #A] ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``(cantar`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | [Verbum #Verbum] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``special_ppV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``v2V`` | [V2 #V2] ``->`` [V #V] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``deVV`` | [V #V] ``->`` [VV #VV] |
| ``aVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Danish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/danish/ParadigmsDan.gf`` ../src/danish/ParadigmsDan.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``utrum`` | [Gender #Gender] |
| ``neutrum`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``noPrep`` | [Prep #Prep] |
| ``mkN`` | ``(bil`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(hus`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(bil,bilen`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(bil,bilen,biler`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(dreng,drengen,drenge,drengene`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``regN2`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkPN`` | [N #N] ``->`` [PN #PN] |
| ``mkA`` | ``(fin`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(fin,fint`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(galen,galet,galne`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(stor,stort,store,storre,storst`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | [A #A] ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``(snakke`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(leve,levde`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(drikke,`` ``drakk,`` ``drukket`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(spise,spiser,spises,spiste,spist,spis`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] |
| ``vaereV`` | [V #V] ``->`` [V #V] |
| ``depV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Dutch==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/dutch/ParadigmsDut.gf`` ../src/dutch/ParadigmsDut.gf]




|| Function  | Type  ||
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``neuter`` | [Gender #Gender] |
| ``utrum`` | [Gender #Gender] |
| ``de,het`` | [Gender #Gender] |
| ``mkN`` | ``(muis`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(bit`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(gat,gaten`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(muis`` ``:`` ``Str)`` ``->`` [N #N] ``=`` ``\a`` ``->`` ``lin`` [N #N] ``(regNoun`` ``a)`` |
| ``mkN`` | ``(bit`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] ``=`` ``\a,b`` ``->`` ``lin`` [N #N] ``(regNounG`` ``a`` ``b)`` |
| ``mkN`` | ``(gat,gaten`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] ``=`` ``\a,b,c`` ``->`` ``lin`` [N #N] ``(mkNoun`` ``a`` ``b`` ``c)`` |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] ``=`` ``\n`` ``->`` ``lin`` [N2 #N2] ``(n`` ``**`` ``{c2`` ``=`` ``"van"})`` |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] ``=`` ``\n,p`` ``->`` ``lin`` [N2 #N2] ``(n`` ``**`` ``{c2`` ``=`` ``p.s})`` |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] ``=`` ``\s`` ``->`` ``lin`` [PN #PN] ``{s`` ``=`` ``\\_`` ``=>`` ``s}`` |
| ``mkA`` | ``(vers`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(goed,goede,goeds,beter,best`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(vers`` ``:`` ``Str)`` ``->`` [A #A] ``=`` ``\a`` ``->`` ``lin`` [A #A] ``(regAdjective`` ``a)`` |
| ``mkA`` | ``(goed,goede,goeds,beter,best`` ``:`` ``Str)`` ``->`` [A #A] ``=`` ``\a,b,c,d,e`` ``->`` ``lin`` [A #A] ``(mkAdjective`` ``a`` ``b`` ``c`` ``d`` ``e)`` |
| ``invarA`` | ``Str`` ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``van_Prep`` | [Prep #Prep] |
| ``te_Prep`` | [Prep #Prep] |
| ``mkV`` | ``(aaien`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(breken,brak,gebroken`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(breken,brak,braken,gebroken`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(aai,aait,aaien,aaide,aaide,aaiden,geaaid`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] |
| ``mkV`` | ``(aaien`` ``:`` ``Str)`` ``->`` [V #V] ``=`` |
| ``mkV`` | ``(breken,brak,gebroken`` ``:`` ``Str)`` ``->`` [V #V] ``=`` |
| ``mkV`` | ``(breken,brak,braken,gebroken`` ``:`` ``Str)`` ``->`` [V #V] ``=`` |
| ``mkV`` | ``(aai,aait,aaien,aaide,aaiden,geaaid`` ``:`` ``Str)`` ``->`` [V #V] ``=`` |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] ``=`` ``\v,s`` ``->lin`` [V #V] ``(prefixV`` ``v`` ``s)`` |
| ``zijnV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``zijn_V`` | [V #V] ``=`` ``lin`` [V #V] ``ResDut.zijn_V`` |
| ``hebben_V`` | [V #V] ``=`` ``lin`` [V #V] ``ResDut.hebben_V`` |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] ``=`` ``\s`` ``->`` ``lin`` [V2 #V2] ``(v2vv`` ``(regVerb`` ``s)`` ``**`` ``{c2`` ``=`` ``[]})`` |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] ``=`` ``\s`` ``->`` ``lin`` [V2 #V2] ``(s`` ``**`` ``{c2`` ``=`` ``[]})`` |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] ``=`` ``\s,p`` ``->`` ``lin`` [V2 #V2] ``(s`` ``**`` ``{c2`` ``=`` ``p.s})`` |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] ``=`` ``mkmaxV3`` |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] ``=`` ``\v,p`` ``->`` ``mkmaxV3`` ``v`` ``(mkPrep`` ``[])`` ``p`` |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] ``=`` ``\v`` ``->`` ``mkmaxV3`` ``v`` ``(mkPrep`` ``[])`` ``(mkPrep`` ``[])`` |
| ``mkmaxV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] ``=`` ``\v,c,d`` ``->`` ``lin`` [V3 #V3] ``(v`` ``**`` ``{c2`` ``=`` ``c.s`` ``c3`` ``=`` ``d.s})`` |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkOrd`` | [A #A] ``->`` [Ord #Ord] ``=`` ``\a`` ``->`` ``lin`` [Ord #Ord] ``{s`` ``=`` ``a.s`` ``!`` ``Posit}`` |
| ``prepV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``V0`` | [Type #Type] ``=`` [V #V] |


==Paradigms for English==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/english/ParadigmsEng.gf`` ../src/english/ParadigmsEng.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``human`` | [Gender #Gender] |
| ``nonhuman`` | [Gender #Gender] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``npNumber`` | [NP #NP] ``->`` [Number #Number] |
| ``mkN`` | ``(flash`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(man,men`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(man,men,man's,men's`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | [Gender #Gender] ``->`` [N #N] ``->`` [N #N] |
| ``mkN`` | ``Str`` ``->`` [N #N] ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` ``Str`` ``->`` [N2 #N2] |
| ``mkN2`` | ``Str`` ``->`` ``Str`` ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | [N #N] ``->`` [PN #PN] |
| ``mkQuant`` | ``(this,`` ``these`` ``:`` ``Str)`` ``->`` [Quant #Quant] |
| ``mkQuant`` | ``(no_sg,`` ``no_pl,`` ``none_sg,`` ``non_pl`` ``:`` ``Str)`` ``->`` [Quant #Quant] |
| ``mkOrd`` | ``Str`` ``->`` [Ord #Ord] |
| ``mkA`` | ``(happy`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(fat,fatter`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(good,better,best,well`` ``:`` ``Str)`` ``->`` [A #A] |
| ``compoundA`` | [A #A] ``->`` [A #A] |
| ``simpleA`` | [A #A] ``->`` [A #A] |
| ``irregAdv`` | [A #A] ``->`` ``Str`` ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkA2`` | [A #A] ``->`` ``Str`` ``->`` [A2 #A2] |
| ``mkA2`` | ``Str`` ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkA2`` | ``Str`` ``->`` ``Str`` ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkAdN`` | ``Str`` ``->`` [AdN #AdN] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``noPrep`` | [Prep #Prep] |
| ``mkConj`` | ``Str`` ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] |
| ``mkV`` | ``(cry`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(stop,`` ``stopped`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(drink,`` ``drank,`` ``drunk`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(run,`` ``ran,`` ``run,`` ``running`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(go,`` ``goes,`` ``went,`` ``gone,`` ``going`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] |
| ``partV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | ``Str`` ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV2`` | ``Str`` ``->`` ``Str`` ``->`` [V2 #V2] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` ``Str`` ``->`` [V3 #V3] |
| ``mkV3`` | ``Str`` ``->`` ``Str`` ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV3`` | ``Str`` ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |
| ``mkSubj`` | ``Str`` ``->`` [Subj #Subj] ``=`` ``\s`` ``->`` ``lin`` [Subj #Subj] ``{s`` ``=`` ``s}`` |


==Paradigms for Finnish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/finnish/ParadigmsFin.gf`` ../src/finnish/ParadigmsFin.gf]




|| Function  | Type  ||
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``partitive`` | [Case #Case] |
| ``essive`` | [Case #Case] |
| ``translative`` | [Case #Case] |
| ``inessive`` | [Case #Case] |
| ``elative`` | [Case #Case] |
| ``illative`` | [Case #Case] |
| ``adessive`` | [Case #Case] |
| ``ablative`` | [Case #Case] |
| ``allative`` | [Case #Case] |
| ``prePrep`` | [Case #Case] ``->`` ``Str`` ``->`` [Prep #Prep] |
| ``postPrep`` | [Case #Case] ``->`` ``Str`` ``->`` [Prep #Prep] |
| ``postGenPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``casePrep`` | [Case #Case] ``->`` [Prep #Prep] |
| ``mkN`` | ``(talo`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(savi,savia`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(vesi,veden,vesiä`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(vesi,veden,vesiä,vettä`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(olo,olon,olona,oloa,oloon,olojen,oloja,oloina,oloissa,oloihin`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(pika`` ``:`` ``Str)`` ``->`` ``(juna`` ``:`` ``N)`` ``->`` [N #N] |
| ``mkN`` | ``(oma`` ``:`` ``N)`` ``->`` ``(tunto`` ``:`` ``N)`` ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | [N #N] ``->`` [PN #PN] |
| ``mkA`` | ``Str`` ``->`` [A #A] |
| ``mkA`` | [N #N] ``->`` [A #A] |
| ``mkA`` | [N #N] ``->`` ``(kivempi,kivin`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(hyva,parempi,paras`` ``:`` ``N)`` ``->`` ``(hyvin,paremmin,parhaiten`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] ``=`` ``\a,p`` ``->`` ``a`` ``**`` ``{c2`` ``=`` ``p`` ``lock_A2`` ``=`` ``<>};`` |
| ``mkV`` | ``(huutaa`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(huutaa,huusi`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(huutaa,huudan,huusi`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(`` |
| ``huusin,huusi,huusisi,huutanut,huudettu,huutanee`` | ``Str)`` ``->`` [V #V] |
| ``caseV`` | [Case #Case] ``->`` [V #V] ``->`` [V #V] |
| ``vOlla`` | [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Case #Case] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Case #Case] ``->`` [V3 #V3] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkVVf`` | [V #V] ``->`` [InfForm #InfForm] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkV2Vf`` | [V #V] ``->`` [Prep #Prep] ``->`` [InfForm #InfForm] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [Prep #Prep] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for French==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/french/ParadigmsFre.gf`` ../src/french/ParadigmsFre.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``accusative`` | [Prep #Prep] |
| ``genitive`` | [Prep #Prep] |
| ``dative`` | [Prep #Prep] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``mkN`` | ``(cheval`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(foie`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(oeil,yeux`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``deN2`` | [N #N] ``->`` [N2 #N2] |
| ``aN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkA`` | ``(cher`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(sec,seche`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(banal,banale,banaux,banalement`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | [A #A] ``->`` [A #A] ``->`` [A #A] |
| ``prefixA`` | [A #A] ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``(finir`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(jeter,jette,jettera`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | [V2 #V2] ``->`` [V #V] |
| ``etreV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] ``=`` ``\s`` ``->`` ``dirV2`` ``(regV`` ``s)`` |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] ``=`` ``dirV2`` |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] ``=`` ``mmkV2`` |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``deVV`` | [V #V] ``->`` [VV #VV] |
| ``aVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for German==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/german/ParadigmsGer.gf`` ../src/german/ParadigmsGer.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``neuter`` | [Gender #Gender] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``accusative`` | [Case #Case] |
| ``dative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``anDat_Case`` | [Case #Case] |
| ``inAcc_Case`` | [Case #Case] |
| ``inDat_Case`` | [Case #Case] |
| ``zuDat_Case`` | [Case #Case] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``mkN`` | ``(Stufe`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(Bild,Bilder`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(x1,_,_,_,_,x6`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``(nom,gen`` ``:`` ``Str)`` ``->`` [PN #PN] |
| ``mkPN`` | ``(nom,acc,dat,gen`` ``:`` ``Str)`` ``->`` [PN #PN] |
| ``mkA`` | ``Str`` ``->`` [A #A] |
| ``mkA`` | ``(gut,besser,beste`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(gut,gute,besser,beste`` ``:`` ``Str)`` ``->`` [A #A] |
| ``invarA`` | ``Str`` ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkPrep`` | ``Str`` ``->`` [PCase #PCase] ``->`` [Prep #Prep] |
| ``accPrep`` | [Prep #Prep] |
| ``datPrep`` | [Prep #Prep] |
| ``genPrep`` | [Prep #Prep] |
| ``von_Prep`` | [Prep #Prep] |
| ``zu_Prep`` | [Prep #Prep] |
| ``anDat_Prep`` | [Prep #Prep] |
| ``inDat_Prep`` | [Prep #Prep] |
| ``inAcc_Prep`` | [Prep #Prep] |
| ``mkV`` | ``(führen`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(sehen,sieht,sah,sähe,gesehen`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(geben,`` ``gibt,`` ``gib,`` ``gab,`` ``gäbe,`` ``gegeben`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] |
| ``no_geV`` | [V #V] ``->`` [V #V] |
| ``fixprefixV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] |
| ``seinV`` | [V #V] ``->`` [V #V] |
| ``habenV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [Case #Case] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Case #Case] ``->`` [V2 #V2] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``accdatV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Italian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/italian/ParadigmsIta.gf`` ../src/italian/ParadigmsIta.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``--Prep`` | [Type #Type] |
| ``accusative`` | [Prep #Prep] |
| ``genitive`` | [Prep #Prep] |
| ``dative`` | [Prep #Prep] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``mkN`` | ``(cane`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(carne`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(uomo,uomini`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkA`` | ``(bianco`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(solo,sola,soli,sole,solamente`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | [A #A] ``->`` [A #A] ``->`` [A #A] |
| ``prefixA`` | [A #A] ``->`` [A #A] ``=`` ``prefA`` |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``Str`` ``->`` [V #V] |
| ``mkV`` | [Verbo #Verbo] ``->`` [V #V] |
| ``mkV`` | ``(udire,odo,ode,udiamo,udiro,udii,udisti,udi,udirono,odi,udito`` ``:`` ``Str)`` ``->`` [V #V] |
| ``essereV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``v2V`` | [V2 #V2] ``->`` [V #V] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``deVV`` | [V #V] ``->`` [VV #VV] |
| ``aVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Norwegian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/norwegian/ParadigmsNor.gf`` ../src/norwegian/ParadigmsNor.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``neutrum`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``noPrep`` | [Prep #Prep] |
| ``mkN`` | ``Str`` ``->`` [N #N] |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(bil,bilen`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(dreng,drengen,drenger,drengene`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``regN2`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkPN`` | [N #N] ``->`` [PN #PN] |
| ``mkA`` | ``(fin`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(fin,fint`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(galen,galet,galne`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(stor,stort,store,storre,storst`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | [A #A] ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``(snakke`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(leve,levde`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(drikke,`` ``drakk,`` ``drukket`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(spise,spiser,spises,spiste,spist,spis`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] |
| ``vaereV`` | [V #V] ``->`` [V #V] |
| ``depV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Polish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/polish/ParadigmsPol.gf`` ../src/polish/ParadigmsPol.gf]




|| Function  | Type  ||
| ``Gender`` | ``Type;`` |
| ``masculineP`` | ``Gender;`` |
| ``masculineA`` | ``Gender;`` |
| ``masculineI`` | ``Gender;`` |
| ``feminine`` | ``Gender;`` |
| ``neuter`` | ``Gender;`` |
| ``personal`` | ``Animacy;`` |
| ``Case`` | ``Type;`` |
| ``nominative`` | ``Case;`` |
| ``genitive`` | ``Case;`` |
| ``dative`` | ``Case;`` |
| ``accusative`` | ``Case;`` |
| ``instrumental`` | ``Case;`` |
| ``locative`` | ``Case;`` |
| ``vocative`` | ``Case;`` |
| ``Number`` | ``Type;`` |
| ``singular`` | ``Number;`` |
| ``plural`` | ``Number;`` |
| ``nKapiel`` | ``Str`` ``->`` ``N;`` |
| ``nLodz`` | ``Str`` ``->`` ``N;`` |
| ``nSul`` | ``Str`` ``->`` ``N;`` |
| ``nKonew`` | ``Str`` ``->`` ``N;`` |
| ``nWies`` | ``Str`` ``->`` ``N;`` |
| ``nDlon`` | ``Str`` ``->`` ``N;`` |
| ``nSiec`` | ``Str`` ``->`` ``N;`` |
| ``nDrzwi`` | ``Str`` ``->`` ``N;`` |
| ``nKosc`` | ``Str`` ``->`` ``N;`` |
| ``nNoc`` | ``Str`` ``->`` ``N;`` |
| ``nWesz`` | ``Str`` ``->`` ``N;`` |
| ``nKrolowa`` | ``Str`` ``->`` ``N;`` |
| ``nReka`` | ``Str`` ``->`` ``N;`` |
| ``nApteka`` | ``Str`` ``->`` ``N;`` |
| ``nDroga`` | ``Str`` ``->`` ``N;`` |
| ``nMatka`` | ``Str`` ``->`` ``N;`` |
| ``nZiemia`` | ``Str`` ``->`` ``N;`` |
| ``nFala`` | ``Str`` ``->`` ``N;`` |
| ``nLilia`` | ``Str`` ``->`` ``N;`` |
| ``nKobieta`` | ``Str`` ``->`` ``N;`` |
| ``nLiczba`` | ``Str`` ``->`` ``N;`` |
| ``nSila`` | ``Str`` ``->`` ``N;`` |
| ``nDoba`` | ``Str`` ``->`` ``N;`` |
| ``nWoda`` | ``Str`` ``->`` ``N;`` |
| ``nSzkola`` | ``Str`` ``->`` ``N;`` |
| ``nWojna`` | ``Str`` ``->`` ``N;`` |
| ``nWiosna`` | ``Str`` ``->`` ``N;`` |
| ``nMgla`` | ``Str`` ``->`` ``N;`` |
| ``nGwiazda`` | ``Str`` ``->`` ``N;`` |
| ``nUlica`` | ``Str`` ``->`` ``N;`` |
| ``nOwca`` | ``Str`` ``->`` ``N;`` |
| ``nDanie`` | ``Str`` ``->`` ``N;`` |
| ``nSerce`` | ``Str`` ``->`` ``N;`` |
| ``nNasienie`` | ``Str`` ``->`` ``N;`` |
| ``nMorze`` | ``Str`` ``->`` ``N;`` |
| ``nImie`` | ``Str`` ``->`` ``N;`` |
| ``nCiele`` | ``Str`` ``->`` ``N;`` |
| ``nUdo`` | ``Str`` ``->`` ``N;`` |
| ``nPiwo`` | ``Str`` ``->`` ``N;`` |
| ``nZero`` | ``Str`` ``->`` ``N;`` |
| ``nNiebo`` | ``Str`` ``->`` ``N;`` |
| ``nTlo`` | ``Str`` ``->`` ``N;`` |
| ``nZebro`` | ``Str`` ``->`` ``N;`` |
| ``nOkno`` | ``Str`` ``->`` ``N;`` |
| ``nGniazdo`` | ``Str`` ``->`` ``N;`` |
| ``nWojsko`` | ``Str`` ``->`` ``N;`` |
| ``nJajo`` | ``Str`` ``->`` ``N;`` |
| ``nJablko`` | ``Str`` ``->`` ``N;`` |
| ``nStudio`` | ``Str`` ``->`` ``N;`` |
| ``nDziecko`` | ``Str`` ``->`` ``N;`` |
| ``nUcho`` | ``Str`` ``->`` ``N;`` |
| ``nOko`` | ``Str`` ``->`` ``N;`` |
| ``nFacet`` | ``Str`` ``->`` ``N;`` |
| ``nArab`` | ``Str`` ``->`` ``N;`` |
| ``nPrzyjaciel`` | ``Str`` ``->`` ``N;`` |
| ``nKowal`` | ``Str`` ``->`` ``N;`` |
| ``nLekarz`` | ``Str`` ``->`` ``N;`` |
| ``nKrol`` | ``Str`` ``->`` ``N;`` |
| ``nMaz`` | ``Str`` ``->`` ``N;`` |
| ``nWrog`` | ``Str`` ``->`` ``N;`` |
| ``nKsiadz`` | ``Str`` ``->`` ``N;`` |
| ``nOjciec`` | ``Str`` ``->`` ``N;`` |
| ``nBrat`` | ``Str`` ``->`` ``N;`` |
| ``nBog`` | ``Str`` ``->`` ``N;`` |
| ``nChlopiec`` | ``Str`` ``->`` ``N;`` |
| ``nMezczyzna`` | ``Str`` ``->`` ``N;`` |
| ``nKon`` | ``Str`` ``->`` ``N;`` |
| ``nWaz`` | ``Str`` ``->`` ``N;`` |
| ``nPtak`` | ``Str`` ``->`` ``N;`` |
| ``nKot`` | ``Str`` ``->`` ``N;`` |
| ``nPies`` | ``Str`` ``->`` ``N;`` |
| ``nBat`` | ``Str`` ``->`` ``N;`` |
| ``nChleb`` | ``Str`` ``->`` ``N;`` |
| ``nSer`` | ``Str`` ``->`` ``N;`` |
| ``nZab`` | ``Str`` ``->`` ``N;`` |
| ``nKosciol`` | ``Str`` ``->`` ``N;`` |
| ``nCien`` | ``Str`` ``->`` ``N;`` |
| ``nPien`` | ``Str`` ``->`` ``N;`` |
| ``nLisc`` | ``Str`` ``->`` ``N;`` |
| ``nKoc`` | ``Str`` ``->`` ``N;`` |
| ``nWiersz`` | ``Str`` ``->`` ``N;`` |
| ``nDzien`` | ``Str`` ``->`` ``N;`` |
| ``nKajak`` | ``Str`` ``->`` ``N;`` |
| ``nMlotek`` | ``Str`` ``->`` ``N;`` |
| ``nMiech`` | ``Str`` ``->`` ``N;`` |
| ``nSad`` | ``Str`` ``->`` ``N;`` |
| ``nDym`` | ``Str`` ``->`` ``N;`` |
| ``nWal`` | ``Str`` ``->`` ``N;`` |
| ``nDol`` | ``Str`` ``->`` ``N;`` |
| ``nOgrod`` | ``Str`` ``->`` ``N;`` |
| ``nKwiat`` | ``Str`` ``->`` ``N;`` |
| ``nLas`` | ``Str`` ``->`` ``N;`` |
| ``nWiatr`` | ``Str`` ``->`` ``N;`` |
| ``nPopiol`` | ``Str`` ``->`` ``N;`` |
| ``nPokoj`` | ``Str`` ``->`` ``N;`` |
| ``nGaj`` | ``Str`` ``->`` ``N;`` |
| ``nBrzeg`` | ``Str`` ``->`` ``N;`` |
| ``nRok`` | ``Str`` ``->`` ``Str`` ``->`` ``N;`` |
| ``nProg`` | ``Str`` ``->`` ``N;`` |
| ``nStatek`` | ``Str`` ``->`` ``N;`` |
| ``nDom`` | ``Str`` ``->`` ``N;`` |
| ``mkN`` | ``(nomSg,`` ``genSg,`` ``datSg,`` ``accSg,`` ``instrSg,`` ``locSg,`` ``vocSg,`` |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkFun`` | [N #N] ``->`` [Prep #Prep] ``->`` ``N2;`` |
| ``nullPrep`` | [Prep #Prep] ``=`` ``{s`` ``=`` ``[];`` ``c=`` ``GenNoPrep;`` ``lock_Prep=<>};`` |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` ``N3;`` |
| ``mkPrep`` | ``Str`` ``->`` [Case #Case] ``->`` ``Prep;`` |
| ``genPrep`` | ``Prep;`` |
| ``datPrep`` | ``Prep;`` |
| ``accPrep`` | ``Prep;`` |
| ``instrPrep`` | ``Prep;`` |
| ``bez_Prep`` | ``Prep;`` ``--without`` |
| ``dla_Prep`` | ``Prep;`` ``--for`` |
| ``do_Prep`` | ``Prep;`` ``--to`` |
| ``dookola_Prep`` | ``Prep;`` ``--(a)round`` |
| ``kolo_Prep`` | ``Prep;`` ``--near`` |
| ``obok_Prep`` | ``Prep;`` ``--beside,`` ``next`` ``to`` |
| ``od_Prep`` | ``Prep;`` ``--from`` |
| ``oprocz_Prep`` | ``Prep;`` ``--out`` ``of`` |
| ``podczas_Prep`` | ``Prep;`` ``--during`` |
| ``mimo_Prep`` | ``Prep;`` |
| ``spod_Prep`` | ``Prep;`` ``--under`` |
| ``u_Prep`` | ``Prep;`` ``--by,`` ``with`` ``(I`` ``was`` ``by`` [Peter #Peter] ``last`` ``sunday.)`` |
| ``wzdluz_Prep`` | ``Prep;`` ``--along`` |
| ``z_Prep`` | ``Prep;`` ``--from`` ``(I`` ``come`` ``from`` ``Italy.),`` ``of/`` ``from`` ``(The`` ``ring`` ``is`` ``made`` ``of`` ``silver.)`` |
| ``zamiast_Prep`` | ``Prep;`` ``--instead`` ``of`` |
| ``znad_Prep`` | ``Prep;`` ``--over,`` ``above`` |
| ``zza_Prep`` | ``Prep;`` ``--behind`` |
| ``dzieki_Prep`` | ``Prep;`` |
| ``przeciw_Prep`` | ``Prep;`` |


==Paradigms for Romanian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/romanian/ParadigmsRon.gf`` ../src/romanian/ParadigmsRon.gf]




|| Function  | Type  ||
| ``NGender`` | [Type #Type] |
| ``masculine`` | [NGender #NGender] |
| ``feminine`` | [NGender #NGender] |
| ``neuter`` | [NGender #NGender] |
| ``Gender`` | [Type #Type] |
| ``Masculine`` | [Gender #Gender] |
| ``Feminine`` | [Gender #Gender] |
| ``Anim`` | [Type #Type] |
| ``animate`` | [Anim #Anim] |
| ``inanimate`` | ``Anim;`` |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``Preposition`` | [Type #Type] |
| ``NCase`` | [Type #Type] |
| ``Acc`` | [NCase #NCase] |
| ``Dat`` | [NCase #NCase] |
| ``Gen`` | [NCase #NCase] |
| ``Nom`` | [NCase #NCase] |
| ``mkPrep`` | ``Str`` ``->`` ``NCase->`` [Bool #Bool] ``->`` [Prep #Prep] |
| ``mkPrep`` | ``Str`` ``->`` [NCase #NCase] ``->`` ``Prep;`` |
| ``noPrep`` | [NCase #NCase] ``->`` [Prep #Prep] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] ``=`` ``mkPropN`` |
| ``mkPN`` | ``Str`` ``->`` ``Str`` ``->`` [Gender #Gender] ``->`` [Number #Number] ``->`` [PN #PN] ``=`` ``mkPropNI`` |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] ``=`` ``mkPropNoun`` |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [Number #Number] ``->`` [PN #PN] ``=`` ``mkProperNoun;`` |
| ``mkInAn`` | [PN #PN] ``->`` [PN #PN] ``=`` ``\romania`` ``->`` |
| ``mkPropNI`` | ``Str`` ``->`` ``Str`` ``->`` [Gender #Gender] ``->`` [Number #Number] ``->`` [PN #PN] ``=`` |
| ``mkPropN`` | ``Str`` ``->`` [PN #PN] ``=`` ``\Ion`` ``->`` |
| ``mkPropNoun`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] ``=`` ``\Ion,`` ``gen`` ``->`` |
| ``mkProperNoun`` | ``Str`` ``->`` [Gender #Gender] ``->`` [Number #Number] ``->`` [PN #PN] ``=`` ``\Ion,`` ``gen,`` ``num`` ``->`` |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |


==Paradigms for Russian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/russian/ParadigmsRus.gf`` ../src/russian/ParadigmsRus.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``neuter`` | [Gender #Gender] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``dative`` | [Case #Case] |
| ``accusative`` | [Case #Case] |
| ``instructive`` | [Case #Case] |
| ``prepositional`` | [Case #Case] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``mkN`` | ``(karta`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(tigr`` ``:`` ``Str)`` ``->`` [Animacy #Animacy] ``->`` [N #N] |
| ``mkN`` | ``(nomSg,`` ``genSg,`` ``datSg,`` ``accSg,`` ``instSg,`` ``preposSg,`` ``prepos2Sg,`` ``nomPl,`` ``genPl,`` ``datPl,`` ``accPl,`` ``instPl,`` ``preposPl`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [Animacy #Animacy] ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [Animacy #Animacy] ``->`` [PN #PN] |
| ``nounPN`` | [N #N] ``->`` [PN #PN] |
| ``mkA`` | ``(positive`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(positive,`` ``comparative`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` ``Str`` ``->`` [Case #Case] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkV`` | [Aspect #Aspect] ``->`` ``(presentSgP1,presentSgP2,presentSgP3,`` |
| ``pastSgP1,imperative,infinitive`` | ``Str)`` ``->`` [V #V] |
| ``mkV2`` | [V #V] ``->`` ``Str`` ``->`` [Case #Case] ``->`` [V2 #V2] |
| ``mkV3`` | [V #V] ``->`` ``Str`` ``->`` ``Str`` ``->`` [Case #Case] ``->`` [Case #Case] ``->`` [V3 #V3] |
| ``dirV2`` | [V #V] ``->`` [V2 #V2] |
| ``tvDirDir`` | [V #V] ``->`` [V3 #V3] |


==Paradigms for Spanish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/spanish/ParadigmsSpa.gf`` ../src/spanish/ParadigmsSpa.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``accusative`` | [Prep #Prep] |
| ``genitive`` | [Prep #Prep] |
| ``dative`` | [Prep #Prep] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``mkN`` | ``(luz`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(baston,bastones`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``compN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``deN2`` | [N #N] ``->`` [N2 #N2] |
| ``aN2`` | [N #N] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``(Anna`` ``:`` ``Str)`` ``->`` [PN #PN] |
| ``mkPN`` | ``(Pilar`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkA`` | ``(util`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(solo,sola,solos,solas,solamente`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(bueno`` ``:`` ``A)`` ``->`` ``(mejor`` ``:`` ``A)`` ``->`` [A #A] |
| ``prefixA`` | [A #A] ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``(pagar`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(mostrar,muestro`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | [Verbum #Verbum] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``special_ppV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``v2V`` | [V2 #V2] ``->`` [V #V] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``deVV`` | [V #V] ``->`` [VV #VV] |
| ``aVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Swedish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/swedish/ParadigmsSwe.gf`` ../src/swedish/ParadigmsSwe.gf]




|| Function  | Type  ||
| ``Gender`` | [Type #Type] |
| ``utrum`` | [Gender #Gender] |
| ``neutrum`` | [Gender #Gender] |
| ``Number`` | [Type #Type] |
| ``singular`` | [Number #Number] |
| ``plural`` | [Number #Number] |
| ``Case`` | [Type #Type] |
| ``nominative`` | [Case #Case] |
| ``genitive`` | [Case #Case] |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] |
| ``noPrep`` | [Prep #Prep] |
| ``mkN`` | ``(apa`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(lik`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(nyckel,nycklar`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN`` | ``(museum,museet,museer,museerna`` ``:`` ``Str)`` ``->`` [N #N] |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkPN`` | ``(jesus,jesu`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [PN #PN] |
| ``mkA`` | ``(billig`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(bred,brett`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(tung,tyngre,tyngst`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(god,gott,goda,battre,bast`` ``:`` ``Str)`` ``->`` [A #A] |
| ``mkA`` | ``(liten,litet,lilla,sma,mindre,minst,minsta`` ``:`` ``Str)`` ``->`` [A #A] |
| ``compoundA`` | [A #A] ``->`` [A #A] |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkV`` | ``(stämmer`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(dricka,drack,druckit`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | ``(gå,går,gå,gick,gått,gången`` ``:`` ``Str)`` ``->`` [V #V] |
| ``mkV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] |
| ``depV`` | [V #V] ``->`` [V #V] |
| ``reflV`` | [V #V] ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | ``Str`` ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] |
| ``mkV3`` | ``Str`` ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] |
| ``mkVS`` | [V #V] ``->`` [VS #VS] |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] |
| ``mkVV`` | [V #V] ``->`` [VV #VV] |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] |
| ``mkVA`` | [V #V] ``->`` [VA #VA] |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] |
| ``mkAS`` | [A #A] ``->`` [AS #AS] |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] |
| ``mkAV`` | [A #A] ``->`` [AV #AV] |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] |
| ``V0`` | [Type #Type] |


==Paradigms for Urdu==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/urdu/ParadigmsUrd.gf`` ../src/urdu/ParadigmsUrd.gf]




|| Function  | Type  ||
| ``masculine`` | [Gender #Gender] |
| ``feminine`` | [Gender #Gender] |
| ``singular`` | ``Number;`` |
| ``plural`` | ``Number;`` |
| ``mkN`` | ``Str`` ``->`` [N #N] |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN`` | ``(x1,_,_,_,_,x6`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` ``Str`` ``->`` ``N2;`` |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` ``Str`` ``->`` ``Str->`` [N3 #N3] |
| ``mkCmpdNoun`` | ``Str`` ``->`` [N #N] ``->`` [N #N] |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] ``=`` ``\s`` ``->`` ``let`` ``n`` ``=`` ``regNoun`` ``s`` ``in`` ``{s`` ``=`` ``n.s`` ``!`` [Sg #Sg] ``g`` ``=`` ``n.g`` ``lock_PN`` ``=`` ``<>}`` |
| ``personalPN`` | ``Str`` ``->`` ``Str`` ``->`` ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Gender #Gender] ``->`` [UPerson #UPerson] ``->`` [Pron #Pron] ``=`` ``\s1,s2,s3,sp,nn,g,p`` ``->`` ``let`` ``n`` ``=`` ``mkPron`` ``s1`` ``s2`` ``s3`` ``in`` ``{s`` ``=`` ``n.s`` ``a`` ``=`` ``toAgr`` ``nn`` ``p`` ``g`` ``ps`` ``=`` ``sp`` ``lock_Pron`` ``=`` ``<>};`` |
| ``demoPN`` | ``Str`` ``->`` ``Str`` ``->`` ``Str`` ``->`` [Quant #Quant] ``=`` ``\s1,s2,s3`` ``->`` ``let`` ``n`` ``=`` ``makeDemonPronForm`` ``s1`` ``s2`` ``s3`` ``in`` ``{s`` ``=`` ``n.s`` ``a`` ``=`` ``defaultAgr`` ``lock_Quant`` ``=`` ``<>};`` |
| ``mkDet`` | ``Str`` ``->`` ``Str`` ``->`` ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Det #Det] ``=`` ``\s1,s2,s3,s4,nb`` ``->`` ``let`` ``dt`` ``=`` ``makeDet`` ``s1`` ``s2`` ``s3`` ``s4`` ``nb`` ``in`` ``{s`` ``=`` ``dt.s`` ``n`` ``=`` ``nb`` ``lock_Det`` ``=`` ``<>};`` |
| ``mkIP`` | ``(x1,x2,x3:Str)`` ``->`` [Number #Number] ``->`` [Gender #Gender] ``->`` [IP #IP] ``=`` ``\s1,s2,s3,n,g`` ``->`` ``let`` ``p`` ``=`` ``mkIntPronForm`` ``s1`` ``s2`` ``s3`` ``in`` ``{`` ``s`` ``=`` ``p.s`` ``n`` ``=`` ``n`` ``g`` ``=`` ``g`` ``lock_IP`` ``=`` ``<>};`` |
| ``mkAdN`` | ``Str`` ``->`` [AdN #AdN] ``=`` ``\s`` ``->`` ``{s`` ``=`` ``s`` ``p`` ``=`` [False #False] ``lock_AdN`` ``=`` ``<>}`` |
| ``mkA`` | ``Str->`` [A #A] |
| ``mkA`` | ``Str`` ``->`` ``Str`` ``->`` [A2 #A2] |
| ``mkA2`` | [A #A] ``->`` ``Str`` ``->`` [A2 #A2] |
| ``mkV`` | ``Str`` ``->`` [V #V] |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] |
| ``mkV2`` | [V #V] ``->`` ``Str`` ``->`` [V2 #V2] |
| ``dirV2`` | [V #V] ``->`` [V2 #V2] ``=`` ``\v`` ``->`` ``v`` ``**`` ``{c2`` ``=`` ``{s`` ``=`` ``[]`` ``c`` ``=`` ``VTrans}`` ``lock_V2`` ``=`` ``<>}`` |
| ``mkV3`` | [V #V] ``->`` ``Str`` ``->`` ``Str`` ``->`` ``V3;`` |
| ``mkV2V`` | [V #V] ``->`` ``Str`` ``->`` ``Str`` ``->`` [Bool #Bool] ``->`` [V2V #V2V] |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] |
| ``compoundV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] ``=`` ``\s,v`` ``->`` ``{s`` ``=`` ``\\vf`` ``=>`` ``s`` ``++`` ``v.s`` ``!`` ``vf`` ``lock_V`` ``=`` ``<>}`` |
| ``compoundV`` | ``Str`` ``->`` [V2 #V2] ``->`` [V #V] ``=`` ``\s,v`` ``->`` ``{s`` ``=`` ``\\vf`` ``=>`` ``s`` ``++`` ``v.s`` ``!`` ``vf`` ``lock_V`` ``=`` ``<>}`` |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] ``=`` ``\str`` ``->`` ``{s`` ``=`` ``\\_`` ``=>`` ``str`` ``lock_Adv`` ``=`` ``<>};`` |
| ``mkPrep`` | ``Str`` ``->`` ``Str`` ``->`` [Prep #Prep] |
| ``mkConj`` | ``Str`` ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] |
| ``mkConj`` | ``Str`` ``->`` [Conj #Conj] ``=`` ``\y`` ``->`` ``mk2Conj`` ``[]`` ``y`` ``plural`` |
| ``mkConj`` | ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] ``=`` ``\y,n`` ``->`` ``mk2Conj`` ``[]`` ``y`` ``n`` |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Conj #Conj] ``=`` ``\x,y`` ``->`` ``mk2Conj`` ``x`` ``y`` ``plural`` |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] ``=`` ``mk2Conj`` |
| ``mk2Conj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] ``=`` ``\x,y,n`` ``->`` |
| ``mkVS`` | [V #V] ``->`` ``VS;`` |
| ``mkVV`` | [V #V] ``->`` [VV #VV] ``=`` ``\v`` ``->`` ``lin`` [VV #VV] ``(v`` ``**`` ``{isAux`` ``=`` ``False});`` |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] |




%!include: synopsis-browse.txt


=An Example of Usage=


%!include: synopsis-example.txt

