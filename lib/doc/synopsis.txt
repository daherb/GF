GF Resource Grammar Library: Synopsis
B. Bringert, T. Hallgren, and A. Ranta


%!Encoding:utf-8
%!style(html): ./revealpopup.css


%!postproc(html): '#divreveal'  '<div class=reveal>'
%!postproc(html): '#divpopup'  '<div class=popup>'
%!postproc(html): '#ediv'  '</div>'
%!postproc(html): '#UL'  '<ul>'
%!postproc(html): '#EUL'  '</ul>'
%!postproc(html): '#LI'  '<li>'
%!postproc(html): '(SRC="categories.png")'  '\1 USEMAP="#categories"'
%!postproc(html): '#LParadigms'  '<a name="RParadigms"></a>'
%!postproc(tex): '#LParadigms' ''
%!postproc(html): '(?i)(HREF="#A")( TITLE="[^"]*")?'  '\1 TITLE="A - one-place adjective"'
%!postproc(html): '(?i)(HREF="#A2")( TITLE="[^"]*")?'  '\1 TITLE="A2 - two-place adjective"'
%!postproc(html): '(?i)(HREF="#AP")( TITLE="[^"]*")?'  '\1 TITLE="AP - adjectival phrase"'
%!postproc(html): '(?i)(HREF="#AdA")( TITLE="[^"]*")?'  '\1 TITLE="AdA - adjective-modifying adverb"'
%!postproc(html): '(?i)(HREF="#AdN")( TITLE="[^"]*")?'  '\1 TITLE="AdN - numeral-modifying adverb"'
%!postproc(html): '(?i)(HREF="#AdV")( TITLE="[^"]*")?'  '\1 TITLE="AdV - adverb directly attached to verb"'
%!postproc(html): '(?i)(HREF="#Adv")( TITLE="[^"]*")?'  '\1 TITLE="Adv - verb-phrase-modifying adverb"'
%!postproc(html): '(?i)(HREF="#Ant")( TITLE="[^"]*")?'  '\1 TITLE="Ant - anteriority"'
%!postproc(html): '(?i)(HREF="#CAdv")( TITLE="[^"]*")?'  '\1 TITLE="CAdv - comparative adverb"'
%!postproc(html): '(?i)(HREF="#CN")( TITLE="[^"]*")?'  '\1 TITLE="CN - common noun (without determiner)"'
%!postproc(html): '(?i)(HREF="#Card")( TITLE="[^"]*")?'  '\1 TITLE="Card - cardinal number"'
%!postproc(html): '(?i)(HREF="#Cl")( TITLE="[^"]*")?'  '\1 TITLE="Cl - declarative clause, with all tenses"'
%!postproc(html): '(?i)(HREF="#Comp")( TITLE="[^"]*")?'  '\1 TITLE="Comp - complement of copula, such as AP"'
%!postproc(html): '(?i)(HREF="#Conj")( TITLE="[^"]*")?'  '\1 TITLE="Conj - conjunction"'
%!postproc(html): '(?i)(HREF="#Det")( TITLE="[^"]*")?'  '\1 TITLE="Det - determiner phrase"'
%!postproc(html): '(?i)(HREF="#Digits")( TITLE="[^"]*")?'  '\1 TITLE="Digits - cardinal or ordinal in digits"'
%!postproc(html): '(?i)(HREF="#IAdv")( TITLE="[^"]*")?'  '\1 TITLE="IAdv - interrogative adverb"'
%!postproc(html): '(?i)(HREF="#IComp")( TITLE="[^"]*")?'  '\1 TITLE="IComp - interrogative complement of copula"'
%!postproc(html): '(?i)(HREF="#IDet")( TITLE="[^"]*")?'  '\1 TITLE="IDet - interrogative determiner"'
%!postproc(html): '(?i)(HREF="#IP")( TITLE="[^"]*")?'  '\1 TITLE="IP - interrogative pronoun"'
%!postproc(html): '(?i)(HREF="#Imp")( TITLE="[^"]*")?'  '\1 TITLE="Imp - imperative"'
%!postproc(html): '(?i)(HREF="#Interj")( TITLE="[^"]*")?'  '\1 TITLE="Interj - interjection"'
%!postproc(html): '(?i)(HREF="#N")( TITLE="[^"]*")?'  '\1 TITLE="N - common noun"'
%!postproc(html): '(?i)(HREF="#N2")( TITLE="[^"]*")?'  '\1 TITLE="N2 - relational noun"'
%!postproc(html): '(?i)(HREF="#N3")( TITLE="[^"]*")?'  '\1 TITLE="N3 - three-place relational noun"'
%!postproc(html): '(?i)(HREF="#NP")( TITLE="[^"]*")?'  '\1 TITLE="NP - noun phrase (subject or object)"'
%!postproc(html): '(?i)(HREF="#Num")( TITLE="[^"]*")?'  '\1 TITLE="Num - number determining element"'
%!postproc(html): '(?i)(HREF="#Numeral")( TITLE="[^"]*")?'  '\1 TITLE="Numeral - cardinal or ordinal in words"'
%!postproc(html): '(?i)(HREF="#Ord")( TITLE="[^"]*")?'  '\1 TITLE="Ord - ordinal number (used in Det)"'
%!postproc(html): '(?i)(HREF="#PConj")( TITLE="[^"]*")?'  '\1 TITLE="PConj - phrase-beginning conjunction"'
%!postproc(html): '(?i)(HREF="#PN")( TITLE="[^"]*")?'  '\1 TITLE="PN - proper name"'
%!postproc(html): '(?i)(HREF="#Phr")( TITLE="[^"]*")?'  '\1 TITLE="Phr - phrase in a text"'
%!postproc(html): '(?i)(HREF="#Pol")( TITLE="[^"]*")?'  '\1 TITLE="Pol - polarity"'
%!postproc(html): '(?i)(HREF="#Predet")( TITLE="[^"]*")?'  '\1 TITLE="Predet - predeterminer (prefixed Quant)"'
%!postproc(html): '(?i)(HREF="#Prep")( TITLE="[^"]*")?'  '\1 TITLE="Prep - preposition, or just case"'
%!postproc(html): '(?i)(HREF="#Pron")( TITLE="[^"]*")?'  '\1 TITLE="Pron - personal pronoun"'
%!postproc(html): '(?i)(HREF="#QCl")( TITLE="[^"]*")?'  '\1 TITLE="QCl - question clause, with all tenses"'
%!postproc(html): '(?i)(HREF="#QS")( TITLE="[^"]*")?'  '\1 TITLE="QS - question"'
%!postproc(html): '(?i)(HREF="#Quant")( TITLE="[^"]*")?'  '\1 TITLE="Quant - quantifier ('nucleus' of Det)"'
%!postproc(html): '(?i)(HREF="#RCl")( TITLE="[^"]*")?'  '\1 TITLE="RCl - relative clause, with all tenses"'
%!postproc(html): '(?i)(HREF="#RP")( TITLE="[^"]*")?'  '\1 TITLE="RP - relative pronoun"'
%!postproc(html): '(?i)(HREF="#RS")( TITLE="[^"]*")?'  '\1 TITLE="RS - relative"'
%!postproc(html): '(?i)(HREF="#S")( TITLE="[^"]*")?'  '\1 TITLE="S - declarative sentence"'
%!postproc(html): '(?i)(HREF="#SC")( TITLE="[^"]*")?'  '\1 TITLE="SC - embedded sentence or question"'
%!postproc(html): '(?i)(HREF="#Subj")( TITLE="[^"]*")?'  '\1 TITLE="Subj - subjunction"'
%!postproc(html): '(?i)(HREF="#Temp")( TITLE="[^"]*")?'  '\1 TITLE="Temp - temporal and aspectual features"'
%!postproc(html): '(?i)(HREF="#Tense")( TITLE="[^"]*")?'  '\1 TITLE="Tense - tense"'
%!postproc(html): '(?i)(HREF="#Text")( TITLE="[^"]*")?'  '\1 TITLE="Text - text consisting of several phrases"'
%!postproc(html): '(?i)(HREF="#Utt")( TITLE="[^"]*")?'  '\1 TITLE="Utt - sentence, question, word..."'
%!postproc(html): '(?i)(HREF="#V")( TITLE="[^"]*")?'  '\1 TITLE="V - one-place verb"'
%!postproc(html): '(?i)(HREF="#V2")( TITLE="[^"]*")?'  '\1 TITLE="V2 - two-place verb"'
%!postproc(html): '(?i)(HREF="#V2A")( TITLE="[^"]*")?'  '\1 TITLE="V2A - verb with NP and AP complement"'
%!postproc(html): '(?i)(HREF="#V2Q")( TITLE="[^"]*")?'  '\1 TITLE="V2Q - verb with NP and Q complement"'
%!postproc(html): '(?i)(HREF="#V2S")( TITLE="[^"]*")?'  '\1 TITLE="V2S - verb with NP and S complement"'
%!postproc(html): '(?i)(HREF="#V2V")( TITLE="[^"]*")?'  '\1 TITLE="V2V - verb with NP and V complement"'
%!postproc(html): '(?i)(HREF="#V3")( TITLE="[^"]*")?'  '\1 TITLE="V3 - three-place verb"'
%!postproc(html): '(?i)(HREF="#VA")( TITLE="[^"]*")?'  '\1 TITLE="VA - adjective-complement verb"'
%!postproc(html): '(?i)(HREF="#VP")( TITLE="[^"]*")?'  '\1 TITLE="VP - verb phrase"'
%!postproc(html): '(?i)(HREF="#VPSlash")( TITLE="[^"]*")?'  '\1 TITLE="VPSlash - verb phrase missing complement"'
%!postproc(html): '(?i)(HREF="#VQ")( TITLE="[^"]*")?'  '\1 TITLE="VQ - question-complement verb"'
%!postproc(html): '(?i)(HREF="#VS")( TITLE="[^"]*")?'  '\1 TITLE="VS - sentence-complement verb"'
%!postproc(html): '(?i)(HREF="#VV")( TITLE="[^"]*")?'  '\1 TITLE="VV - verb-phrase-complement verb"'
%!postproc(html): '(?i)(HREF="#Voc")( TITLE="[^"]*")?'  '\1 TITLE="Voc - vocative or "please""'
%!include: synopsis-intro.txt
=Categories=


Source 1: [``http://www.grammaticalframework.org/lib/resource/src/abstract/Common.gf`` ../src/abstract/Common.gf]


Source 2: [``http://www.grammaticalframework.org/lib/resource/src/abstract/Cat.gf`` ../src/abstract/Cat.gf]


==A hierarchic view==

%!include: categories-intro.txt
==Explanations==

|| Category  | Explanation  | Example  ||
| [A #A] | one-place adjective | //warm// |
| [A2 #A2] | two-place adjective | //divisible// |
| [AP #AP] | adjectival phrase | //very warm// |
| [AdA #AdA] | adjective-modifying adverb | //very// |
| [AdN #AdN] | numeral-modifying adverb | //more than// |
| [AdV #AdV] | adverb directly attached to verb | //always// |
| [Adv #Adv] | verb-phrase-modifying adverb | //in the house// |
| [Ant #Ant] | anteriority | simultaneous, anterior |
| [CAdv #CAdv] | comparative adverb | //more// |
| [CN #CN] | common noun (without determiner) | //red house// |
| [Card #Card] | cardinal number | //seven// |
| [Cl #Cl] | declarative clause, with all tenses | //she looks at this// |
| [Comp #Comp] | complement of copula, such as AP | //very warm// |
| [Conj #Conj] | conjunction | //and// |
| [Det #Det] | determiner phrase | //those seven// |
| [Digits #Digits] | cardinal or ordinal in digits | //1,000/1,000th// |
| [IAdv #IAdv] | interrogative adverb | //why// |
| [IComp #IComp] | interrogative complement of copula | //where// |
| [IDet #IDet] | interrogative determiner | //how many// |
| [IP #IP] | interrogative pronoun | //who// |
| [Imp #Imp] | imperative | //look at this// |
| [Interj #Interj] | interjection | //alas// |
| [N #N] | common noun | //house// |
| [N2 #N2] | relational noun | //son// |
| [N3 #N3] | three-place relational noun | //connection// |
| [NP #NP] | noun phrase (subject or object) | //the red house// |
| [Num #Num] | number determining element | //seven// |
| [Numeral #Numeral] | cardinal or ordinal in words | //five/fifth// |
| [Ord #Ord] | ordinal number (used in Det) | //seventh// |
| [PConj #PConj] | phrase-beginning conjunction | //therefore// |
| [PN #PN] | proper name | //Paris// |
| [Phr #Phr] | phrase in a text | //but be quiet please// |
| [Pol #Pol] | polarity | positive, negative |
| [Predet #Predet] | predeterminer (prefixed Quant) | //all// |
| [Prep #Prep] | preposition, or just case | //in// |
| [Pron #Pron] | personal pronoun | //she// |
| [QCl #QCl] | question clause, with all tenses | //why does she walk// |
| [QS #QS] | question | //where did she live// |
| [Quant #Quant] | quantifier ('nucleus' of Det) | //this/these// |
| [RCl #RCl] | relative clause, with all tenses | //in which she lives// |
| [RP #RP] | relative pronoun | //in which// |
| [RS #RS] | relative | //in which she lived// |
| [S #S] | declarative sentence | //she lived here// |
| [SC #SC] | embedded sentence or question | //that it rains// |
| [Subj #Subj] | subjunction | //if// |
| [Temp #Temp] | temporal and aspectual features | past anterior |
| [Tense #Tense] | tense | present, past, future |
| [Text #Text] | text consisting of several phrases | //He is here. Why?// |
| [Utt #Utt] | sentence, question, word... | //be quiet// |
| [V #V] | one-place verb | //sleep// |
| [V2 #V2] | two-place verb | //love// |
| [V2A #V2A] | verb with NP and AP complement | //paint// |
| [V2Q #V2Q] | verb with NP and Q complement | //ask// |
| [V2S #V2S] | verb with NP and S complement | //tell// |
| [V2V #V2V] | verb with NP and V complement | //cause// |
| [V3 #V3] | three-place verb | //show// |
| [VA #VA] | adjective-complement verb | //look// |
| [VP #VP] | verb phrase | //is very warm// |
| [VPSlash #VPSlash] | verb phrase missing complement | //give to John// |
| [VQ #VQ] | question-complement verb | //wonder// |
| [VS #VS] | sentence-complement verb | //claim// |
| [VV #VV] | verb-phrase-complement verb | //want// |
| [Voc #Voc] | vocative or "please" | //my darling// |


=Syntax Rules and Structural Words=


Source 1: [``http://www.grammaticalframework.org/lib/resource/src/api/Constructors.gf`` ../src/api/Constructors.gf]


Source 2: [``http://www.grammaticalframework.org/lib/resource/src/abstract/Structural.gf`` ../src/abstract/Structural.gf]


==A - one-place adjective==[A]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==A2 - two-place adjective==[A2]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==AP - adjectival phrase==[AP]
|| Function  | Type  | Example  ||
| ``comparAP`` | [A #A] ``->`` [AP #AP] | #divreveal //warmer// #divpopup #UL #LIAPI: ``mkUtt (comparAP warm_A)`` #LIBul: //по - топъл// #LICat: //més tebi// #LIDan: //varmere// #LIDut: //warmer// #LIEng: //warmer// #LIFin: //lämpimämpi// #LIFre: //plus chaud// #LIGer: //wärmer// #LIIta: //più caldo// #LINor: //varmere// #LIPol: //cieplejszy// #LIRon: //mai călduţ// #LIRus: //тёплее// #LISpa: //más tibio// #LISwe: //varmare// #LIUrd: //گرم// #EUL #ediv #ediv |
| ``mkAP`` | [A #A] ``->`` [AP #AP] | #divreveal //warm// #divpopup #UL #LIAPI: ``mkAP warm_A`` #LIBul: //топъл// #LICat: //tebi// #LIDan: //varm// #LIDut: //warm// #LIEng: //warm// #LIFin: //lämmin// #LIFre: //chaud// #LIGer: //warm// #LIIta: //caldo// #LINor: //varm// #LIPol: //ciepły// #LIRon: //călduţ// #LIRus: //тёплый// #LISpa: //tibio// #LISwe: //varm// #LIUrd: //گرم// #EUL #ediv #ediv |
| ``mkAP`` | [A #A] ``->`` [NP #NP] ``->`` [AP #AP] | #divreveal //warmer than Paris// #divpopup #UL #LIAPI: ``mkAP warm_A (mkNP paris_PN)`` #LIBul: //по - топъл от Париж// #LICat: //més tebi que Paris// #LIDan: //varmere end Paris// #LIDut: //warmer dan Parijs// #LIEng: //warmer than Paris// #LIFin: //Pariisia lämpimämpi// #LIFre: //plus chaud que Paris// #LIGer: //wärmer als Paris// #LIIta: //più caldo di Parigi// #LINor: //varmere enn Paris// #LIPol: //cieplejszy niż Paryż// #LIRon: //mai călduţ decât Paris// #LIRus: //тёплее Парижа// #LISpa: //más tibio que Paris// #LISwe: //varmare än Paris// #LIUrd: //پیرس سے گرم// #EUL #ediv #ediv |
| ``mkAP`` | [A2 #A2] ``->`` [NP #NP] ``->`` [AP #AP] | #divreveal //married to her// #divpopup #UL #LIAPI: ``mkAP married_A2 she_NP`` #LIBul: //женен за нея// #LICat: //casat a ella// #LIDan: //gift med hende// #LIDut: //getrouwd met haar// #LIEng: //married to her// #LIFin: //hänen kanssa avioitunut// #LIFre: //marié à elle// #LIGer: //verheiratet mit ihr// #LIIta: //sposato con lei// #LINor: //gift med henne// #LIPol: //zaślubiony jej// #LIRon: //căsătorit cu ea// #LIRus: //замужем за ей// #LISpa: //casado a ella// #LISwe: //gift med henne// #LIUrd: //اس سے شادy?كرنا// #EUL #ediv #ediv |
| ``mkAP`` | [A2 #A2] ``->`` [AP #AP] | #divreveal //married// #divpopup #UL #LIAPI: ``mkAP married_A2`` #LIBul: //женен// #LICat: //casat// #LIDan: //gift// #LIDut: //getrouwd// #LIEng: //married// #LIFin: //avioitunut// #LIFre: //marié// #LIGer: //verheiratet// #LIIta: //sposato// #LINor: //gift// #LIPol: //zaślubiony// #LIRon: //căsătorit// #LIRus: //замужем// #LISpa: //casado// #LISwe: //gift// #LIUrd: //شادy?كرنا// #EUL #ediv #ediv |
| ``mkAP`` | [AP #AP] ``->`` [S #S] ``->`` [AP #AP] | #divreveal //it is good that she sleeps// #divpopup #UL #LIAPI: ``mkCl (mkVP (mkAP (mkAP good_A) (mkS (mkCl she_NP sleep_V))))`` #LIBul: //е добро , че тя спи// #LICat: //és bo que ella dorm// #LIDan: //det er godt at hun sover// #LIDut: //'t is goed dat ze slaapt// #LIEng: //it is good that she sleeps// #LIFin: //on hyvä että hän nukkuu// #LIFre: //il est bon qu' elle dort// #LIGer: //es ist gut daß sie schläft// #LIIta: //è buono che lei dorme// #LINor: //det er godt at hun sover// #LIPol: //jest dobrze , że ona śpi// #LIRon: //este bun cã ea doarme// #LIRus: //хорошее , что она спдит// #LISpa: //es bueno que ella duerme// #LISwe: //det är gott att hon sover// #LIUrd: //اچھا كہ وہ سوتی ہے ہے// #EUL #ediv #ediv |
| ``mkAP`` | [AP #AP] ``->`` [QS #QS] ``->`` [AP #AP] | //uncertain if she sleeps// |
| ``mkAP`` | [AP #AP] ``->`` [VP #VP] ``->`` [AP #AP] | //ready to go// |
| ``mkAP`` | [AP #AP] ``->`` [SC #SC] ``->`` [AP #AP] | //ready to go// |
| ``mkAP`` | [AdA #AdA] ``->`` [A #A] ``->`` [AP #AP] | #divreveal //very old// #divpopup #UL #LIAPI: ``mkAP very_AdA old_A`` #LIBul: //много стар// #LICat: //molt vell// #LIDan: //meget gammel// #LIDut: //erg oud// #LIEng: //very old// #LIFin: //erittäin vanha// #LIFre: //très vieux// #LIGer: //sehr alt// #LIIta: //molto vecchio// #LINor: //mye gammel// #LIPol: //bardzo stary// #LIRon: //foarte vechi// #LIRus: //очень старый// #LISpa: //muy viejo// #LISwe: //mycket gammal// #LIUrd: //بہت بوڑھا// #EUL #ediv #ediv |
| ``mkAP`` | [AdA #AdA] ``->`` [AP #AP] ``->`` [AP #AP] | #divreveal //very very old// #divpopup #UL #LIAPI: ``mkAP very_AdA (mkAP very_AdA old_A)`` #LIBul: //много много стар// #LICat: //molt molt vell// #LIDan: //meget meget gammel// #LIDut: //erg erg oud// #LIEng: //very very old// #LIFin: //erittäin erittäin vanha// #LIFre: //très très vieux// #LIGer: //sehr sehr alt// #LIIta: //molto molto vecchio// #LINor: //mye mye gammel// #LIPol: //bardzo bardzo stary// #LIRon: //foarte foarte vechi// #LIRus: //очень очень старый// #LISpa: //muy muy viejo// #LISwe: //mycket mycket gammal// #LIUrd: //بہت بہت بوڑھا// #EUL #ediv #ediv |
| ``mkAP`` | [Conj #Conj] ``->`` [AP #AP] ``->`` [AP #AP] ``->`` [AP #AP] | //old and big// |
| ``mkAP`` | [Conj #Conj] ``->`` [ListAP #ListAP] ``->`` [AP #AP] | //old, big and warm// |
| ``mkAP`` | [Ord #Ord] ``->`` [AP #AP] | //oldest// |
| ``mkAP`` | [CAdv #CAdv] ``->`` [AP #AP] ``->`` [NP #NP] ``->`` [AP #AP] | //as old as she// |
| ``reflAP`` | [A2 #A2] ``->`` [AP #AP] | //married to himself// |
==AdA - adjective-modifying adverb==[AdA]
|| Function  | Type  | Example  ||
| ``almost_AdA`` | [AdA #AdA] | //almost// |
| ``quite_Adv`` | [AdA #AdA] | //quite// |
| ``so_AdA`` | [AdA #AdA] | //so// |
| ``too_AdA`` | [AdA #AdA] | //too// |
| ``very_AdA`` | [AdA #AdA] | //very// |
==AdN - numeral-modifying adverb==[AdN]
|| Function  | Type  | Example  ||
| ``almost_AdN`` | [AdN #AdN] | //almost// |
| ``at_least_AdN`` | [AdN #AdN] | //at// |
| ``at_most_AdN`` | [AdN #AdN] | //at// |
| ``mkAdN`` | [CAdv #CAdv] ``->`` [AdN #AdN] | //more than// |
==AdV - adverb directly attached to verb==[AdV]
|| Function  | Type  | Example  ||
| ``always_AdV`` | [AdV #AdV] | //always// |
==Adv - verb-phrase-modifying adverb==[Adv]
|| Function  | Type  | Example  ||
| ``everywhere_Adv`` | [Adv #Adv] | //everywhere// |
| ``here7from_Adv`` | [Adv #Adv] | //from here// |
| ``here7to_Adv`` | [Adv #Adv] | //to here// |
| ``here_Adv`` | [Adv #Adv] | //here// |
| ``mkAdv`` | [A #A] ``->`` [Adv #Adv] | #divreveal //warmly// #divpopup #UL #LIAPI: ``mkAdv warm_A`` #LIBul: //топло// #LICat: //tebiament// #LIDan: //varmt// #LIDut: //warm// #LIEng: //warmly// #LIFin: //lämpimästi// #LIFre: //chaudement// #LIGer: //warm// #LIIta: //caldamente// #LINor: //varmt// #LIPol: //ciepło// #LIRon: //călduros// #LIRus: //тёпло// #LISpa: //tibiamente// #LISwe: //varmt// #LIUrd: //گرم// #EUL #ediv #ediv |
| ``mkAdv`` | [Prep #Prep] ``->`` [NP #NP] ``->`` [Adv #Adv] | #divreveal //in the house// #divpopup #UL #LIAPI: ``mkAdv in_Prep (mkNP the_Det house_N)`` #LIBul: //в къщата// #LICat: //en la casa// #LIDan: //i huset// #LIDut: //in het huis// #LIEng: //in the house// #LIFin: //talossa// #LIFre: //dans la maison// #LIGer: //im Haus / Hause// #LIIta: //nella casa// #LINor: //i huset// #LIPol: //w domu// #LIRon: //în casă// #LIRus: //в доме// #LISpa: //en la casa// #LISwe: //i huset// #LIUrd: //گھر معں// #EUL #ediv #ediv |
| ``mkAdv`` | [Subj #Subj] ``->`` [S #S] ``->`` [Adv #Adv] | #divreveal //when she sleeps// #divpopup #UL #LIAPI: ``mkAdv when_Subj (mkS (mkCl she_NP sleep_V))`` #LIBul: //когато тя спи// #LICat: //quan ella dorm// #LIDan: //når hun sover// #LIDut: //als ze slaapt// #LIEng: //when she sleeps// #LIFin: //kun hän nukkuu// #LIFre: //quand elle dort// #LIGer: //wenn sie schläft// #LIIta: //quando lei dorme// #LINor: //når hun sover// #LIPol: //jeśli ona śpi// #LIRon: //când ea doarme// #LIRus: //когда она спдит// #LISpa: //cuando ella duerme// #LISwe: //när hon sover// #LIUrd: //كب وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkAdv`` | [CAdv #CAdv] ``->`` [A #A] ``->`` [NP #NP] ``->`` [Adv #Adv] | #divreveal //more warmly than he// #divpopup #UL #LIAPI: ``mkAdv more_CAdv warm_A he_NP`` #LIBul: //по - топло от него// #LICat: //més tebiament que ell// #LIDan: //mer varmt end han// #LIDut: //meer warm dan hij// #LIEng: //more warmly than he// #LIFin: //enemmän lämpimästi kuin hän// #LIFre: //plus chaudement que lui// #LIGer: //mehr warm als er// #LIIta: //più caldamente di lui// #LINor: //mer varmt enn han// #LIPol: //bardziej ciepło niż on// #LIRon: //mai călduros decât el// #LIRus: //более тёпло чем он// #LISpa: //más tibiamente que él// #LISwe: //mer varmt än han// #LIUrd: //اس زیادh- گرم// #EUL #ediv #ediv |
| ``mkAdv`` | [CAdv #CAdv] ``->`` [A #A] ``->`` [S #S] ``->`` [Adv #Adv] | #divreveal //more warmly than he runs// #divpopup #UL #LIAPI: ``mkAdv more_CAdv warm_A (mkS (mkCl he_NP run_V))`` #LIBul: //по - топло от колкото той бяга// #LICat: //més tebiament que ell corri// #LIDan: //mer varmt end han løber// #LIDut: //meer warm dan hij rent// #LIEng: //more warmly than he runs// #LIFin: //enemmän lämpimästi kuin hän juoksee// #LIFre: //plus chaudement qu' il coure// #LIGer: //mehr warm als er läuft// #LIIta: //più caldamente di lui corra// #LINor: //mer varmt enn han springer// #LIPol: //bardziej ciepło niż on biegnie// #LIRon: //mai călduros decât el fuge// #LIRus: //более тёпло чем он бегает// #LISpa: //más tibiamente que el corra// #LISwe: //mer varmt än han springer// #LIUrd: //زیادh- گرم وہ دوڑتا ہے// #EUL #ediv #ediv |
| ``mkAdv`` | [AdA #AdA] ``->`` [Adv #Adv] ``->`` [Adv #Adv] | #divreveal //very warmly// #divpopup #UL #LIAPI: ``mkAdv very_AdA (mkAdv warm_A)`` #LIBul: //много топло// #LICat: //molt tebiament// #LIDan: //meget varmt// #LIDut: //erg warm// #LIEng: //very warmly// #LIFin: //erittäin lämpimästi// #LIFre: //très chaudement// #LIGer: //sehr warm// #LIIta: //molto caldamente// #LINor: //mye varmt// #LIPol: //bardzo ciepło// #LIRon: //foarte călduros// #LIRus: //очень тёпло// #LISpa: //muy tibiamente// #LISwe: //mycket varmt// #LIUrd: //بہت گرم// #EUL #ediv #ediv |
| ``mkAdv`` | [Conj #Conj] ``->`` [Adv #Adv] ``->`` [Adv #Adv] ``->`` [Adv #Adv] | #divreveal //here and now// #divpopup #UL #LIAPI: ``mkAdv and_Conj here_Adv now_Adv`` #LIBul: //тук и сега// #LICat: //aquí i ara// #LIDan: //her og nu// #LIDut: //hier en nu// #LIEng: //here and now// #LIFin: //täällä ja nyt// #LIFre: //ici et maintenant// #LIGer: //hier und jetzt// #LIIta: //quà e adesso// #LINor: //her og nå// #LIPol: //tutaj i teraz// #LIRon: //aici şi acum// #LIRus: //здесь и сейчас// #LISpa: //aquí y ahora// #LISwe: //här och nu// #LIUrd: //یہاں اور اب// #EUL #ediv #ediv |
| ``mkAdv`` | [Conj #Conj] ``->`` [ListAdv #ListAdv] ``->`` [Adv #Adv] | #divreveal //with her , here and now// #divpopup #UL #LIAPI: ``mkAdv and_Conj (mkListAdv (mkAdv with_Prep she_NP) (mkListAdv here_Adv now_Adv))`` #LIBul: //с нея , тук и сега// #LICat: //amb ella , aquí i ara// #LIDan: //med hende , her og nu// #LIDut: //met haar , hier en nu// #LIEng: //with her , here and now// #LIFin: //hänen kanssa , täällä ja nyt// #LIFre: //avec elle , ici et maintenant// #LIGer: //mit ihr , hier und jetzt// #LIIta: //con lei , quà e adesso// #LINor: //med henne , her og nå// #LIPol: //z nią , tutaj i teraz// #LIRon: //cu ea , aici şi acum// #LIRus: //с ней , здесь и сейчас// #LISpa: //con ella , aquí y ahora// #LISwe: //med henne , här och nu// #LIUrd: //اس كے ساتh- , یہاں اور اب// #EUL #ediv #ediv |
| ``somewhere_Adv`` | [Adv #Adv] | //somewhere// |
| ``there7from_Adv`` | [Adv #Adv] | //from there// |
| ``there7to_Adv`` | [Adv #Adv] | //to there// |
| ``there_Adv`` | [Adv #Adv] | //there// |
==Ant - anteriority==[Ant]
|| Function  | Type  | Example  ||
| ``anteriorAnt`` | [Ant #Ant] | #divreveal //she has slept// #divpopup #UL #LIAPI: ``mkS anteriorAnt (mkCl she_NP sleep_V)`` #LIBul: //тя е спалa// #LICat: //ella ha dormit// #LIDan: //hun har sovet// #LIDut: //ze heeft geslapen// #LIEng: //she has slept// #LIFin: //hän on nukkunut// #LIFre: //elle a dormi// #LIGer: //sie hat geschlafen// #LIIta: //lei ha dormito// #LINor: //hun har sovet// #LIPol: //ona spała// #LIRon: //ea a dormit// #LIRus: //она спдит// #LISpa: //ella ha dormido// #LISwe: //hon har sovit// #LIUrd: //وہ سو چكی ہے// #EUL #ediv #ediv |
| ``simultaneousAnt`` | [Ant #Ant] | #divreveal //she sleeps// #divpopup #UL #LIAPI: ``mkS simultaneousAnt (mkCl she_NP sleep_V)`` #LIBul: //тя спи// #LICat: //ella dorm// #LIDan: //hun sover// #LIDut: //ze slaapt// #LIEng: //she sleeps// #LIFin: //hän nukkuu// #LIFre: //elle dort// #LIGer: //sie schläft// #LIIta: //lei dorme// #LINor: //hun sover// #LIPol: //ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //hon sover// #LIUrd: //وہ سوتی ہے// #EUL #ediv #ediv |
==CAdv - comparative adverb==[CAdv]
|| Function  | Type  | Example  ||
| ``as_CAdv`` | [CAdv #CAdv] | //as// |
| ``less_CAdv`` | [CAdv #CAdv] | //less// |
| ``more_CAdv`` | [CAdv #CAdv] | //more// |
==CN - common noun (without determiner)==[CN]
|| Function  | Type  | Example  ||
| ``mkCN`` | [N #N] ``->`` [CN #CN] | #divreveal //house// #divpopup #UL #LIAPI: ``mkCN house_N`` #LIBul: //къща// #LICat: //casa// #LIDan: //hus// #LIDut: //huis// #LIEng: //house// #LIFin: //talo// #LIFre: //maison// #LIGer: //Haus// #LIIta: //casa// #LINor: //hus// #LIPol: //dom// #LIRon: //casă// #LIRus: //дом// #LISpa: //casa// #LISwe: //hus// #LIUrd: //گھر// #EUL #ediv #ediv |
| ``mkCN`` | [N2 #N2] ``->`` [NP #NP] ``->`` [CN #CN] | #divreveal //mother of the king// #divpopup #UL #LIAPI: ``mkCN mother_N2 (mkNP the_Det king_N)`` #LIBul: //майка на царя// #LICat: //mare del rei// #LIDan: //moder til kongen// #LIDut: //moeder van de koning// #LIEng: //mother of the king// #LIFin: //kuninkaan äiti// #LIFre: //mère du roi// #LIGer: //Mutter von dem König// #LIIta: //madre del ré// #LINor: //mor til kongen// #LIPol: //matka króla// #LIRon: //mamă regelui// #LIRus: //мать короля// #LISpa: //madre del rey// #LISwe: //mor till kungen// #LIUrd: //بادشاہ كی ماں// #EUL #ediv #ediv |
| ``mkCN`` | [N3 #N3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [CN #CN] | #divreveal //distance from this city to Paris// #divpopup #UL #LIAPI: ``mkCN distance_N3 (mkNP this_Det city_N) (mkNP paris_PN)`` #LIBul: //разстояние от този град до Париж// #LICat: //distància de aquesta ciutat a Paris// #LIDan: //afstand fra denne by til Paris// #LIDut: //afstand van deze stad naar Parijs// #LIEng: //distance from this city to Paris// #LIFin: //etäisyys tästä kaupungista Pariisiin// #LIFre: //distance de cette ville à Paris// #LIGer: //Entfernung von dieser Stadt zu Paris// #LIIta: //distanza di questa città a Parigi// #LINor: //avstand fra denne byen til Paris// #LIPol: //odległość z tego miasta do Paryża// #LIRon: //distanţă de la acest oraş la Paris// #LIRus: //расстояние от этого города к Парижу// #LISpa: //distancia de esta ciudad a Paris// #LISwe: //avstånd från den här staden till Paris// #LIUrd: //پیرس كا یہ شہر سے فاصلہ// #EUL #ediv #ediv |
| ``mkCN`` | [N2 #N2] ``->`` [CN #CN] | #divreveal //mother// #divpopup #UL #LIAPI: ``mkCN mother_N2`` #LIBul: //майка// #LICat: //mare// #LIDan: //moder// #LIDut: //moeder// #LIEng: //mother// #LIFin: //äiti// #LIFre: //mère// #LIGer: //Mutter// #LIIta: //madre// #LINor: //mor// #LIPol: //matka// #LIRon: //mamă// #LIRus: //мать// #LISpa: //madre// #LISwe: //mor// #LIUrd: //ماں// #EUL #ediv #ediv |
| ``mkCN`` | [N3 #N3] ``->`` [CN #CN] | #divreveal //distance// #divpopup #UL #LIAPI: ``mkCN distance_N3`` #LIBul: //разстояние// #LICat: //distància// #LIDan: //afstand// #LIDut: //afstand// #LIEng: //distance// #LIFin: //etäisyys// #LIFre: //distance// #LIGer: //Entfernung// #LIIta: //distanza// #LINor: //avstand// #LIPol: //odległość// #LIRon: //distanţă// #LIRus: //расстояние// #LISpa: //distancia// #LISwe: //avstånd// #LIUrd: //فاصلہ// #EUL #ediv #ediv |
| ``mkCN`` | [A #A] ``->`` [N #N] ``->`` [CN #CN] | #divreveal //big house// #divpopup #UL #LIAPI: ``mkCN big_A house_N`` #LIBul: //голяма къща// #LICat: //casa grosa// #LIDan: //stort hus// #LIDut: //groot huis// #LIEng: //big house// #LIFin: //suuri talo// #LIFre: //grande maison// #LIGer: //großes Haus// #LIIta: //grande casa// #LINor: //stort hus// #LIPol: //duży dom// #LIRon: //casă mare// #LIRus: //большой дом// #LISpa: //grande casa// #LISwe: //stort hus// #LIUrd: //بڑا گھر// #EUL #ediv #ediv |
| ``mkCN`` | [A #A] ``->`` [CN #CN] ``->`` [CN #CN] | #divreveal //big blue house// #divpopup #UL #LIAPI: ``mkCN big_A (mkCN blue_A house_N)`` #LIBul: //голяма синя къща// #LICat: //casa blava grosa// #LIDan: //stort blått hus// #LIDut: //groot blauw huis// #LIEng: //big blue house// #LIFin: //suuri sininen talo// #LIFre: //grande maison bleue// #LIGer: //großes blaues Haus// #LIIta: //grande casa blù// #LINor: //stort blått hus// #LIPol: //duży niebieski dom// #LIRon: //casă albastră mare// #LIRus: //большой голубой дом// #LISpa: //grande casa azul// #LISwe: //stort blått hus// #LIUrd: //بڑا نیلا گھر// #EUL #ediv #ediv |
| ``mkCN`` | [AP #AP] ``->`` [N #N] ``->`` [CN #CN] | #divreveal //very big house// #divpopup #UL #LIAPI: ``mkCN (mkAP very_AdA big_A) house_N`` #LIBul: //много голяма къща// #LICat: //casa molt grosa// #LIDan: //meget stort hus// #LIDut: //erg groot huis// #LIEng: //very big house// #LIFin: //erittäin suuri talo// #LIFre: //très grande maison// #LIGer: //sehr großes Haus// #LIIta: //molto grande casa// #LINor: //mye stort hus// #LIPol: //bardzo duży dom// #LIRon: //casă foarte mare// #LIRus: //очень большой дом// #LISpa: //muy grande casa// #LISwe: //mycket stort hus// #LIUrd: //بہت بڑا گھر// #EUL #ediv #ediv |
| ``mkCN`` | [AP #AP] ``->`` [CN #CN] ``->`` [CN #CN] | #divreveal //very big blue house// #divpopup #UL #LIAPI: ``mkCN (mkAP very_AdA big_A) (mkCN blue_A house_N)`` #LIBul: //много голяма синя къща// #LICat: //casa blava molt grosa// #LIDan: //meget stort blått hus// #LIDut: //erg groot blauw huis// #LIEng: //very big blue house// #LIFin: //erittäin suuri sininen talo// #LIFre: //très grande maison bleue// #LIGer: //sehr großes blaues Haus// #LIIta: //molto grande casa blù// #LINor: //mye stort blått hus// #LIPol: //bardzo duży niebieski dom// #LIRon: //casă albastră foarte mare// #LIRus: //очень большой голубой дом// #LISpa: //muy grande casa azul// #LISwe: //mycket stort blått hus// #LIUrd: //بہت بڑا نیلا گھر// #EUL #ediv #ediv |
| ``mkCN`` | [N #N] ``->`` [RS #RS] ``->`` [CN #CN] | #divreveal //man whom she loves// #divpopup #UL #LIAPI: ``mkCN man_N (mkRS (mkRCl which_RP she_NP love_V2))`` #LIBul: //мъж който тя обича// #LICat: //home que ella estima// #LIDan: //mand som hun elsker// #LIDut: //man die ze lief heeft// #LIEng: //man whom she loves// #LIFin: //mies jota hän rakastaa// #LIFre: //homme qu' elle aime// #LIGer: //Mann den sie liebt// #LIIta: //uomo che lei ama// #LINor: //mann som hun elsker// #LIPol: //mężczyzna , którego kocha ona// #LIRon: //om pe care îl iubeşte ea// #LIRus: //человек , который она любдит// #LISpa: //hombre que ella ama// #LISwe: //man som hon älskar// #LIUrd: //آدمی جو كو وہ پیار كرتی ہے// #EUL #ediv #ediv |
| ``mkCN`` | [CN #CN] ``->`` [RS #RS] ``->`` [CN #CN] | #divreveal //old man whom she loves// #divpopup #UL #LIAPI: ``mkCN (mkCN old_A man_N) (mkRS (mkRCl which_RP she_NP love_V2))`` #LIBul: //стар мъж който тя обича// #LICat: //home vell que ella estima// #LIDan: //gammel mand som hun elsker// #LIDut: //oude man die ze lief heeft// #LIEng: //old man whom she loves// #LIFin: //vanha mies jota hän rakastaa// #LIFre: //vieux homme qu' elle aime// #LIGer: //alter Mann den sie liebt// #LIIta: //vecchio uomo che lei ama// #LINor: //gammel mann som hun elsker// #LIPol: //stary mężczyzna , którego kocha ona// #LIRon: //om vechi pe care îl iubeşte ea// #LIRus: //старый человек , который она любдит// #LISpa: //viejo hombre que ella ama// #LISwe: //gammal man som hon älskar// #LIUrd: //بوڑھی آدمی جو كو وہ پیار كرتی ہے// #EUL #ediv #ediv |
| ``mkCN`` | [N #N] ``->`` [Adv #Adv] ``->`` [CN #CN] | #divreveal //house on the hill// #divpopup #UL #LIAPI: ``mkCN house_N (mkAdv on_Prep (mkNP the_Det hill_N))`` #LIBul: //къща на хълма// #LICat: //casa sobre el turó// #LIDan: //hus på højen// #LIDut: //huis op de heuvel// #LIEng: //house on the hill// #LIFin: //talo kukkulalla// #LIFre: //maison sur la colline// #LIGer: //Haus auf dem Hügel// #LIIta: //casa sulla collina// #LINor: //hus på haugen// #LIPol: //dom nа wzgórzu// #LIRon: //casă pe deal// #LIRus: //дом на холме// #LISpa: //casa sobre la colina// #LISwe: //hus på kullen// #LIUrd: //پہاڑی پر گھر// #EUL #ediv #ediv |
| ``mkCN`` | [CN #CN] ``->`` [Adv #Adv] ``->`` [CN #CN] | #divreveal //big house on the hill// #divpopup #UL #LIAPI: ``mkCN (mkCN big_A house_N) (mkAdv on_Prep (mkNP the_Det hill_N))`` #LIBul: //голяма къща на хълма// #LICat: //casa grosa sobre el turó// #LIDan: //stort hus på højen// #LIDut: //groot huis op de heuvel// #LIEng: //big house on the hill// #LIFin: //suuri talo kukkulalla// #LIFre: //grande maison sur la colline// #LIGer: //großes Haus auf dem Hügel// #LIIta: //grande casa sulla collina// #LINor: //stort hus på haugen// #LIPol: //duży dom nа wzgórzu// #LIRon: //casă mare pe deal// #LIRus: //большой дом на холме// #LISpa: //grande casa sobre la colina// #LISwe: //stort hus på kullen// #LIUrd: //پہاڑی پر بڑا گھر// #EUL #ediv #ediv |
| ``mkCN`` | [CN #CN] ``->`` [S #S] ``->`` [CN #CN] | //rule that she sleeps// |
| ``mkCN`` | [CN #CN] ``->`` [QS #QS] ``->`` [CN #CN] | //question if she sleeps// |
| ``mkCN`` | [CN #CN] ``->`` [VP #VP] ``->`` [CN #CN] | //reason to sleep// |
| ``mkCN`` | [CN #CN] ``->`` [SC #SC] ``->`` [CN #CN] | //reason to sleep// |
| ``mkCN`` | [N #N] ``->`` [NP #NP] ``->`` [CN #CN] | //king John// |
| ``mkCN`` | [CN #CN] ``->`` [NP #NP] ``->`` [CN #CN] | //old king John// |
==Card - cardinal number==[Card]
|| Function  | Type  | Example  ||
| ``mkCard`` | ``Str`` ``->`` [Card #Card] | //thirty-five (given as "35")// |
| ``mkCard`` | [Numeral #Numeral] ``->`` [Card #Card] | //twenty// |
| ``mkCard`` | [Digits #Digits] ``->`` [Card #Card] | //51// |
| ``mkCard`` | [AdN #AdN] ``->`` [Card #Card] ``->`` [Card #Card] | //almost fifty// |
==Cl - declarative clause, with all tenses==[Cl]
|| Function  | Type  | Example  ||
| ``genericCl`` | [VP #VP] ``->`` [Cl #Cl] | #divreveal //one sleeps// #divpopup #UL #LIAPI: ``mkS (genericCl (mkVP sleep_V))`` #LIBul: //някой спи// #LICat: //hom dorm// #LIDan: //man sover// #LIDut: //men slaapt// #LIEng: //one sleeps// #LIFin: //nukutaan// #LIFre: //on dort// #LIGer: //man schläft// #LIIta: //si dorme// #LINor: //man sover// #LIPol: //ktoś śpi// #LIRon: //cineva doarme// #LIRus: //ты спдишь// #LISpa: //se duerme// #LISwe: //man sover// #LIUrd: //كوی سوتا ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V #V] ``->`` [Cl #Cl] | #divreveal //she sleeps// #divpopup #UL #LIAPI: ``mkCl she_NP sleep_V`` #LIBul: //тя спи// #LICat: //ella dorm// #LIDan: //hun sover// #LIDut: //ze slaapt// #LIEng: //she sleeps// #LIFin: //hän nukkuu// #LIFre: //elle dort// #LIGer: //sie schläft// #LIIta: //lei dorme// #LINor: //hun sover// #LIPol: //ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //hon sover// #LIUrd: //وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V2 #V2] ``->`` [NP #NP] ``->`` [Cl #Cl] | #divreveal //she loves him// #divpopup #UL #LIAPI: ``mkCl she_NP love_V2 he_NP`` #LIBul: //тя обича него// #LICat: //ella el estima// #LIDan: //hun elsker ham// #LIDut: //ze heeft hem lief// #LIEng: //she loves him// #LIFin: //hän rakastaa häntä// #LIFre: //elle l' aime// #LIGer: //sie liebt ihn// #LIIta: //lei lo ama// #LINor: //hun elsker ham// #LIPol: //ona kocha jego// #LIRon: //ea îl iubeşte// #LIRus: //она любдит его// #LISpa: //ella lo ama// #LISwe: //hon älskar honom// #LIUrd: //وہ اس كو پیار كرتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [Cl #Cl] | #divreveal //she sends it to him// #divpopup #UL #LIAPI: ``mkCl she_NP send_V3 it_NP he_NP`` #LIBul: //тя праща него до него// #LICat: //ella ho li envia// #LIDan: //hun sender det til ham// #LIDut: //ze stuurt het hem// #LIEng: //she sends it to him// #LIFin: //hän lähettää sen hänelle// #LIFre: //elle le lui envoie// #LIGer: //sie schickt es ihm// #LIIta: //lei lo gli manda// #LINor: //hun sender det til ham// #LIPol: //ona wysyła do niego je// #LIRon: //ea i -l trimite// #LIRus: //она посылает нему его// #LISpa: //ella lo le manda// #LISwe: //hon skickar det till honom// #LIUrd: //وہ یہ اس كو بھیجتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [VV #VV] ``->`` [VP #VP] ``->`` [Cl #Cl] | #divreveal //she wants to sleep// #divpopup #UL #LIAPI: ``mkCl she_NP want_VV (mkVP sleep_V)`` #LIBul: //тя иска да спи// #LICat: //ella vol dormir// #LIDan: //hun vil sove// #LIDut: //ze wil slapen// #LIEng: //she wants to sleep// #LIFin: //hän tahtoo nukkua// #LIFre: //elle veut dormir// #LIGer: //sie will schlafen// #LIIta: //lei vuole dormire// #LINor: //hun vil sove// #LIPol: //ona chce spać// #LIRon: //ea vrea sã doarmă// #LIRus: //она хоччет спать// #LISpa: //ella quiere dormir// #LISwe: //hon vill sova// #LIUrd: //وہ سونا چاہتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [VS #VS] ``->`` [S #S] ``->`` [Cl #Cl] | #divreveal //she says that I sleep// #divpopup #UL #LIAPI: ``mkCl she_NP say_VS (mkS (mkCl i_NP sleep_V))`` #LIBul: //тя казва , че аз спя// #LICat: //ella diu que jo dormo// #LIDan: //hun siger at jeg sover// #LIDut: //ze zegt dat ik slaap// #LIEng: //she says that I sleep// #LIFin: //hän sanoo että minä nukun// #LIFre: //elle dit que je dors// #LIGer: //sie sagt daß ich schlafe// #LIIta: //lei dice che io dormo// #LINor: //hun sier at jeg sover// #LIPol: //ona mówi , że ja śpię// #LIRon: //ea spune cã eu dorm// #LIRus: //она говордит , что я сплю// #LISpa: //ella dice que yo duermo// #LISwe: //hon säger att jag sover// #LIUrd: //وہ كہتی ہے كہ میں سوتا ہوں// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [VQ #VQ] ``->`` [QS #QS] ``->`` [Cl #Cl] | #divreveal //she wonders who sleeps// #divpopup #UL #LIAPI: ``mkCl she_NP wonder_VQ (mkQS (mkQCl who_IP sleep_V))`` #LIBul: //тя се учудва кой спи// #LICat: //ella se pregunta qui dorm// #LIDan: //hun undres hvem som sover// #LIDut: //ze vraagt zich af wie slaapt// #LIEng: //she wonders who sleeps// #LIFin: //hän ihmettelee kuka nukkuu// #LIFre: //elle s' étonne qui dort// #LIGer: //sie wundert sich wer schläft// #LIIta: //lei si domanda chi dorme// #LINor: //hun undrer hvem som sover// #LIPol: //ona zastanawia się , kto śpi// #LIRon: //ea se întreabă cine doarme// #LIRus: //она интересует кто спдит// #LISpa: //ella se pregunta quién duerme// #LISwe: //hon undrar vem som sover// #LIUrd: //وہ حعران ہوتی ہے كہ كون سوتا ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [VA #VA] ``->`` [A #A] ``->`` [Cl #Cl] | #divreveal //she becomes old// #divpopup #UL #LIAPI: ``mkCl she_NP become_VA old_A`` #LIBul: //тя става стара// #LICat: //ella se torna vell// #LIDan: //hun bliver gammel// #LIDut: //ze wordt oud// #LIEng: //she becomes old// #LIFin: //hän tulee vanhaksi// #LIFre: //elle devient vieille// #LIGer: //sie wird alt// #LIIta: //lei diventa vecchia// #LINor: //hun blir gammel// #LIPol: //ona staje się stara// #LIRon: //ea devine veche// #LIRus: //она становдит старой// #LISpa: //ella se converte vieja// #LISwe: //hon blir gammal// #LIUrd: //وہ بوڑھی بنتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [VA #VA] ``->`` [AP #AP] ``->`` [Cl #Cl] | #divreveal //she becomes very old// #divpopup #UL #LIAPI: ``mkCl she_NP become_VA (mkAP very_AdA old_A)`` #LIBul: //тя става много стара// #LICat: //ella se torna molt vell// #LIDan: //hun bliver meget gammel// #LIDut: //ze wordt erg oud// #LIEng: //she becomes very old// #LIFin: //hän tulee erittäin vanhaksi// #LIFre: //elle devient très vieille// #LIGer: //sie wird sehr alt// #LIIta: //lei diventa molto vecchia// #LINor: //hun blir mye gammel// #LIPol: //ona staje się bardzo stara// #LIRon: //ea devine foarte veche// #LIRus: //она становдит очень старой// #LISpa: //ella se converte muy vieja// #LISwe: //hon blir mycket gammal// #LIUrd: //وہ بہت بوڑھی بنتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [A #A] ``->`` [Cl #Cl] | #divreveal //she paints it red// #divpopup #UL #LIAPI: ``mkCl she_NP paint_V2A it_NP red_A`` #LIBul: //тя рисува него червено// #LICat: //ella ho pinta en vermell// #LIDan: //hun maler det rødt// #LIDut: //ze schildeert het rood// #LIEng: //she paints it red// #LIFin: //hän maalaa sen punaiseksi// #LIFre: //elle le peint en rouge// #LIGer: //sie malt es rot// #LIIta: //lei lo dipinge rosso// #LINor: //hun maler det rødt// #LIPol: //ona maluje je na czerwono// #LIRon: //ea îl pictează roşu// #LIRus: //она рисует красным его// #LISpa: //ella lo pinta en rojo// #LISwe: //hon målar det rött// #LIUrd: //وہ یہ كو لال رنگ كرتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [Cl #Cl] | #divreveal //she paints it red// #divpopup #UL #LIAPI: ``mkCl she_NP paint_V2A it_NP (mkAP red_A)`` #LIBul: //тя рисува него червено// #LICat: //ella ho pinta en vermell// #LIDan: //hun maler det rødt// #LIDut: //ze schildeert het rood// #LIEng: //she paints it red// #LIFin: //hän maalaa sen punaiseksi// #LIFre: //elle le peint en rouge// #LIGer: //sie malt es rot// #LIIta: //lei lo dipinge rosso// #LINor: //hun maler det rødt// #LIPol: //ona maluje je na czerwono// #LIRon: //ea îl pictează roşu// #LIRus: //она рисует красным его// #LISpa: //ella lo pinta en rojo// #LISwe: //hon målar det rött// #LIUrd: //وہ یہ كو لال رنگ كرتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [Cl #Cl] | #divreveal //she answers to him that we sleep// #divpopup #UL #LIAPI: ``mkCl she_NP answer_V2S he_NP (mkS (mkCl we_NP sleep_V))`` #LIBul: //тя отговаря му , че ние спим// #LICat: //ella li respon que nosaltres dormim// #LIDan: //hun svarer til ham at vi sover// #LIDut: //ze antwoordt hem dat we slapen// #LIEng: //she answers to him that we sleep// #LIFin: //hän vastaa hänelle että me nukumme// #LIFre: //elle lui répond que nous dormons// #LIGer: //sie antwortet ihm daß wir schlafen// #LIIta: //lei gli risponde che noi dormiamo// #LINor: //hun svarer til ham at vi sover// #LIPol: //ona odpowiada jemu , że my śpimy// #LIRon: //ea îi răspunde cã noi dormim// #LIRus: //она отвечает , что мы спдим его// #LISpa: //ella le responde que nosotros dormimos// #LISwe: //hon svarar till honom att vi sover// #LIUrd: //وہ اس كو جواب دیتی ہے كہ ہم سوتع ہیں// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [Cl #Cl] | #divreveal //she asks him who sleeps// #divpopup #UL #LIAPI: ``mkCl she_NP ask_V2Q he_NP (mkQS (mkQCl who_IP sleep_V))`` #LIBul: //тя пита него кой спи// #LICat: //ella li pregunta qui dorm// #LIDan: //hun spørger ham hvem som sover// #LIDut: //ze vraagt hem wie slaapt// #LIEng: //she asks him who sleeps// #LIFin: //hän kysyy häneltä kuka nukkuu// #LIFre: //elle lui demande qui dort// #LIGer: //sie fragt ihn wer schläft// #LIIta: //lei gli chiede chi dorme// #LINor: //hun spørr ham hvem som sover// #LIPol: //ona pyta jego , kto śpi// #LIRon: //ea îl întreabă cine doarme// #LIRus: //она спрашивает кто спдит его// #LISpa: //ella le pregunta quién duerme// #LISwe: //hon frågar honom vem som sover// #LIUrd: //وہ اس سے پوچھتی ہے كہ كون سوتا ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [Cl #Cl] | #divreveal //she begs him to sleep// #divpopup #UL #LIAPI: ``mkCl she_NP beg_V2V he_NP (mkVP sleep_V)`` #LIBul: //тя моли него да спи// #LICat: //ella el demana a dormir// #LIDan: //hun beder ham at sove// #LIDut: //ze smeekt hem te slapen// #LIEng: //she begs him to sleep// #LIFin: //hän pyytää häntä nukkumaan// #LIFre: //elle le demande à dormir// #LIGer: //sie bittet ihn zu schlafen// #LIIta: //lei lo prega di dormire// #LINor: //hun ber ham att sove// #LIPol: //atomic term beg_V2V// #LIRon: //ea îl roagă sã doarmă// #LIRus: //она просит спать его// #LISpa: //ella lo roga a dormir// #LISwe: //hon ber honom att sova// #LIUrd: //وہ اس سے سونا كی التجا كرتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [A #A] ``->`` [Cl #Cl] | #divreveal //she is old// #divpopup #UL #LIAPI: ``mkCl she_NP old_A`` #LIBul: //тя е стара// #LICat: //ella és vell// #LIDan: //hun er gammel// #LIDut: //ze is oud// #LIEng: //she is old// #LIFin: //hän on vanha// #LIFre: //elle est vieille// #LIGer: //sie ist alt// #LIIta: //lei è vecchia// #LINor: //hun er gammel// #LIPol: //ona jest stara// #LIRon: //ea este veche// #LIRus: //она старая// #LISpa: //ella es vieja// #LISwe: //hon är gammal// #LIUrd: //وہ بوڑھی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [A #A] ``->`` [NP #NP] ``->`` [Cl #Cl] | #divreveal //she is older than he// #divpopup #UL #LIAPI: ``mkCl she_NP old_A he_NP`` #LIBul: //тя е по - стара от него// #LICat: //ella és més vell que ell// #LIDan: //hun er ældre end han// #LIDut: //ze is ouder dan hij// #LIEng: //she is older than he// #LIFin: //hän on vanhempi kuin hän// #LIFre: //elle est plus vieille que lui// #LIGer: //sie ist älter als er// #LIIta: //lei è più vecchia di lui// #LINor: //hun er eldre enn han// #LIPol: //ona jest starsza niż on// #LIRon: //ea este mai veche decât el// #LIRus: //она старше него// #LISpa: //ella es más vieja que él// #LISwe: //hon är äldre än han// #LIUrd: //وہ اس سے بوڑھی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [A2 #A2] ``->`` [NP #NP] ``->`` [Cl #Cl] | #divreveal //she is married to him// #divpopup #UL #LIAPI: ``mkCl she_NP married_A2 he_NP`` #LIBul: //тя е женена за него// #LICat: //ella és casata a ell// #LIDan: //hun er gift med ham// #LIDut: //ze is getrouwd met hem// #LIEng: //she is married to him// #LIFin: //hän on avioitunut hänen kanssa// #LIFre: //elle est mariée à lui// #LIGer: //sie ist verheiratet mit ihm// #LIIta: //lei è sposata con lui// #LINor: //hun er gift med ham// #LIPol: //ona jest zaślubiona jemu// #LIRon: //ea este căsătorită cu el// #LIRus: //она замужем за им// #LISpa: //ella es casada a él// #LISwe: //hon är gift med honom// #LIUrd: //وہ اس سے شادy?كرنی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [AP #AP] ``->`` [Cl #Cl] | #divreveal //she is very old// #divpopup #UL #LIAPI: ``mkCl she_NP (mkAP very_AdA old_A)`` #LIBul: //тя е много стара// #LICat: //ella és molt vell// #LIDan: //hun er meget gammel// #LIDut: //ze is erg oud// #LIEng: //she is very old// #LIFin: //hän on erittäin vanha// #LIFre: //elle est très vieille// #LIGer: //sie ist sehr alt// #LIIta: //lei è molto vecchia// #LINor: //hun er mye gammel// #LIPol: //ona jest bardzo stara// #LIRon: //ea este foarte veche// #LIRus: //она очень старая// #LISpa: //ella es muy vieja// #LISwe: //hon är mycket gammal// #LIUrd: //وہ بہت بوڑھی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [NP #NP] ``->`` [Cl #Cl] | #divreveal //she is the woman// #divpopup #UL #LIAPI: ``mkCl she_NP (mkNP the_Det woman_N)`` #LIBul: //тя е жената// #LICat: //ella és la dona// #LIDan: //hun er kvinden// #LIDut: //ze is de vrouw// #LIEng: //she is the woman// #LIFin: //hän on nainen// #LIFre: //elle est la femme// #LIGer: //sie ist die Frau// #LIIta: //lei è la donna// #LINor: //hun er kvinna// #LIPol: //ona jest kobietą// #LIRon: //ea este femeia// #LIRus: //она женщина// #LISpa: //ella es la mujer// #LISwe: //hon är kvinnan// #LIUrd: //وہ عورت ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [N #N] ``->`` [Cl #Cl] | #divreveal //she is a woman// #divpopup #UL #LIAPI: ``mkCl she_NP woman_N`` #LIBul: //тя е жена// #LICat: //ella és dona// #LIDan: //hun er en kvinde// #LIDut: //ze is vrouw// #LIEng: //she is a woman// #LIFin: //hän on nainen// #LIFre: //elle est femme// #LIGer: //sie ist eine Frau// #LIIta: //lei è donna// #LINor: //hun er ei kvinne// #LIPol: //ona jest kobieta// #LIRon: //ea este femeie// #LIRus: //она женщина// #LISpa: //ella es mujer// #LISwe: //hon är en kvinna// #LIUrd: //وہ عورت ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [CN #CN] ``->`` [Cl #Cl] | #divreveal //she is an old woman// #divpopup #UL #LIAPI: ``mkCl she_NP (mkCN old_A woman_N)`` #LIBul: //тя е стара жена// #LICat: //ella és dona vell// #LIDan: //hun er en gammel kvinde// #LIDut: //ze is oude vrouw// #LIEng: //she is an old woman// #LIFin: //hän on vanha nainen// #LIFre: //elle est vieille femme// #LIGer: //sie ist eine alte Frau// #LIIta: //lei è vecchia donna// #LINor: //hun er ei gammel kvinne// #LIPol: //ona jest stara kobieta// #LIRon: //ea este femeie veche// #LIRus: //она старая женщина// #LISpa: //ella es vieja mujer// #LISwe: //hon är en gammal kvinna// #LIUrd: //وہ بوڑھی عورت ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [Adv #Adv] ``->`` [Cl #Cl] | #divreveal //she is here// #divpopup #UL #LIAPI: ``mkCl she_NP here_Adv`` #LIBul: //тя е тук// #LICat: //ella és aquí// #LIDan: //hun er her// #LIDut: //ze is hier// #LIEng: //she is here// #LIFin: //hän on täällä// #LIFre: //elle est ici// #LIGer: //sie ist hier// #LIIta: //lei è quà// #LINor: //hun er her// #LIPol: //ona jest tutaj// #LIRon: //ea este aici// #LIRus: //она здесь// #LISpa: //ella es aquí// #LISwe: //hon är här// #LIUrd: //وہ یہاں ہے// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [VP #VP] ``->`` [Cl #Cl] | #divreveal //she always sleeps// #divpopup #UL #LIAPI: ``mkCl she_NP (mkVP always_AdV (mkVP sleep_V))`` #LIBul: //тя винаги спи// #LICat: //ella dorm sempre// #LIDan: //hun sover altid// #LIDut: //ze slaapt altijd// #LIEng: //she always sleeps// #LIFin: //hän nukkuu aina// #LIFre: //elle dort toujours// #LIGer: //sie schläft immer// #LIIta: //lei dorme sempre// #LINor: //hun sover altid// #LIPol: //ona zawsze śpi// #LIRon: //ea doarme mereu// #LIRus: //она спдит всегда// #LISpa: //ella duerme siempre// #LISwe: //hon sover alltid// #LIUrd: //وہ ہمیشہ سوتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [N #N] ``->`` [Cl #Cl] | #divreveal //there is a house// #divpopup #UL #LIAPI: ``mkCl house_N`` #LIBul: //има къща// #LICat: //hi ha una casa// #LIDan: //det findes et hus// #LIDut: //er is een huis// #LIEng: //there is a house// #LIFin: //on olemassa talo// #LIFre: //il y a une maison// #LIGer: //es gibt ein Haus// #LIIta: //c' è una casa// #LINor: //det finnes et hus// #LIPol: //jest dom// #LIRon: //există o casă// #LIRus: //существует дом// #LISpa: //hay una casa// #LISwe: //det finns ett hus// #LIUrd: //وہاں گھر ہے// #EUL #ediv #ediv |
| ``mkCl`` | [CN #CN] ``->`` [Cl #Cl] | //there is an old house// |
| ``mkCl`` | [NP #NP] ``->`` [Cl #Cl] | #divreveal //there are many houses// #divpopup #UL #LIAPI: ``mkCl (mkNP many_Det house_N)`` #LIBul: //има много къщи// #LICat: //hi ha moltes cases// #LIDan: //det findes mange huse// #LIDut: //er zijn veel huizen// #LIEng: //there are many houses// #LIFin: //on olemassa moni talo// #LIFre: //il y a plusieurs maisons// #LIGer: //es gibt viele Häuser// #LIIta: //ci sono molte case// #LINor: //det finnes mange hus// #LIPol: //jest wiele domów// #LIRon: //există multe case// #LIRus: //существует много дома// #LISpa: //hay muchas casas// #LISwe: //det finns många hus// #LIUrd: //وہاں بہت زیادہ گھروں ہیں// #EUL #ediv #ediv |
| ``mkCl`` | [NP #NP] ``->`` [RS #RS] ``->`` [Cl #Cl] | #divreveal //it is she who sleeps// #divpopup #UL #LIAPI: ``mkCl she_NP (mkRS (mkRCl which_RP (mkVP sleep_V)))`` #LIBul: //тя е тaзи която спи// #LICat: //és ella que dorm// #LIDan: //det er hun som sover// #LIDut: //'t is ze die slaapt// #LIEng: //it is she who sleeps// #LIFin: //se on hän joka nukkuu// #LIFre: //c' est elle qui dort// #LIGer: //es ist sie die schläft// #LIIta: //è lei che dorme// #LINor: //det er hun som sover// #LIPol: //to ona , która śpi// #LIRon: //este ea care doarme// #LIRus: //это она , которая спдит// #LISpa: //es ella que duerme// #LISwe: //det är hon som sover// #LIUrd: //وہ ہے جو سوتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [Adv #Adv] ``->`` [S #S] ``->`` [Cl #Cl] | #divreveal //it is here that she sleeps// #divpopup #UL #LIAPI: ``mkCl here_Adv (mkS (mkCl she_NP sleep_V))`` #LIBul: //тук тя спи// #LICat: //és aquí que ella dorm// #LIDan: //det er her hun sover// #LIDut: //'t is hier dat ze slaapt// #LIEng: //it is here that she sleeps// #LIFin: //se on täällä kun hän nukkuu// #LIFre: //c' est ici qu' elle dort// #LIGer: //es ist hier daß sie schläft// #LIIta: //è quà che lei dorme// #LINor: //det er her hun sover// #LIPol: //tutaj ona śpi// #LIRon: //este aici cã ea doarme// #LIRus: //это здесь , она спдит// #LISpa: //es aquí que ella duerme// #LISwe: //det är här hon sover// #LIUrd: //یہاں وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkCl`` | [V #V] ``->`` [Cl #Cl] | #divreveal //it rains// #divpopup #UL #LIAPI: ``mkCl rain_V0`` #LIBul: //вали// #LICat: //plou// #LIDan: //det regner// #LIDut: //'t regeent// #LIEng: //it rains// #LIFin: //sataa// #LIFre: //il pleut// #LIGer: //es regnet// #LIIta: //piove// #LINor: //det regner// #LIPol: //pada// #LIRon: //plouă// #LIRus: //идет дождь// #LISpa: //llueve// #LISwe: //det regnar// #LIUrd: //بارش ہوتا ہے// #EUL #ediv #ediv |
| ``mkCl`` | [VP #VP] ``->`` [Cl #Cl] | #divreveal //it is raining// #divpopup #UL #LIAPI: ``mkCl (progressiveVP (mkVP rain_V0))`` #LIBul: //вали// #LICat: //està plovent// #LIDan: //det er ved å regne// #LIDut: //'t is aan het regenen// #LIEng: //it is raining// #LIFin: //on satamassa// #LIFre: //il est en train de pleuvoir// #LIGer: //es regnet eben// #LIIta: //sta piovendo// #LINor: //det er ved å regne// #LIPol: //pada// #LIRon: //plouă// #LIRus: //идет дождь// #LISpa: //está lloviendo// #LISwe: //det håller på att regna// #LIUrd: //بارش ہو رہا ہے// #EUL #ediv #ediv |
| ``mkCl`` | [SC #SC] ``->`` [VP #VP] ``->`` [Cl #Cl] | #divreveal //that she sleeps is good// #divpopup #UL #LIAPI: ``mkCl (mkSC (mkS (mkCl she_NP sleep_V))) (mkVP good_A)`` #LIBul: //че тя спи е добър// #LICat: //que ella dorm és bo// #LIDan: //at hun sover er godt// #LIDut: //dat ze slaapt is goed// #LIEng: //that she sleeps is good// #LIFin: //että hän nukkuu on hyvä// #LIFre: //qu' elle dort est bon// #LIGer: //daß sie schläft ist gut// #LIIta: //che lei dorme è buono// #LINor: //at hun sover er godt// #LIPol: //że ona śpi jest dobre// #LIRon: //cã ea doarme este bun// #LIRus: //что она спдит хорошее// #LISpa: //que ella duerme es bueno// #LISwe: //att hon sover är gott// #LIUrd: //كہ وہ سوتی ہے اچھا ہے// #EUL #ediv #ediv |
==ClSlash==[ClSlash]
|| Function  | Type  | Example  ||
| ``mkClSlash`` | [NP #NP] ``->`` [VPSlash #VPSlash] ``->`` [ClSlash #ClSlash] | //(whom) he sees here// |
| ``mkClSlash`` | [NP #NP] ``->`` [V2 #V2] ``->`` [ClSlash #ClSlash] | //(whom) he sees// |
| ``mkClSlash`` | [NP #NP] ``->`` [VV #VV] ``->`` [V2 #V2] ``->`` [ClSlash #ClSlash] | //(whom) he wants to see// |
| ``mkClSlash`` | [Cl #Cl] ``->`` [Prep #Prep] ``->`` [ClSlash #ClSlash] | //(with whom) he sleeps// |
| ``mkClSlash`` | [ClSlash #ClSlash] ``->`` [Adv #Adv] ``->`` [ClSlash #ClSlash] | //(whom) he sees tomorrow// |
| ``mkClSlash`` | [NP #NP] ``->`` [VS #VS] ``->`` [SSlash #SSlash] ``->`` [ClSlash #ClSlash] | //(whom) she says that he loves// |
==Comp - complement of copula, such as AP==[Comp]
|| Function  | Type  | Example  ||
| ``mkComp`` | [AP #AP] ``->`` [Comp #Comp] | #divreveal //old// #divpopup #UL #LIAPI: ``mkComp (mkAP old_A)`` #LIBul: //стар// #LICat: //vell// #LIDan: //gammel// #LIDut: //oud// #LIEng: //old// #LIFin: //vanha// #LIFre: //vieux// #LIGer: //alt// #LIIta: //vecchio// #LINor: //gammel// #LIPol: //stary// #LIRon: //vechi// #LIRus: //старый// #LISpa: //viejo// #LISwe: //gammal// #LIUrd: //بوڑھا// #EUL #ediv #ediv |
| ``mkComp`` | [NP #NP] ``->`` [Comp #Comp] | #divreveal //this man// #divpopup #UL #LIAPI: ``mkComp (mkNP this_Det man_N)`` #LIBul: //този мъж// #LICat: //aquest home// #LIDan: //denne mand// #LIDut: //deze man// #LIEng: //this man// #LIFin: //tämä mies// #LIFre: //cet homme// #LIGer: //dieser Mann// #LIIta: //questo uomo// #LINor: //denne mannen// #LIPol: //tym mężczyzną// #LIRon: //acest om// #LIRus: //этот человек// #LISpa: //este hombre// #LISwe: //den här mannen// #LIUrd: //یہ آدمی// #EUL #ediv #ediv |
| ``mkComp`` | [Adv #Adv] ``->`` [Comp #Comp] | #divreveal //here// #divpopup #UL #LIAPI: ``mkComp here_Adv`` #LIBul: //тук// #LICat: //aquí// #LIDan: //her// #LIDut: //hier// #LIEng: //here// #LIFin: //täällä// #LIFre: //ici// #LIGer: //hier// #LIIta: //quà// #LINor: //her// #LIPol: //tutaj// #LIRon: //aici// #LIRus: //здесь// #LISpa: //aquí// #LISwe: //här// #LIUrd: //یہاں// #EUL #ediv #ediv |
==Conj - conjunction==[Conj]
|| Function  | Type  | Example  ||
| ``and_Conj`` | [Conj #Conj] | //and// |
| ``both7and_DConj`` | [Conj #Conj] | //both...and// |
| ``either7or_DConj`` | [Conj #Conj] | //either...or// |
| ``if_then_Conj`` | [Conj #Conj] | //if// |
| ``or_Conj`` | [Conj #Conj] | //or// |
==Det - determiner phrase==[Det]
|| Function  | Type  | Example  ||
| ``aPl_Det`` | [Det #Det] | //(houses)// |
| ``aSg_Det`` | [Det #Det] | //a (house)// |
| ``a_Det`` | [Det #Det] | //a (house)// |
| ``every_Det`` | [Det #Det] | //every// |
| ``few_Det`` | [Det #Det] | //few// |
| ``many_Det`` | [Det #Det] | //many// |
| ``mkDet`` | [Quant #Quant] ``->`` [Det #Det] | //this// |
| ``mkDet`` | [Quant #Quant] ``->`` [Card #Card] ``->`` [Det #Det] | //these five// |
| ``mkDet`` | [Quant #Quant] ``->`` [Ord #Ord] ``->`` [Det #Det] | //the best// |
| ``mkDet`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [Ord #Ord] ``->`` [Det #Det] | //these five best// |
| ``mkDet`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [Det #Det] | //these five// |
| ``mkDet`` | [Card #Card] ``->`` [Det #Det] | //forty// |
| ``mkDet`` | [Digits #Digits] ``->`` [Det #Det] | //51// |
| ``mkDet`` | [Numeral #Numeral] ``->`` [Det #Det] | //five// |
| ``mkDet`` | [Pron #Pron] ``->`` [Det #Det] | //my// |
| ``mkDet`` | [Pron #Pron] ``->`` [Num #Num] ``->`` [Det #Det] | //my five// |
| ``much_Det`` | [Det #Det] | //much// |
| ``somePl_Det`` | [Det #Det] | //somePl// |
| ``someSg_Det`` | [Det #Det] | //someSg// |
| ``thePl_Det`` | [Det #Det] | //the (houses)// |
| ``theSg_Det`` | [Det #Det] | //the (houses)// |
| ``the_Det`` | [Det #Det] | //the (house)// |
==Dig==[Dig]
|| Function  | Type  | Example  ||
| ``n0_Dig`` | [Dig #Dig] | //0// |
| ``n1_Dig`` | [Dig #Dig] | //1// |
| ``n2_Dig`` | [Dig #Dig] | //2// |
| ``n3_Dig`` | [Dig #Dig] | //3// |
| ``n4_Dig`` | [Dig #Dig] | //4// |
| ``n5_Dig`` | [Dig #Dig] | //5// |
| ``n6_Dig`` | [Dig #Dig] | //6// |
| ``n7_Dig`` | [Dig #Dig] | //7// |
| ``n8_Dig`` | [Dig #Dig] | //8// |
| ``n9_Dig`` | [Dig #Dig] | //9// |
==Digits - cardinal or ordinal in digits==[Digits]
|| Function  | Type  | Example  ||
| ``mkDigits`` | ``Str`` ``->`` [Digits #Digits] | //35 (from string "35")// |
| ``mkDigits`` | [Dig #Dig] ``->`` [Digits #Digits] | #divreveal //// #divpopup #UL #LIAPI: ``mkDigits n4_Dig`` #LIBul: //// #LICat: //// #LIDan: //// #LIDut: //// #LIEng: //// #LIFin: //// #LIFre: //// #LIGer: //// #LIIta: //// #LINor: //// #LIPol: //// #LIRon: //// #LIRus: //// #LISpa: //// #LISwe: //// #LIUrd: //// #EUL #ediv #ediv |
| ``mkDigits`` | [Dig #Dig] ``->`` [Digits #Digits] ``->`` [Digits #Digits] | #divreveal //// #divpopup #UL #LIAPI: ``mkDigits n1_Dig (mkDigits n2_Dig (mkDigits n3_Dig (mkDigits n3_Dig (mkDigits n4_Dig (mkDigits n8_Dig (mkDigits n6_Dig))))))`` #LIBul: //// #LICat: //// #LIDan: //// #LIDut: //// #LIEng: //// #LIFin: //// #LIFre: //// #LIGer: //// #LIIta: //// #LINor: //// #LIPol: //// #LIRon: //// #LIRus: //// #LISpa: //// #LISwe: //// #LIUrd: //// #EUL #ediv #ediv |
==IAdv - interrogative adverb==[IAdv]
|| Function  | Type  | Example  ||
| ``how8much_IAdv`` | [IAdv #IAdv] | //how8much// |
| ``how_IAdv`` | [IAdv #IAdv] | //how// |
| ``mkIAdv`` | [Prep #Prep] ``->`` [IP #IP] ``->`` [IAdv #IAdv] | #divreveal //in which city// #divpopup #UL #LIAPI: ``mkIAdv in_Prep (mkIP which_IQuant city_N)`` #LIBul: //в кой град// #LICat: //en quin ciutat// #LIDan: //i hvilken by// #LIDut: //in welke stad// #LIEng: //in which city// #LIFin: //missä kaupungissa// #LIFre: //dans quelle ville// #LIGer: //in welcher Stadt// #LIIta: //in quale città// #LINor: //i hvilken by// #LIPol: //w którym mieście// #LIRon: //în care oraş// #LIRus: //в который город// #LISpa: //en qué ciudad// #LISwe: //i vilken stad// #LIUrd: //كون سی شہر معں// #EUL #ediv #ediv |
| ``mkIAdv`` | [IAdv #IAdv] ``->`` [Adv #Adv] ``->`` [IAdv #IAdv] | #divreveal //where in Paris// #divpopup #UL #LIAPI: ``mkIAdv where_IAdv (mkAdv in_Prep (mkNP paris_PN))`` #LIBul: //къде в Париж// #LICat: //on en Paris// #LIDan: //hvor i Paris// #LIDut: //waar in Parijs// #LIEng: //where in Paris// #LIFin: //missä Pariisissa// #LIFre: //où dans Paris// #LIGer: //wo in Paris// #LIIta: //dove in Parigi// #LINor: //hvor i Paris// #LIPol: //gdzie w Paryżu// #LIRon: //unde în Paris// #LIRus: //где в Париже// #LISpa: //donde en Paris// #LISwe: //var i Paris// #LIUrd: //كہاں پیرس معں// #EUL #ediv #ediv |
| ``when_IAdv`` | [IAdv #IAdv] | //when// |
| ``where_IAdv`` | [IAdv #IAdv] | //where// |
| ``why_IAdv`` | [IAdv #IAdv] | //why// |
==IComp - interrogative complement of copula==[IComp]
|| Function  | Type  | Example  ||
| ``mkIComp`` | [IAdv #IAdv] ``->`` [IComp #IComp] | //where (is it)// |
| ``mkIComp`` | [IP #IP] ``->`` [IComp #IComp] | //who (is it)// |
==IDet - interrogative determiner==[IDet]
|| Function  | Type  | Example  ||
| ``how8many_IDet`` | [IDet #IDet] | //how8many// |
| ``mkIDet`` | [IQuant #IQuant] ``->`` [Num #Num] ``->`` [IDet #IDet] | #divreveal //which// #divpopup #UL #LIAPI: ``mkIDet which_IQuant pluralNum`` #LIBul: //кои// #LICat: //quins// #LIDan: //hvilke// #LIDut: //welke// #LIEng: //which// #LIFin: //mitkä// #LIFre: //quels// #LIGer: //welche// #LIIta: //quali// #LINor: //hvilke// #LIPol: //które// #LIRon: //care// #LIRus: //который// #LISpa: //qué// #LISwe: //vilka// #LIUrd: //كون سی// #EUL #ediv #ediv |
| ``mkIDet`` | [IQuant #IQuant] ``->`` [IDet #IDet] | //mkIDet// |
| ``whichPl_IDet`` | [IDet #IDet] | //whichPl// |
| ``which_IDet`` | [IDet #IDet] | //which// |
==IP - interrogative pronoun==[IP]
|| Function  | Type  | Example  ||
| ``mkIP`` | [IDet #IDet] ``->`` [CN #CN] ``->`` [IP #IP] | #divreveal //which five big cities// #divpopup #UL #LIAPI: ``mkIP (mkIDet which_IQuant (mkNum (mkNumeral n5_Unit))) (mkCN big_A city_N)`` #LIBul: //кои пет големи града// #LICat: //quins cinc ciutats groses// #LIDan: //hvilke fem store byer// #LIDut: //welke vijf grote stadden// #LIEng: //which five big cities// #LIFin: //mitkä viisi suurta kaupunkia// #LIFre: //quelles cinq grandes villes// #LIGer: //welche fünf großen Städte// #LIIta: //quali cinque grandi città// #LINor: //hvilke fem store byer// #LIPol: //których pięciu dużych miast// #LIRon: //care cinci oraşe mari// #LIRus: //которые пять большие городы// #LISpa: //qué cinco grandes ciudades// #LISwe: //vilka fem stora städer// #LIUrd: //كون سی پانچ بڑے شہر// #EUL #ediv #ediv |
| ``mkIP`` | [IDet #IDet] ``->`` [N #N] ``->`` [IP #IP] | #divreveal //which five cities// #divpopup #UL #LIAPI: ``mkIP (mkIDet which_IQuant (mkNum (mkNumeral n5_Unit))) city_N`` #LIBul: //кои пет града// #LICat: //quins cinc ciutats// #LIDan: //hvilke fem byer// #LIDut: //welke vijf stadden// #LIEng: //which five cities// #LIFin: //mitkä viisi kaupunkia// #LIFre: //quelles cinq villes// #LIGer: //welche fünf Städte// #LIIta: //quali cinque città// #LINor: //hvilke fem byer// #LIPol: //których pięciu miast// #LIRon: //care cinci oraşe// #LIRus: //которые пять городы// #LISpa: //qué cinco ciudades// #LISwe: //vilka fem städer// #LIUrd: //كون سی پانچ شہر// #EUL #ediv #ediv |
| ``mkIP`` | [IDet #IDet] ``->`` [IP #IP] | #divreveal //which five// #divpopup #UL #LIAPI: ``mkIP (mkIDet which_IQuant (mkNum (mkNumeral n5_Unit)))`` #LIBul: //кои пет// #LICat: //quins cinc// #LIDan: //hvilke fem// #LIDut: //welke vijf// #LIEng: //which five// #LIFin: //mitkä viisi// #LIFre: //quels cinq// #LIGer: //welche fünf// #LIIta: //quali cinque// #LINor: //hvilke fem// #LIPol: //których pięciu// #LIRon: //care cinci// #LIRus: //которые пять// #LISpa: //qué cinco// #LISwe: //vilka fem// #LIUrd: //كون سی پانچ// #EUL #ediv #ediv |
| ``mkIP`` | [IQuant #IQuant] ``->`` [CN #CN] ``->`` [IP #IP] | #divreveal //which big city// #divpopup #UL #LIAPI: ``mkIP which_IQuant (mkCN big_A city_N)`` #LIBul: //кой голям град// #LICat: //quin ciutat grosa// #LIDan: //hvilken stor by// #LIDut: //welke grote stad// #LIEng: //which big city// #LIFin: //mikä suuri kaupunki// #LIFre: //quelle grande ville// #LIGer: //welche große Stadt// #LIIta: //quale grande città// #LINor: //hvilken stor by// #LIPol: //którego dużego miasta// #LIRon: //care oraş mare// #LIRus: //который большой город// #LISpa: //qué grande ciudad// #LISwe: //vilken stor stad// #LIUrd: //كون سی بڑا شہر// #EUL #ediv #ediv |
| ``mkIP`` | [IQuant #IQuant] ``->`` [Num #Num] ``->`` [CN #CN] ``->`` [IP #IP] | #divreveal //which five big cities// #divpopup #UL #LIAPI: ``mkIP which_IQuant (mkNum (mkNumeral n5_Unit)) (mkCN big_A city_N)`` #LIBul: //кои пет големи града// #LICat: //quins cinc ciutats groses// #LIDan: //hvilke fem store byer// #LIDut: //welke vijf grote stadden// #LIEng: //which five big cities// #LIFin: //mitkä viisi suurta kaupunkia// #LIFre: //quelles cinq grandes villes// #LIGer: //welche fünf großen Städte// #LIIta: //quali cinque grandi città// #LINor: //hvilke fem store byer// #LIPol: //których pięciu dużych miast// #LIRon: //care cinci oraşe mari// #LIRus: //которые пять большие городы// #LISpa: //qué cinco grandes ciudades// #LISwe: //vilka fem stora städer// #LIUrd: //كون سی پانچ بڑے شہر// #EUL #ediv #ediv |
| ``mkIP`` | [IQuant #IQuant] ``->`` [N #N] ``->`` [IP #IP] | #divreveal //which city// #divpopup #UL #LIAPI: ``mkIP which_IQuant city_N`` #LIBul: //кой град// #LICat: //quin ciutat// #LIDan: //hvilken by// #LIDut: //welke stad// #LIEng: //which city// #LIFin: //mikä kaupunki// #LIFre: //quelle ville// #LIGer: //welche Stadt// #LIIta: //quale città// #LINor: //hvilken by// #LIPol: //którego miasta// #LIRon: //care oraş// #LIRus: //который город// #LISpa: //qué ciudad// #LISwe: //vilken stad// #LIUrd: //كون سی شہر// #EUL #ediv #ediv |
| ``mkIP`` | [IP #IP] ``->`` [Adv #Adv] ``->`` [IP #IP] | #divreveal //who in Paris// #divpopup #UL #LIAPI: ``mkIP who_IP (mkAdv in_Prep (mkNP paris_PN))`` #LIBul: //кой в Париж// #LICat: //qui en Paris// #LIDan: //hvem i Paris// #LIDut: //wie in Parijs// #LIEng: //who in Paris// #LIFin: //kuka Pariisissa// #LIFre: //qui dans Paris// #LIGer: //wer in Paris// #LIIta: //chi in Parigi// #LINor: //hvem i Paris// #LIPol: //kogo w Paryżu// #LIRon: //cine în Paris// #LIRus: //кто в Париже// #LISpa: //quién en Paris// #LISwe: //vem i Paris// #LIUrd: //پیرس معں كون// #EUL #ediv #ediv |
| ``whatPl_IP`` | [IP #IP] | //what (plural)// |
| ``whatSg_IP`` | [IP #IP] | //what (singular)// |
| ``what_IP`` | [IP #IP] | #divreveal //what// #divpopup #UL #LIAPI: ``mkUtt what_IP`` #LIBul: //какъв// #LICat: //què// #LIDan: //hvad// #LIDut: //wat// #LIEng: //what// #LIFin: //mikä// #LIFre: //quoi// #LIGer: //was// #LIIta: //che cosa// #LINor: //hva// #LIPol: //co// #LIRon: //ce// #LIRus: //что// #LISpa: //qué// #LISwe: //vad// #LIUrd: //كیا// #EUL #ediv #ediv |
| ``whoPl_IP`` | [IP #IP] | //who (plural)// |
| ``whoSg_IP`` | [IP #IP] | //who (singular)// |
| ``who_IP`` | [IP #IP] | #divreveal //who// #divpopup #UL #LIAPI: ``mkUtt who_IP`` #LIBul: //кой// #LICat: //qui// #LIDan: //hvem// #LIDut: //wie// #LIEng: //who// #LIFin: //kuka// #LIFre: //qui// #LIGer: //wer// #LIIta: //chi// #LINor: //hvem// #LIPol: //kto// #LIRon: //cine// #LIRus: //кто// #LISpa: //quién// #LISwe: //vem// #LIUrd: //كون// #EUL #ediv #ediv |
==IQuant==[IQuant]
|| Function  | Type  | Example  ||
| ``which_IQuant`` | [IQuant #IQuant] | //which// |
==Imp - imperative==[Imp]
|| Function  | Type  | Example  ||
| ``mkImp`` | [VP #VP] ``->`` [Imp #Imp] | #divreveal //come to my house// #divpopup #UL #LIAPI: ``mkImp (mkVP (mkVP come_V) (mkAdv to_Prep (mkNP i_Pron house_N)))`` #LIBul: //ела до моята къща// #LICat: //venir a la meva casa// #LIDan: //kom til mit hus// #LIDut: //komt u naar mijn huis// #LIEng: //come to my house// #LIFin: //tule minun talooni// #LIFre: //venez à pre {"ma"; "mon" / strs {"a"; "à"; "â"; "e"; "é"; "è";// #LIGer: //kommen Sie nach meinem Haus / Hause// #LIIta: //venire alla mia casa// #LINor: //komm til mit hus// #LIPol: //do mojego domu przychodź// #LIRon: //sã vii la casa mea// #LIRus: //приходи к моему дому// #LISpa: //venir a mi casa// #LISwe: //kom till mitt hus// #LIUrd: //آنا میرا گھر كو// #EUL #ediv #ediv |
| ``mkImp`` | [V #V] ``->`` [Imp #Imp] | #divreveal //come// #divpopup #UL #LIAPI: ``mkImp come_V`` #LIBul: //ела// #LICat: //venir// #LIDan: //kom// #LIDut: //komt u// #LIEng: //come// #LIFin: //tule// #LIFre: //venez// #LIGer: //kommen Sie// #LIIta: //venire// #LINor: //komm// #LIPol: //przychodź// #LIRon: //sã vii// #LIRus: //приходи// #LISpa: //venir// #LISwe: //kom// #LIUrd: //آنا// #EUL #ediv #ediv |
| ``mkImp`` | [V2 #V2] ``->`` [NP #NP] ``->`` [Imp #Imp] | #divreveal //buy it// #divpopup #UL #LIAPI: ``mkImp buy_V2 it_NP`` #LIBul: //купи него// #LICat: //comprar// #LIDan: //køb det// #LIDut: //koopt u// #LIEng: //buy it// #LIFin: //osta sen// #LIFre: //achetez pre {"le"; "l'" / strs {"a"; "à"; "â"; "e"; "é"; "è"; "ê¨";// #LIGer: //kaufen Sie// #LIIta: //comprare lo// #LINor: //kjøp det// #LIPol: //kupuj je// #LIRon: //sã îl cumperi// #LIRus: //покупай его// #LISpa: //comprar// #LISwe: //köp det// #LIUrd: //یہ خریدنا// #EUL #ediv #ediv |
==ImpForm==[ImpForm]
|| Function  | Type  | Example  ||
| ``pluralImpForm`` | [ImpForm #ImpForm] | #divreveal //be men// #divpopup #UL #LIAPI: ``mkUtt pluralImpForm (mkImp (mkVP man_N))`` #LIBul: //бъдете мъже// #LICat: //sigueu homes// #LIDan: //var mænd// #LIDut: //wezen mannen// #LIEng: //be men// #LIFin: //olkaa miehiä// #LIFre: //soyez hommes// #LIGer: //seid Männer// #LIIta: //siate uomini// #LINor: //var menn// #LIPol: //bądźcie mężczyzna// #LIRon: //fiţi oameni// #LIRus: //будьте человеками// #LISpa: //sed hombres// #LISwe: //var män// #LIUrd: //آدمیاں// #EUL #ediv #ediv |
| ``politeImpForm`` | [ImpForm #ImpForm] | #divreveal //be a man// #divpopup #UL #LIAPI: ``mkUtt politeImpForm (mkImp (mkVP man_N))`` #LIBul: //бъдете мъже// #LICat: //ser home// #LIDan: //var en mand// #LIDut: //weest u man// #LIEng: //be a man// #LIFin: //olkaa mies// #LIFre: //soyez homme// #LIGer: //seien Sie ein Mann// #LIIta: //essere uomo// #LINor: //var en mann// #LIPol: //bądź mężczyzna// #LIRon: //sã fii om// #LIRus: //будь человеком// #LISpa: //ser hombre// #LISwe: //var en man// #LIUrd: //آدمی// #EUL #ediv #ediv |
| ``singularImpForm`` | [ImpForm #ImpForm] | #divreveal //be a man// #divpopup #UL #LIAPI: ``mkUtt singularImpForm (mkImp (mkVP man_N))`` #LIBul: //бъди мъж// #LICat: //sigues home// #LIDan: //var en mand// #LIDut: //wees man// #LIEng: //be a man// #LIFin: //ole mies// #LIFre: //sois homme// #LIGer: //sei ein Mann// #LIIta: //sii uomo// #LINor: //var en mann// #LIPol: //bądź mężczyzna// #LIRon: //fii om// #LIRus: //будь человеком// #LISpa: //sé hombre// #LISwe: //var en man// #LIUrd: //آدمی// #EUL #ediv #ediv |
==Interj - interjection==[Interj]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==ListAP==[ListAP]
|| Function  | Type  | Example  ||
| ``mkListAP`` | [AP #AP] ``->`` [AP #AP] ``->`` [ListAP #ListAP] | //mkListAP// |
| ``mkListAP`` | [AP #AP] ``->`` [ListAP #ListAP] ``->`` [ListAP #ListAP] | //mkListAP// |
==ListAdv==[ListAdv]
|| Function  | Type  | Example  ||
| ``mkListAdv`` | [Adv #Adv] ``->`` [Adv #Adv] ``->`` [ListAdv #ListAdv] | //mkListAdv// |
| ``mkListAdv`` | [Adv #Adv] ``->`` [ListAdv #ListAdv] ``->`` [ListAdv #ListAdv] | //mkListAdv// |
==ListNP==[ListNP]
|| Function  | Type  | Example  ||
| ``mkListNP`` | [NP #NP] ``->`` [NP #NP] ``->`` [ListNP #ListNP] | //mkListNP// |
| ``mkListNP`` | [NP #NP] ``->`` [ListNP #ListNP] ``->`` [ListNP #ListNP] | //mkListNP// |
==ListRS==[ListRS]
|| Function  | Type  | Example  ||
| ``mkListRS`` | [RS #RS] ``->`` [RS #RS] ``->`` [ListRS #ListRS] | //mkListRS// |
| ``mkListRS`` | [RS #RS] ``->`` [ListRS #ListRS] ``->`` [ListRS #ListRS] | //mkListRS// |
==ListS==[ListS]
|| Function  | Type  | Example  ||
| ``mkListS`` | [S #S] ``->`` [S #S] ``->`` [ListS #ListS] | //mkListS// |
| ``mkListS`` | [S #S] ``->`` [ListS #ListS] ``->`` [ListS #ListS] | //mkListS// |
==N - common noun==[N]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==N2 - relational noun==[N2]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==N3 - three-place relational noun==[N3]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==NP - noun phrase (subject or object)==[NP]
|| Function  | Type  | Example  ||
| ``everybody_NP`` | [NP #NP] | //everybody// |
| ``everything_NP`` | [NP #NP] | //everything// |
| ``he_NP`` | [NP #NP] | //he// |
| ``i_NP`` | [NP #NP] | //I// |
| ``it_NP`` | [NP #NP] | //it// |
| ``mkNP`` | [Quant #Quant] ``->`` [N #N] ``->`` [NP #NP] | #divreveal //this man// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Quant man_N)`` #LIBul: //този мъж// #LICat: //aquest home// #LIDan: //denne mand// #LIDut: //deze man// #LIEng: //this man// #LIFin: //tämä mies// #LIFre: //cet homme// #LIGer: //dieser Mann// #LIIta: //questo uomo// #LINor: //denne mannen// #LIPol: //ten mężczyzna// #LIRon: //acest om// #LIRus: //этот человек// #LISpa: //este hombre// #LISwe: //den här mannen// #LIUrd: //یہ آدمی// #EUL #ediv #ediv |
| ``mkNP`` | [Quant #Quant] ``->`` [CN #CN] ``->`` [NP #NP] | #divreveal //this old man// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Quant (mkCN old_A man_N))`` #LIBul: //този стар мъж// #LICat: //aquest home vell// #LIDan: //denne gamle mand// #LIDut: //deze oude man// #LIEng: //this old man// #LIFin: //tämä vanha mies// #LIFre: //ce vieux homme// #LIGer: //dieser alte Mann// #LIIta: //questo vecchio uomo// #LINor: //denne gamle mannen// #LIPol: //ten stary mężczyzna// #LIRon: //acest om vechi// #LIRus: //этот старый человек// #LISpa: //este viejo hombre// #LISwe: //den här gamla mannen// #LIUrd: //یہ بوڑھی آدمی// #EUL #ediv #ediv |
| ``mkNP`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [CN #CN] ``->`` [NP #NP] | #divreveal //these five old men// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Quant (mkNum (mkNumeral n5_Unit)) (mkCN old_A man_N))`` #LIBul: //тези петима стари мъже// #LICat: //aquests cinc homes vells// #LIDan: //disse fem gamle mænd// #LIDut: //deze vijf oude mannen// #LIEng: //these five old men// #LIFin: //nämä viisi vanhaa miestä// #LIFre: //ces cinq vieux hommes// #LIGer: //diese fünf alten Männer// #LIIta: //questi cinque vecchi uomini// #LINor: //disse fem gamle mennen// #LIPol: //tych pięciu starych mężczyzn// #LIRon: //aceşti cinci oameni vechi// #LIRus: //эти пять старые человеки// #LISpa: //estos cinco viejos hombres// #LISwe: //de här fem gamla männen// #LIUrd: //یہ پانچ بوڑھی آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [N #N] ``->`` [NP #NP] | #divreveal //these five men// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Quant (mkNum (mkNumeral n5_Unit)) man_N)`` #LIBul: //тези петима мъже// #LICat: //aquests cinc homes// #LIDan: //disse fem mænd// #LIDut: //deze vijf mannen// #LIEng: //these five men// #LIFin: //nämä viisi miestä// #LIFre: //ces cinq hommes// #LIGer: //diese fünf Männer// #LIIta: //questi cinque uomini// #LINor: //disse fem mennen// #LIPol: //tych pięciu mężczyzn// #LIRon: //aceşti cinci oameni// #LIRus: //эти пять человеки// #LISpa: //estos cinco hombres// #LISwe: //de här fem männen// #LIUrd: //یہ پانچ آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Det #Det] ``->`` [CN #CN] ``->`` [NP #NP] | #divreveal //the five old men// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkDet the_Quant (mkNum (mkNumeral n5_Unit))) (mkCN old_A man_N))`` #LIBul: //петимата стари мъже// #LICat: //els cinc homes vells// #LIDan: //de fem gamle mænd// #LIDut: //de vijf oude mannen// #LIEng: //the five old men// #LIFin: //viisi vanhaa miestä// #LIFre: //les cinq vieux hommes// #LIGer: //die fünf alten Männer// #LIIta: //i cinque vecchi uomini// #LINor: //de fem gamle mennen// #LIPol: //pięciu starych mężczyzn// #LIRon: //cei cinci oameni vechi// #LIRus: //пять старые человеки// #LISpa: //los cinco viejos hombres// #LISwe: //de fem gamla männen// #LIUrd: //پانچ بوڑھی آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Det #Det] ``->`` [N #N] ``->`` [NP #NP] | #divreveal //the five men// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkDet the_Quant (mkNum (mkNumeral n5_Unit))) man_N)`` #LIBul: //петимата мъже// #LICat: //els cinc homes// #LIDan: //de fem mændene// #LIDut: //de vijf mannen// #LIEng: //the five men// #LIFin: //viisi miestä// #LIFre: //les cinq hommes// #LIGer: //die fünf Männer// #LIIta: //i cinque uomini// #LINor: //de fem mennen// #LIPol: //pięciu mężczyzn// #LIRon: //cei cinci oameni// #LIRus: //пять человеки// #LISpa: //los cinco hombres// #LISwe: //de fem männen// #LIUrd: //پانچ آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Numeral #Numeral] ``->`` [CN #CN] ``->`` [NP #NP] | #divreveal //fifty old men// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkNumeral (tenfoldSub100 n5_Unit)) (mkCN old_A man_N))`` #LIBul: //петдесетима стари мъже// #LICat: //cinquanta homes vells// #LIDan: //halvtreds gamle mænd// #LIDut: //vijftig oude mannen// #LIEng: //fifty old men// #LIFin: //viisikymmentä vanhaa miestä// #LIFre: //cinquante vieux hommes// #LIGer: //fünfzig alte Männer// #LIIta: //cinquanta vecchi uomini// #LINor: //femti gamle menn// #LIPol: //pięćdziesięciu starych mężczyzn// #LIRon: //cincizeci de oameni vechi// #LIRus: //пятьдесят старые человеки// #LISpa: //cinquenta viejos hombres// #LISwe: //femtio gamla män// #LIUrd: //پچاس بوڑھی آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Numeral #Numeral] ``->`` [N #N] ``->`` [NP #NP] | #divreveal //fifty men// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkNumeral (tenfoldSub100 n5_Unit)) man_N)`` #LIBul: //петдесетима мъже// #LICat: //cinquanta homes// #LIDan: //halvtreds mænd// #LIDut: //vijftig mannen// #LIEng: //fifty men// #LIFin: //viisikymmentä miestä// #LIFre: //cinquante hommes// #LIGer: //fünfzig Männer// #LIIta: //cinquanta uomini// #LINor: //femti menn// #LIPol: //pięćdziesięciu mężczyzn// #LIRon: //cincizeci de oameni// #LIRus: //пятьдесят человеки// #LISpa: //cinquenta hombres// #LISwe: //femtio män// #LIUrd: //پچاس آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Digits #Digits] ``->`` [CN #CN] ``->`` [NP #NP] | #divreveal //old men// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkDigits n5_Dig (mkDigits n1_Dig)) (mkCN old_A man_N))`` #LIBul: //стари мъже// #LICat: //homes vells// #LIDan: //gamle mænd// #LIDut: //oude mannen// #LIEng: //old men// #LIFin: //vanhaa miestä// #LIFre: //vieux hommes// #LIGer: //alte Männer// #LIIta: //vecchi uomini// #LINor: //gamle menn// #LIPol: //starzy mężczyźni// #LIRon: //de oameni vechi// #LIRus: //старые человеки// #LISpa: //viejos hombres// #LISwe: //gamla män// #LIUrd: //بوڑھی آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Digits #Digits] ``->`` [N #N] ``->`` [NP #NP] | #divreveal //men// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkDigits n5_Dig (mkDigits n1_Dig)) man_N)`` #LIBul: //мъже// #LICat: //homes// #LIDan: //mænd// #LIDut: //mannen// #LIEng: //men// #LIFin: //miestä// #LIFre: //hommes// #LIGer: //Männer// #LIIta: //uomini// #LINor: //menn// #LIPol: //mężczyźni// #LIRon: //de oameni// #LIRus: //человеки// #LISpa: //hombres// #LISwe: //män// #LIUrd: //آدمیاں// #EUL #ediv #ediv |
| ``mkNP`` | [Card #Card] ``->`` [CN #CN] ``->`` [NP #NP] | //forty-five old men// |
| ``mkNP`` | [Card #Card] ``->`` [N #N] ``->`` [NP #NP] | //forty-five men// |
| ``mkNP`` | [Pron #Pron] ``->`` [CN #CN] ``->`` [NP #NP] | #divreveal //my old man// #divpopup #UL #LIAPI: ``mkUtt (mkNP i_Pron (mkCN old_A man_N))`` #LIBul: //моят стар мъж// #LICat: //el meu home vell// #LIDan: //min gamle mand// #LIDut: //mijn oude man// #LIEng: //my old man// #LIFin: //minun vanha mieheni// #LIFre: //mon vieux homme// #LIGer: //mein alter Mann// #LIIta: //il mio vecchio uomo// #LINor: //min gamle mann// #LIPol: //mój stary mężczyzna// #LIRon: //omul vechi meu// #LIRus: //моего старый человек// #LISpa: //mi viejo hombre// #LISwe: //min gamla man// #LIUrd: //میرا بوڑھی آدمی// #EUL #ediv #ediv |
| ``mkNP`` | [Pron #Pron] ``->`` [N #N] ``->`` [NP #NP] | #divreveal //my man// #divpopup #UL #LIAPI: ``mkUtt (mkNP i_Pron man_N)`` #LIBul: //моят мъж// #LICat: //el meu home// #LIDan: //min mand// #LIDut: //mijn man// #LIEng: //my man// #LIFin: //minun mieheni// #LIFre: //mon homme// #LIGer: //mein Mann// #LIIta: //il mio uomo// #LINor: //min mann// #LIPol: //mój mężczyzna// #LIRon: //omul meu// #LIRus: //моего человек// #LISpa: //mi hombre// #LISwe: //min man// #LIUrd: //میرا آدمی// #EUL #ediv #ediv |
| ``mkNP`` | [PN #PN] ``->`` [NP #NP] | #divreveal //Paris// #divpopup #UL #LIAPI: ``mkUtt (mkNP paris_PN)`` #LIBul: //Париж// #LICat: //Paris// #LIDan: //Paris// #LIDut: //Parijs// #LIEng: //Paris// #LIFin: //Pariisi// #LIFre: //Paris// #LIGer: //Paris// #LIIta: //Parigi// #LINor: //Paris// #LIPol: //Paryż// #LIRon: //Paris// #LIRus: //Париж// #LISpa: //Paris// #LISwe: //Paris// #LIUrd: //پیرس// #EUL #ediv #ediv |
| ``mkNP`` | [Pron #Pron] ``->`` [NP #NP] | #divreveal //we// #divpopup #UL #LIAPI: ``mkUtt (mkNP we_Pron)`` #LIBul: //ние// #LICat: //nosaltres// #LIDan: //os// #LIDut: //we// #LIEng: //we// #LIFin: //me// #LIFre: //nous// #LIGer: //wir// #LIIta: //noi// #LINor: //oss// #LIPol: //my// #LIRon: //noi// #LIRus: //нас// #LISpa: //nosotros// #LISwe: //oss// #LIUrd: //ہم// #EUL #ediv #ediv |
| ``mkNP`` | [Quant #Quant] ``->`` [NP #NP] | #divreveal //this// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Quant)`` #LIBul: //това// #LICat: //aquest// #LIDan: //dette// #LIDut: //dit// #LIEng: //this// #LIFin: //tämä// #LIFre: //celui-ci// #LIGer: //dieses// #LIIta: //questo// #LINor: //dette// #LIPol: //ten// #LIRon: //acesta// #LIRus: //это// #LISpa: //este// #LISwe: //det här// #LIUrd: //یہ// #EUL #ediv #ediv |
| ``mkNP`` | [Quant #Quant] ``->`` [Num #Num] ``->`` [NP #NP] | #divreveal //these five// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Quant (mkNum (mkNumeral n5_Unit)))`` #LIBul: //тези пет// #LICat: //aquests cinc// #LIDan: //disse fem// #LIDut: //deze vijf// #LIEng: //these five// #LIFin: //nämä viisi// #LIFre: //ces cinq// #LIGer: //diese fünf// #LIIta: //questi cinque// #LINor: //disse fem// #LIPol: //tych pięciu// #LIRon: //aceştia cinci// #LIRus: //эти пять// #LISpa: //estos cinco// #LISwe: //de här fem// #LIUrd: //یہ پانچ// #EUL #ediv #ediv |
| ``mkNP`` | [Det #Det] ``->`` [NP #NP] | #divreveal //the five best// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkDet the_Quant (mkNum (mkNumeral n5_Unit)) (mkOrd good_A)))`` #LIBul: //петте най - добри// #LICat: //els cinc millors// #LIDan: //de fem bedste// #LIDut: //die vijf beste// #LIEng: //the five best// #LIFin: //ne viisi parhaimmat// #LIFre: //les cinq meilleurs// #LIGer: //die fünf besten// #LIIta: //i cinque migliori// #LINor: //de fem beste// #LIPol: //pięciu najlepszych// #LIRon: //cei mai buni cinci// #LIRus: //пять хорошие// #LISpa: //los cinco mejores// #LISwe: //de fem bästa// #LIUrd: //پانچ ساب سے اچھا// #EUL #ediv #ediv |
| ``mkNP`` | [CN #CN] ``->`` [NP #NP] | #divreveal //old beer// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkCN old_A beer_N))`` #LIBul: //стара бира// #LICat: //cervesa vell// #LIDan: //gammelt øl// #LIDut: //oud bier// #LIEng: //old beer// #LIFin: //vanha olut// #LIFre: //pre {"de"; "d'" / strs {"a"; "à"; "â"; "e"; "é"; "è"; "ê¨"; "h";// #LIGer: //altes Bier// #LIIta: //della vecchia birra// #LINor: //gammelt øl// #LIPol: //stare piwo// #LIRon: //bere veche// #LIRus: //старое пиво// #LISpa: //vieja cerveza// #LISwe: //gammalt öl// #LIUrd: //بوڑھا بععر// #EUL #ediv #ediv |
| ``mkNP`` | [N #N] ``->`` [NP #NP] | #divreveal //beer// #divpopup #UL #LIAPI: ``mkUtt (mkNP beer_N)`` #LIBul: //бира// #LICat: //cervesa// #LIDan: //øl// #LIDut: //bier// #LIEng: //beer// #LIFin: //olut// #LIFre: //pre {"de"; "d'" / strs {"a"; "à"; "â"; "e"; "é"; "è"; "ê¨"; "h";// #LIGer: //Bier// #LIIta: //della birra// #LINor: //øl// #LIPol: //piwo// #LIRon: //bere// #LIRus: //пиво// #LISpa: //cerveza// #LISwe: //öl// #LIUrd: //بععر// #EUL #ediv #ediv |
| ``mkNP`` | [Predet #Predet] ``->`` [NP #NP] ``->`` [NP #NP] | #divreveal //only this woman// #divpopup #UL #LIAPI: ``mkUtt (mkNP only_Predet (mkNP this_Det woman_N))`` #LIBul: //само тази жена// #LICat: //nomÈs aquesta dona// #LIDan: //kun denne kvinde// #LIDut: //slechts deze vrouw// #LIEng: //only this woman// #LIFin: //vain tämä nainen// #LIFre: //seulement cette femme// #LIGer: //nur diese Frau// #LIIta: //soltanto questa donna// #LINor: //kun denne kvinna// #LIPol: //tylko tej kobiety// #LIRon: //doar această femeie// #LIRus: //единственную эту женщину// #LISpa: //solamente esta mujer// #LISwe: //bara den här kvinnan// #LIUrd: //سرف یہ عورت// #EUL #ediv #ediv |
| ``mkNP`` | [NP #NP] ``->`` [V2 #V2] ``->`` [NP #NP] | #divreveal //the man seen// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkNP the_Det man_N) see_V2)`` #LIBul: //мъжът видян// #LICat: //l' home vist// #LIDan: //manden set// #LIDut: //de man gezien// #LIEng: //the man seen// #LIFin: //mies nähtynä// #LIFre: //l' homme vu// #LIGer: //der Mann gesehen// #LIIta: //l' uomo visto// #LINor: //mannen sett// #LIPol: //mężczyzna zobaczony// #LIRon: //omul văzut// #LIRus: //человек видеть// #LISpa: //el hombre visto// #LISwe: //mannen sedd// #LIUrd: //دیكھتی آدمی// #EUL #ediv #ediv |
| ``mkNP`` | [NP #NP] ``->`` [Adv #Adv] ``->`` [NP #NP] | #divreveal //Paris today// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkNP paris_PN) today_Adv)`` #LIBul: //Париж днес// #LICat: //Paris avui// #LIDan: //Paris idag// #LIDut: //Parijs vandaag// #LIEng: //Paris today// #LIFin: //Pariisi tänään// #LIFre: //Paris aujourd'hui// #LIGer: //Paris heute// #LIIta: //Parigi oggi// #LINor: //Paris idag// #LIPol: //Paryż dziś// #LIRon: //Paris astăzi// #LIRus: //atomic term today_Adv// #LISpa: //Paris hoy// #LISwe: //Paris idag// #LIUrd: //آج پیرس// #EUL #ediv #ediv |
| ``mkNP`` | [NP #NP] ``->`` [RS #RS] ``->`` [NP #NP] | #divreveal //John , who walks// #divpopup #UL #LIAPI: ``mkUtt (mkNP (mkNP john_PN) (mkRS (mkRCl which_RP (mkVP walk_V))))`` #LIBul: //Джон който ходи// #LICat: //Joan que camina// #LIDan: //John , som går// #LIDut: //Jan , dat loopt// #LIEng: //John , who walks// #LIFin: //Jussi , joka kävelee// #LIFre: //Jean qui marche// #LIGer: //Johann , das geht// #LIIta: //Giovanni che cammina// #LINor: //John , som går// #LIPol: //Jan , który spaceruje// #LIRon: //Ion care merge// #LIRus: //Ивана , которого гуляет// #LISpa: //Juan que camina// #LISwe: //Johan , som går// #LIUrd: //جان , جو چلتا ہے// #EUL #ediv #ediv |
| ``mkNP`` | [Conj #Conj] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [NP #NP] | //mkNP// |
| ``mkNP`` | [Conj #Conj] ``->`` [ListNP #ListNP] ``->`` [NP #NP] | //mkNP// |
| ``nobody_NP`` | [NP #NP] | //nobody// |
| ``nothing_NP`` | [NP #NP] | //nothing// |
| ``she_NP`` | [NP #NP] | //she// |
| ``somebody_NP`` | [NP #NP] | //somebody// |
| ``something_NP`` | [NP #NP] | //something// |
| ``they_NP`` | [NP #NP] | //they// |
| ``we_NP`` | [NP #NP] | //we// |
| ``youPl_NP`` | [NP #NP] | //you (plural)// |
| ``youPol_NP`` | [NP #NP] | //you (polite singular)// |
| ``you_NP`` | [NP #NP] | //you (singular)// |
==Num - number determining element==[Num]
|| Function  | Type  | Example  ||
| ``mkNum`` | ``Str`` ``->`` [Num #Num] | //thirty-five (given by "35")// |
| ``mkNum`` | [Numeral #Numeral] ``->`` [Num #Num] | #divreveal //twenty// #divpopup #UL #LIAPI: ``mkNum (mkNumeral (tenfoldSub100 n2_Unit))`` #LIBul: //двадесетима// #LICat: //vint// #LIDan: //tyve// #LIDut: //twintig// #LIEng: //twenty// #LIFin: //kaksikymmentä// #LIFre: //vingt// #LIGer: //zwanzig// #LIIta: //venti// #LINor: //tjue// #LIPol: //dwadzieścia// #LIRon: //douăzeci// #LIRus: //двадцать// #LISpa: //veinte// #LISwe: //tjugo// #LIUrd: //بیس// #EUL #ediv #ediv |
| ``mkNum`` | [Digits #Digits] ``->`` [Num #Num] | #divreveal //// #divpopup #UL #LIAPI: ``mkNum (mkDigits n2_Dig (mkDigits n1_Dig))`` #LIBul: //// #LICat: //// #LIDan: //// #LIDut: //// #LIEng: //// #LIFin: //// #LIFre: //// #LIGer: //// #LIIta: //// #LINor: //// #LIPol: //// #LIRon: //// #LIRus: //// #LISpa: //// #LISwe: //// #LIUrd: //// #EUL #ediv #ediv |
| ``mkNum`` | [Digit #Digit] ``->`` [Num #Num] | //five// |
| ``mkNum`` | [Card #Card] ``->`` [Num #Num] | //almost ten// |
| ``mkNum`` | [AdN #AdN] ``->`` [Card #Card] ``->`` [Num #Num] | //almost ten// |
| ``pluralNum`` | [Num #Num] | //plural// |
| ``singularNum`` | [Num #Num] | //singular// |
==Numeral - cardinal or ordinal in words==[Numeral]
|| Function  | Type  | Example  ||
| ``mkNumeral`` | [Unit #Unit] ``->`` [Numeral #Numeral] | //eight (coerce 1..9)// |
| ``mkNumeral`` | [Sub100 #Sub100] ``->`` [Numeral #Numeral] | //twenty-five (coerce 1..99)// |
| ``mkNumeral`` | [Sub1000 #Sub1000] ``->`` [Numeral #Numeral] | //six hundred (coerce 1..999)// |
| ``mkNumeral`` | [Sub1000 #Sub1000] ``->`` [Sub1000 #Sub1000] ``->`` [Numeral #Numeral] | //1000m + n// |
| ``mkNumeral`` | ``Str`` ``->`` [Numeral #Numeral] | //thirty-five (given by "35")// |
| ``thousandfoldNumeral`` | [Sub1000 #Sub1000] ``->`` [Numeral #Numeral] | //1000n// |
==Ord - ordinal number (used in Det)==[Ord]
|| Function  | Type  | Example  ||
| ``mkOrd`` | [Numeral #Numeral] ``->`` [Ord #Ord] | //twentieth// |
| ``mkOrd`` | [Digits #Digits] ``->`` [Ord #Ord] | //51st// |
| ``mkOrd`` | [Digit #Digit] ``->`` [Ord #Ord] | //fifth// |
| ``mkOrd`` | [A #A] ``->`` [Ord #Ord] | //largest// |
==PConj - phrase-beginning conjunction==[PConj]
|| Function  | Type  | Example  ||
| ``but_PConj`` | [PConj #PConj] | //but// |
| ``mkPConj`` | [Conj #Conj] ``->`` [PConj #PConj] | #divreveal //and now// #divpopup #UL #LIAPI: ``mkPhr (mkPConj and_Conj) (mkUtt now_Adv)`` #LIBul: //и сега// #LICat: //i ara// #LIDan: //og nu// #LIDut: //en nu// #LIEng: //and now// #LIFin: //ja nyt// #LIFre: //et maintenant// #LIGer: //und jetzt// #LIIta: //e adesso// #LINor: //og nå// #LIPol: //i teraz// #LIRon: //şi acum// #LIRus: //и сейчас// #LISpa: //y ahora// #LISwe: //och nu// #LIUrd: //اور اب// #EUL #ediv #ediv |
| ``otherwise_PConj`` | [PConj #PConj] | //otherwise// |
| ``therefore_PConj`` | [PConj #PConj] | //therefore// |
==PN - proper name==[PN]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==Phr - phrase in a text==[Phr]
|| Function  | Type  | Example  ||
| ``mkPhr`` | ([PConj #PConj]) ``->`` [Utt #Utt] ``->`` ([Voc #Voc]) ``->`` [Phr #Phr] | #divreveal //but sleep , my friend// #divpopup #UL #LIAPI: ``mkPhr but_PConj (mkUtt (mkImp sleep_V)) (mkVoc (mkNP i_Pron friend_N))`` #LIBul: //но спи , мой приятелю// #LICat: //però dorm , el meu amic// #LIDan: //men sov , min ven// #LIDut: //maar slaap , mijn vriend// #LIEng: //but sleep , my friend// #LIFin: //mutta nuku , minun ystäväni// #LIFre: //mais dors , mon ami// #LIGer: //aber schlaf , mein Freund// #LIIta: //ma dormi , il mio amico// #LINor: //men sov , min venn// #LIPol: //ale śpij , mój przyjacielu// #LIRon: //dar dormi , prietenul meu// #LIRus: //но спи , мой друг// #LISpa: //pero duerme , mi amigo// #LISwe: //men sov , min vän// #LIUrd: //atomic term friend_N// #EUL #ediv #ediv |
| ``mkPhr`` | [S #S] ``->`` [Phr #Phr] | #divreveal //she won't sleep// #divpopup #UL #LIAPI: ``mkPhr (mkS futureTense negativePol (mkCl she_NP sleep_V))`` #LIBul: //тя няма да спи// #LICat: //ella no dormirà// #LIDan: //hun vil ikke sove// #LIDut: //ze zal niet geslapen hebben// #LIEng: //she won't sleep// #LIFin: //hän ei nuku// #LIFre: //elle ne dormira pas// #LIGer: //sie wird nicht schlafen// #LIIta: //lei non dormirà// #LINor: //hun vil ikke sove// #LIPol: //ona nie będzie spała// #LIRon: //ea nu va dormi// #LIRus: //она не будет спать// #LISpa: //ella no dormirá// #LISwe: //hon ska inte sova// #LIUrd: //وہ نہیں سوئے گی// #EUL #ediv #ediv |
| ``mkPhr`` | [Cl #Cl] ``->`` [Phr #Phr] | #divreveal //she sleeps// #divpopup #UL #LIAPI: ``mkPhr (mkCl she_NP sleep_V)`` #LIBul: //тя спи// #LICat: //ella dorm// #LIDan: //hun sover// #LIDut: //ze slaapt// #LIEng: //she sleeps// #LIFin: //hän nukkuu// #LIFre: //elle dort// #LIGer: //sie schläft// #LIIta: //lei dorme// #LINor: //hun sover// #LIPol: //ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //hon sover// #LIUrd: //وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkPhr`` | [QS #QS] ``->`` [Phr #Phr] | #divreveal //would she sleep// #divpopup #UL #LIAPI: ``mkPhr (mkQS conditionalTense (mkQCl (mkCl she_NP sleep_V)))`` #LIBul: //тя би ли спалa// #LICat: //ella dormiria// #LIDan: //ville hun sove// #LIDut: //zou ze geslapen hebben// #LIEng: //would she sleep// #LIFin: //nukkuisiko hän// #LIFre: //elle dormirait// #LIGer: //würde sie schlafen// #LIIta: //lei dormirebbe// #LINor: //ville hun sove// #LIPol: //czy ona spałaby// #LIRon: //ea ar dormi// #LIRus: //она спала бы// #LISpa: //ella dormiría// #LISwe: //skulle hon sova// #LIUrd: //كیا وہ شاید سوئے// #EUL #ediv #ediv |
| ``mkPhr`` | [Imp #Imp] ``->`` [Phr #Phr] | #divreveal //sleep// #divpopup #UL #LIAPI: ``mkPhr (mkImp sleep_V)`` #LIBul: //спи// #LICat: //dorm// #LIDan: //sov// #LIDut: //slaap// #LIEng: //sleep// #LIFin: //nuku// #LIFre: //dors// #LIGer: //schlaf// #LIIta: //dormi// #LINor: //sov// #LIPol: //śpij// #LIRon: //dormi// #LIRus: //спи// #LISpa: //duerme// #LISwe: //sov// #LIUrd: //سونا// #EUL #ediv #ediv |
==Pol - polarity==[Pol]
|| Function  | Type  | Example  ||
| ``negativePol`` | [Pol #Pol] | #divreveal //she doesn't sleep// #divpopup #UL #LIAPI: ``mkS negativePol (mkCl she_NP sleep_V)`` #LIBul: //тя не спи// #LICat: //ella no dorm// #LIDan: //hun sover ikke// #LIDut: //ze slaapt niet// #LIEng: //she doesn't sleep// #LIFin: //hän ei nuku// #LIFre: //elle ne dort pas// #LIGer: //sie schläft nicht// #LIIta: //lei non dorme// #LINor: //hun sover ikke// #LIPol: //ona nie śpi// #LIRon: //ea nu doarme// #LIRus: //она не спдит// #LISpa: //ella no duerme// #LISwe: //hon sover inte// #LIUrd: //وہ نہیں سوتی ہے// #EUL #ediv #ediv |
| ``positivePol`` | [Pol #Pol] | #divreveal //she sleeps// #divpopup #UL #LIAPI: ``mkS positivePol (mkCl she_NP sleep_V)`` #LIBul: //тя спи// #LICat: //ella dorm// #LIDan: //hun sover// #LIDut: //ze slaapt// #LIEng: //she sleeps// #LIFin: //hän nukkuu// #LIFre: //elle dort// #LIGer: //sie schläft// #LIIta: //lei dorme// #LINor: //hun sover// #LIPol: //ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //hon sover// #LIUrd: //وہ سوتی ہے// #EUL #ediv #ediv |
==Predet - predeterminer (prefixed Quant)==[Predet]
|| Function  | Type  | Example  ||
| ``all_Predet`` | [Predet #Predet] | //all// |
| ``most_Predet`` | [Predet #Predet] | //most// |
| ``not_Predet`` | [Predet #Predet] | //not// |
| ``only_Predet`` | [Predet #Predet] | //only// |
==Prep - preposition, or just case==[Prep]
|| Function  | Type  | Example  ||
| ``above_Prep`` | [Prep #Prep] | //above// |
| ``after_Prep`` | [Prep #Prep] | //after// |
| ``before_Prep`` | [Prep #Prep] | //before// |
| ``behind_Prep`` | [Prep #Prep] | //behind// |
| ``between_Prep`` | [Prep #Prep] | //between// |
| ``by8agent_Prep`` | [Prep #Prep] | //by (agent)// |
| ``by8means_Prep`` | [Prep #Prep] | //by (means of)// |
| ``during_Prep`` | [Prep #Prep] | //during// |
| ``except_Prep`` | [Prep #Prep] | //except// |
| ``for_Prep`` | [Prep #Prep] | //for// |
| ``from_Prep`` | [Prep #Prep] | //from// |
| ``in8front_Prep`` | [Prep #Prep] | //in front of// |
| ``in_Prep`` | [Prep #Prep] | //in// |
| ``on_Prep`` | [Prep #Prep] | //on// |
| ``part_Prep`` | [Prep #Prep] | //part// |
| ``possess_Prep`` | [Prep #Prep] | //of (possessive)// |
| ``through_Prep`` | [Prep #Prep] | //through// |
| ``to_Prep`` | [Prep #Prep] | //to// |
| ``under_Prep`` | [Prep #Prep] | //under// |
| ``with_Prep`` | [Prep #Prep] | //with// |
| ``without_Prep`` | [Prep #Prep] | //without// |
==Pron - personal pronoun==[Pron]
|| Function  | Type  | Example  ||
| ``he_Pron`` | [Pron #Pron] | //he// |
| ``i_Pron`` | [Pron #Pron] | //i// |
| ``it_Pron`` | [Pron #Pron] | //it// |
| ``she_Pron`` | [Pron #Pron] | //she// |
| ``they_Pron`` | [Pron #Pron] | //they// |
| ``we_Pron`` | [Pron #Pron] | //we// |
| ``youPl_Pron`` | [Pron #Pron] | //you (plural)// |
| ``youPol_Pron`` | [Pron #Pron] | //you (polite)// |
| ``youSg_Pron`` | [Pron #Pron] | //you (singular)// |
==Punct==[Punct]
|| Function  | Type  | Example  ||
| ``exclMarkPunct`` | [Punct #Punct] | #divreveal //yes !// #divpopup #UL #LIAPI: ``mkText (mkPhr yes_Utt) exclMarkPunct`` #LIBul: //да !// #LICat: //sí !// #LIDan: //ja !// #LIDut: //ja !// #LIEng: //yes !// #LIFin: //kyllä !// #LIFre: //oui !// #LIGer: //ja !// #LIIta: //sì !// #LINor: //ja !// #LIPol: //tak !// #LIRon: //da !// #LIRus: //Да !// #LISpa: //sí !// #LISwe: //ja !// #LIUrd: //ہاں !// #EUL #ediv #ediv |
| ``fullStopPunct`` | [Punct #Punct] | #divreveal //yes .// #divpopup #UL #LIAPI: ``mkText (mkPhr yes_Utt) fullStopPunct`` #LIBul: //да .// #LICat: //sí .// #LIDan: //ja .// #LIDut: //ja .// #LIEng: //yes .// #LIFin: //kyllä .// #LIFre: //oui .// #LIGer: //ja .// #LIIta: //sì .// #LINor: //ja .// #LIPol: //tak .// #LIRon: //da .// #LIRus: //Да .// #LISpa: //sí .// #LISwe: //ja .// #LIUrd: //ہاں .// #EUL #ediv #ediv |
| ``questMarkPunct`` | [Punct #Punct] | #divreveal //yes ?// #divpopup #UL #LIAPI: ``mkText (mkPhr yes_Utt) questMarkPunct`` #LIBul: //да ?// #LICat: //sí ?// #LIDan: //ja ?// #LIDut: //ja ?// #LIEng: //yes ?// #LIFin: //kyllä ?// #LIFre: //oui ?// #LIGer: //ja ?// #LIIta: //sì ?// #LINor: //ja ?// #LIPol: //tak ?// #LIRon: //da ?// #LIRus: //Да ?// #LISpa: //sí ?// #LISwe: //ja ?// #LIUrd: //ہاں ?// #EUL #ediv #ediv |
==QCl - question clause, with all tenses==[QCl]
|| Function  | Type  | Example  ||
| ``mkQCl`` | [Cl #Cl] ``->`` [QCl #QCl] | #divreveal //does she sleep// #divpopup #UL #LIAPI: ``mkQCl (mkCl she_NP sleep_V)`` #LIBul: //тя спи ли// #LICat: //ella dorm// #LIDan: //sover hun// #LIDut: //slaapt ze// #LIEng: //does she sleep// #LIFin: //nukkuuko hän// #LIFre: //elle dort// #LIGer: //schläft sie// #LIIta: //lei dorme// #LINor: //sover hun// #LIPol: //czy ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //sover hon// #LIUrd: //كیا وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [VP #VP] ``->`` [QCl #QCl] | #divreveal //who sleeps here// #divpopup #UL #LIAPI: ``mkQCl who_IP (mkVP (mkVP sleep_V) here_Adv)`` #LIBul: //кой спи тук// #LICat: //qui dorm aquí// #LIDan: //hvem sover her// #LIDut: //wie slaapt hier// #LIEng: //who sleeps here// #LIFin: //kuka nukkuu täällä// #LIFre: //qui dort ici// #LIGer: //wer schläft hier// #LIIta: //chi dorme quà// #LINor: //hvem sover her// #LIPol: //kto tutaj śpi// #LIRon: //cine doarme aici// #LIRus: //кто здесь спдит// #LISpa: //quién duerme aquí// #LISwe: //vem sover här// #LIUrd: //كون یہاں سوتا ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [V #V] ``->`` [QCl #QCl] | #divreveal //who sleeps// #divpopup #UL #LIAPI: ``mkQCl who_IP sleep_V`` #LIBul: //кой спи// #LICat: //qui dorm// #LIDan: //hvem sover// #LIDut: //wie slaapt// #LIEng: //who sleeps// #LIFin: //kuka nukkuu// #LIFre: //qui dort// #LIGer: //wer schläft// #LIIta: //chi dorme// #LINor: //hvem sover// #LIPol: //kto śpi// #LIRon: //cine doarme// #LIRus: //кто спдит// #LISpa: //quién duerme// #LISwe: //vem sover// #LIUrd: //كون سوتا ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [V2 #V2] ``->`` [NP #NP] ``->`` [QCl #QCl] | #divreveal //who loves her// #divpopup #UL #LIAPI: ``mkQCl who_IP love_V2 she_NP`` #LIBul: //кой обича нея// #LICat: //qui la estima// #LIDan: //hvem elsker hende// #LIDut: //wie heeft haar lief// #LIEng: //who loves her// #LIFin: //kuka rakastaa häntä// #LIFre: //qui l' aime// #LIGer: //wer liebt sie// #LIIta: //chi la ama// #LINor: //hvem elsker henne// #LIPol: //kto kocha ją// #LIRon: //cine o iubeşte// #LIRus: //кто любдит её// #LISpa: //quién la ama// #LISwe: //vem älskar henne// #LIUrd: //كون اس كو پیار كرتا ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [QCl #QCl] | #divreveal //who sends it to her// #divpopup #UL #LIAPI: ``mkQCl who_IP send_V3 it_NP she_NP`` #LIBul: //кой праща него до нея// #LICat: //qui ho li envia// #LIDan: //hvem sender det til hende// #LIDut: //wie stuurt het haar// #LIEng: //who sends it to her// #LIFin: //kuka lähettää sen hänelle// #LIFre: //qui le lui envoie// #LIGer: //wer schickt es ihr// #LIIta: //chi lo le manda// #LINor: //hvem sender det til henne// #LIPol: //kto wysyła do niej je// #LIRon: //cine i -l trimite// #LIRus: //кто посылает ней его// #LISpa: //quién lo le manda// #LISwe: //vem skickar det till henne// #LIUrd: //كون یہ اس كو بھیجتا ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [VV #VV] ``->`` [VP #VP] ``->`` [QCl #QCl] | #divreveal //who wants to sleep// #divpopup #UL #LIAPI: ``mkQCl who_IP want_VV (mkVP sleep_V)`` #LIBul: //кой иска да спи// #LICat: //qui vol dormir// #LIDan: //hvem vil sove// #LIDut: //wie wil slapen// #LIEng: //who wants to sleep// #LIFin: //kuka tahtoo nukkua// #LIFre: //qui veut dormir// #LIGer: //wer will schlafen// #LIIta: //chi vuole dormire// #LINor: //hvem vil sove// #LIPol: //kto chce spać// #LIRon: //cine vrea sã doarmă// #LIRus: //кто хоччет спать// #LISpa: //quién quiere dormir// #LISwe: //vem vill sova// #LIUrd: //كون سونا چاہتا ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [VS #VS] ``->`` [S #S] ``->`` [QCl #QCl] | //who says that she sleeps// |
| ``mkQCl`` | [IP #IP] ``->`` [VQ #VQ] ``->`` [QS #QS] ``->`` [QCl #QCl] | //who wonders who sleeps// |
| ``mkQCl`` | [IP #IP] ``->`` [VA #VA] ``->`` [A #A] ``->`` [QCl #QCl] | //who becomes old// |
| ``mkQCl`` | [IP #IP] ``->`` [VA #VA] ``->`` [AP #AP] ``->`` [QCl #QCl] | //who becomes old// |
| ``mkQCl`` | [IP #IP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [A #A] ``->`` [QCl #QCl] | //who paints it red// |
| ``mkQCl`` | [IP #IP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [QCl #QCl] | //who paints it red// |
| ``mkQCl`` | [IP #IP] ``->`` [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [QCl #QCl] | //who tells her that we sleep// |
| ``mkQCl`` | [IP #IP] ``->`` [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [QCl #QCl] | //who asks her who sleeps// |
| ``mkQCl`` | [IP #IP] ``->`` [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [QCl #QCl] | //who forces her to sleep// |
| ``mkQCl`` | [IP #IP] ``->`` [A #A] ``->`` [QCl #QCl] | //who is old// |
| ``mkQCl`` | [IP #IP] ``->`` [A #A] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is older than her// |
| ``mkQCl`` | [IP #IP] ``->`` [A2 #A2] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is married to her// |
| ``mkQCl`` | [IP #IP] ``->`` [AP #AP] ``->`` [QCl #QCl] | //who is very old// |
| ``mkQCl`` | [IP #IP] ``->`` [NP #NP] ``->`` [QCl #QCl] | //who is the man// |
| ``mkQCl`` | [IP #IP] ``->`` [N #N] ``->`` [QCl #QCl] | //who is a man// |
| ``mkQCl`` | [IP #IP] ``->`` [CN #CN] ``->`` [QCl #QCl] | //who is an old man// |
| ``mkQCl`` | [IP #IP] ``->`` [Adv #Adv] ``->`` [QCl #QCl] | //who is here// |
| ``mkQCl`` | [IP #IP] ``->`` [NP #NP] ``->`` [V2 #V2] ``->`` [QCl #QCl] | #divreveal //who is her// #divpopup #UL #LIAPI: ``mkQCl who_IP she_NP`` #LIBul: //кой е нея// #LICat: //qui és ella// #LIDan: //hvem er hende// #LIDut: //wie is ze// #LIEng: //who is her// #LIFin: //kuka on hän// #LIFre: //qui est elle// #LIGer: //wer ist sie// #LIIta: //chi è lei// #LINor: //hvem er henne// #LIPol: //kto jest nią// #LIRon: //cine este ea// #LIRus: //кто она// #LISpa: //quién es ella// #LISwe: //vem är henne// #LIUrd: //كون اس ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [ClSlash #ClSlash] ``->`` [QCl #QCl] | #divreveal //whom does she love today// #divpopup #UL #LIAPI: ``mkQCl who_IP (mkClSlash (mkClSlash she_NP love_V2) today_Adv)`` #LIBul: //кого обича тя днес// #LICat: //qui estima ella avui// #LIDan: //hvem elsker hun idag// #LIDut: //wie heeft ze lief vandaag// #LIEng: //whom does she love today// #LIFin: //ketä hän rakastaa tänään// #LIFre: //qui aime elle aujourd'hui// #LIGer: //wen liebt sie heute// #LIIta: //chi ama lei oggi// #LINor: //hvem elsker hun idag// #LIPol: //kogo dziś kocha ona// #LIRon: //pe cine iubeşte ea astăzi// #LIRus: //atomic term today_Adv// #LISpa: //quién ama ella hoy// #LISwe: //vem älskar hon idag// #LIUrd: //كون آج وہ پیار كرتی ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IAdv #IAdv] ``->`` [Cl #Cl] ``->`` [QCl #QCl] | #divreveal //why does she sleep// #divpopup #UL #LIAPI: ``mkQCl why_IAdv (mkCl she_NP sleep_V)`` #LIBul: //защо спи тя// #LICat: //per quË dorm ella// #LIDan: //hvorfor sover hun// #LIDut: //waarom slaapt ze// #LIEng: //why does she sleep// #LIFin: //miksi hän nukkuu// #LIFre: //pourquoi dort elle// #LIGer: //warum schläft sie// #LIIta: //perché dorme lei// #LINor: //hvorfor sover hun// #LIPol: //dlaczego ona śpi// #LIRon: //de ce doarme ea// #LIRus: //почему она спдит// #LISpa: //porqué duerme ella// #LISwe: //varför sover hon// #LIUrd: //كیوں وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [Prep #Prep] ``->`` [IP #IP] ``->`` [Cl #Cl] ``->`` [QCl #QCl] | #divreveal //with whom does she sleep// #divpopup #UL #LIAPI: ``mkQCl with_Prep who_IP (mkCl she_NP sleep_V)`` #LIBul: //с кой спи тя// #LICat: //amb qui dorm ella// #LIDan: //med hvem sover hun// #LIDut: //met wie slaapt ze// #LIEng: //with whom does she sleep// #LIFin: //kenen kanssa hän nukkuu// #LIFre: //avec qui dort elle// #LIGer: //mit wem schläft sie// #LIIta: //con chi dorme lei// #LINor: //med hvem sover hun// #LIPol: //z kim ona śpi// #LIRon: //cu cine doarme ea// #LIRus: //с кто она спдит// #LISpa: //con quién duerme ella// #LISwe: //med vem sover hon// #LIUrd: //كiس كے ساتh- وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IAdv #IAdv] ``->`` [NP #NP] ``->`` [QCl #QCl] | #divreveal //where is she// #divpopup #UL #LIAPI: ``mkQCl where_IAdv she_NP`` #LIBul: //къде е тя// #LICat: //on és ella// #LIDan: //hvor er hun// #LIDut: //waar is ze// #LIEng: //where is she// #LIFin: //missä hän on// #LIFre: //où est elle// #LIGer: //wo ist sie// #LIIta: //dove è lei// #LINor: //hvor er hun// #LIPol: //gdzie jest ona// #LIRon: //unde este ea// #LIRus: //где она// #LISpa: //donde es ella// #LISwe: //var är hon// #LIUrd: //وہ كہاں ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IComp #IComp] ``->`` [NP #NP] ``->`` [QCl #QCl] | #divreveal //who is this man// #divpopup #UL #LIAPI: ``mkQCl (mkIComp who_IP) (mkNP this_Det man_N)`` #LIBul: //кой е този мъж// #LICat: //qui és aquest home// #LIDan: //hvem er denne mand// #LIDut: //wie is deze man// #LIEng: //who is this man// #LIFin: //kuka tämä mies on// #LIFre: //qui est cet homme// #LIGer: //wer ist dieser Mann// #LIIta: //chi è questo uomo// #LINor: //hvem er denne mannen// #LIPol: //kim jest ten mężczyzna// #LIRon: //cine este acest om// #LIRus: //кто этот человек// #LISpa: //quién es este hombre// #LISwe: //vem är den här mannen// #LIUrd: //یہ آدمی كون ہے// #EUL #ediv #ediv |
| ``mkQCl`` | [IP #IP] ``->`` [QCl #QCl] | #divreveal //which city is there// #divpopup #UL #LIAPI: ``mkQCl (mkIP which_IQuant city_N)`` #LIBul: //кой град е тук// #LICat: //quin ciutat hi ha quin ciutat// #LIDan: //hvilken by findes det// #LIDut: //welke stad is er// #LIEng: //which city is there// #LIFin: //mikä kaupunki on olemassa// #LIFre: //quelle ville il y a// #LIGer: //welche Stadt gibt es// #LIIta: //quale città c' è// #LINor: //hvilken by finnes det// #LIPol: //które miasto jest// #LIRon: //care oraş este// #LIRus: //который город существует// #LISpa: //qué ciudad hay// #LISwe: //vilken stad finns det// #LIUrd: //وہاں كون سی شہر ہے// #EUL #ediv #ediv |
==QS - question==[QS]
|| Function  | Type  | Example  ||
| ``mkQS`` | ([Tense #Tense]) ``->`` ([Ant #Ant]) ``->`` ([Pol #Pol]) ``->`` [QCl #QCl] ``->`` [QS #QS] | #divreveal //who wouldn't have slept// #divpopup #UL #LIAPI: ``mkQS conditionalTense anteriorAnt negativePol (mkQCl who_IP sleep_V)`` #LIBul: //кой не би спал// #LICat: //qui no hauria dormit// #LIDan: //hvem ville ikke have sovet// #LIDut: //wie zou niet geslapen hebben// #LIEng: //who wouldn't have slept// #LIFin: //kuka ei olisi nukkunut// #LIFre: //qui n' aurait pas dormi// #LIGer: //wer würde nicht geschlafen haben// #LIIta: //chi non avrebbe dormito// #LINor: //hvem ville ikke ha sovet// #LIPol: //kto nie spałby// #LIRon: //cine nu ar fi dormit// #LIRus: //кто спал бы// #LISpa: //quién no habría dormido// #LISwe: //vem skulle inte ha sovit// #LIUrd: //كون نا ژاید سو ے// #EUL #ediv #ediv |
| ``mkQS`` | [Cl #Cl] ``->`` [QS #QS] | //mkQS// |
==Quant - quantifier ('nucleus' of Det)==[Quant]
|| Function  | Type  | Example  ||
| ``a_Quant`` | [Quant #Quant] | //a// |
| ``mkQuant`` | [Pron #Pron] ``->`` [Quant #Quant] | //my// |
| ``no_Quant`` | [Quant #Quant] | //no// |
| ``that_Quant`` | [Quant #Quant] | //that// |
| ``the_Quant`` | [Quant #Quant] | //the// |
| ``this_Quant`` | [Quant #Quant] | //this// |
==RCl - relative clause, with all tenses==[RCl]
|| Function  | Type  | Example  ||
| ``mkRCl`` | [RP #RP] ``->`` [VP #VP] ``->`` [RCl #RCl] | #divreveal //who always sleep// #divpopup #UL #LIAPI: ``mkRCl which_RP (mkVP always_AdV (mkVP sleep_V))`` #LIBul: //който винаги спя// #LICat: //que dormo sempre// #LIDan: //som altid sover// #LIDut: //die altijd slaapt// #LIEng: //who always sleep// #LIFin: //joka nukun aina// #LIFre: //qui dors toujours// #LIGer: //der immer schläft// #LIIta: //che dormo sempre// #LINor: //som altid sover// #LIPol: //który zawsze śpi// #LIRon: //care dorm mereu// #LIRus: //который всегда спдит// #LISpa: //que duermo siempre// #LISwe: //som alltid sover// #LIUrd: //جو ہمیشہ سوتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V #V] ``->`` [RCl #RCl] | #divreveal //who sleep// #divpopup #UL #LIAPI: ``mkRCl which_RP sleep_V`` #LIBul: //който спя// #LICat: //que dormo// #LIDan: //som sover// #LIDut: //die slaapt// #LIEng: //who sleep// #LIFin: //joka nukun// #LIFre: //qui dors// #LIGer: //der schläft// #LIIta: //che dormo// #LINor: //som sover// #LIPol: //który śpi// #LIRon: //care dorm// #LIRus: //который спдит// #LISpa: //que duermo// #LISwe: //som sover// #LIUrd: //جو سوتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V2 #V2] ``->`` [NP #NP] ``->`` [RCl #RCl] | #divreveal //who love her// #divpopup #UL #LIAPI: ``mkRCl which_RP love_V2 she_NP`` #LIBul: //който обичам нея// #LICat: //que la estimo// #LIDan: //som elsker hende// #LIDut: //die haar lief heeft// #LIEng: //who love her// #LIFin: //joka rakastan häntä// #LIFre: //qui l' aime// #LIGer: //der sie liebt// #LIIta: //che la amo// #LINor: //som elsker henne// #LIPol: //który kocha ją// #LIRon: //care o iubesc// #LIRus: //который любдит её// #LISpa: //que la amo// #LISwe: //som älskar henne// #LIUrd: //جو اس كو پیار كرتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [RCl #RCl] | #divreveal //who send it to her// #divpopup #UL #LIAPI: ``mkRCl which_RP send_V3 it_NP she_NP`` #LIBul: //който пращам него до нея// #LICat: //que ho li envio// #LIDan: //som sender det til hende// #LIDut: //die het haar stuurt// #LIEng: //who send it to her// #LIFin: //joka lähetän sen hänelle// #LIFre: //qui le lui envoie// #LIGer: //der es ihr schickt// #LIIta: //che lo le mando// #LINor: //som sender det til henne// #LIPol: //który wysyła do niej je// #LIRon: //care i -l trimit// #LIRus: //который посылает ней его// #LISpa: //que lo le mando// #LISwe: //som skickar det till henne// #LIUrd: //جو یہ اس كو بھیجتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [VV #VV] ``->`` [VP #VP] ``->`` [RCl #RCl] | #divreveal //who want to sleep// #divpopup #UL #LIAPI: ``mkRCl which_RP want_VV (mkVP sleep_V)`` #LIBul: //който искам да спя// #LICat: //que vull dormir// #LIDan: //som vil sove// #LIDut: //die slapen wil// #LIEng: //who want to sleep// #LIFin: //joka tahdon nukkua// #LIFre: //qui veux dormir// #LIGer: //der schlafen will// #LIIta: //che voglio dormire// #LINor: //som vil sove// #LIPol: //który chce spać// #LIRon: //care vreau sã dorm// #LIRus: //который хоччет спать// #LISpa: //que quiero dormir// #LISwe: //som vill sova// #LIUrd: //جو سونا چاہتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [VS #VS] ``->`` [S #S] ``->`` [RCl #RCl] | #divreveal //who say that I sleep// #divpopup #UL #LIAPI: ``mkRCl which_RP say_VS (mkS (mkCl i_NP sleep_V))`` #LIBul: //който казвам , че аз спя// #LICat: //que dic que jo dormo// #LIDan: //som siger at jeg sover// #LIDut: //die zegt dat ik slaap// #LIEng: //who say that I sleep// #LIFin: //joka sanon että minä nukun// #LIFre: //qui dis que je dors// #LIGer: //der sagt daß ich schlafe// #LIIta: //che dico che io dormo// #LINor: //som sier at jeg sover// #LIPol: //który mówi , że ja śpię// #LIRon: //care spun cã eu dorm// #LIRus: //который говордит , что я сплю// #LISpa: //que digo que yo duermo// #LISwe: //som säger att jag sover// #LIUrd: //جو كہتا ہوں كہ میں سوتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [VQ #VQ] ``->`` [QS #QS] ``->`` [RCl #RCl] | #divreveal //who wonder who sleeps// #divpopup #UL #LIAPI: ``mkRCl which_RP wonder_VQ (mkQS (mkQCl who_IP sleep_V))`` #LIBul: //който се учудвам кой спи// #LICat: //que em pregunto qui dorm// #LIDan: //som undres hvem som sover// #LIDut: //die zich af vraagt wie slaapt// #LIEng: //who wonder who sleeps// #LIFin: //joka ihmettelen kuka nukkuu// #LIFre: //qui m' étonne qui dort// #LIGer: //der sich wundert wer schläft// #LIIta: //che mi domando chi dorme// #LINor: //som undrer hvem som sover// #LIPol: //który zastanawia się , kto śpi// #LIRon: //care mă întreb cine doarme// #LIRus: //который интересует кто спдит// #LISpa: //que me pregunto quién duerme// #LISwe: //som undrar vem som sover// #LIUrd: //جو حعران ہوتا ہوں كہ كون سوتا ہے// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [VA #VA] ``->`` [A #A] ``->`` [RCl #RCl] | #divreveal //who become old// #divpopup #UL #LIAPI: ``mkRCl which_RP become_VA old_A`` #LIBul: //който ставам стар// #LICat: //que em torno vell// #LIDan: //som bliver gammel// #LIDut: //die oud wordt// #LIEng: //who become old// #LIFin: //joka tulen vanhaksi// #LIFre: //qui deviens vieux// #LIGer: //der alt wird// #LIIta: //che divento vecchio// #LINor: //som blir gammel// #LIPol: //który staje się stary// #LIRon: //care devin vechi// #LIRus: //который становдит старым// #LISpa: //que me converto viejo// #LISwe: //som blir gammal// #LIUrd: //جو بوڑھا بنتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [VA #VA] ``->`` [AP #AP] ``->`` [RCl #RCl] | #divreveal //who become very old// #divpopup #UL #LIAPI: ``mkRCl which_RP become_VA (mkAP very_AdA old_A)`` #LIBul: //който ставам много стар// #LICat: //que em torno molt vell// #LIDan: //som bliver meget gammel// #LIDut: //die erg oud wordt// #LIEng: //who become very old// #LIFin: //joka tulen erittäin vanhaksi// #LIFre: //qui deviens très vieux// #LIGer: //der sehr alt wird// #LIIta: //che divento molto vecchio// #LINor: //som blir mye gammel// #LIPol: //który staje się bardzo stary// #LIRon: //care devin foarte vechi// #LIRus: //который становдит очень старым// #LISpa: //que me converto muy viejo// #LISwe: //som blir mycket gammal// #LIUrd: //جو بہت بوڑھا بنتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [A #A] ``->`` [RCl #RCl] | #divreveal //who paint it red// #divpopup #UL #LIAPI: ``mkRCl which_RP paint_V2A it_NP red_A`` #LIBul: //който рисувам него червено// #LICat: //que ho pinto en vermell// #LIDan: //som maler det rødt// #LIDut: //die het rood schildeert// #LIEng: //who paint it red// #LIFin: //joka maalaan sen punaiseksi// #LIFre: //qui le peins en rouge// #LIGer: //der es rot malt// #LIIta: //che lo dipingo rosso// #LINor: //som maler det rødt// #LIPol: //który maluje je na czerwono// #LIRon: //care îl pictez roşu// #LIRus: //который рисует красным его// #LISpa: //que lo pinto en rojo// #LISwe: //som målar det rött// #LIUrd: //جو یہ كو لال رنگ كرتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [RCl #RCl] | #divreveal //who paint it red// #divpopup #UL #LIAPI: ``mkRCl which_RP paint_V2A it_NP (mkAP red_A)`` #LIBul: //който рисувам него червено// #LICat: //que ho pinto en vermell// #LIDan: //som maler det rødt// #LIDut: //die het rood schildeert// #LIEng: //who paint it red// #LIFin: //joka maalaan sen punaiseksi// #LIFre: //qui le peins en rouge// #LIGer: //der es rot malt// #LIIta: //che lo dipingo rosso// #LINor: //som maler det rødt// #LIPol: //który maluje je na czerwono// #LIRon: //care îl pictez roşu// #LIRus: //который рисует красным его// #LISpa: //que lo pinto en rojo// #LISwe: //som målar det rött// #LIUrd: //جو یہ كو لال رنگ كرتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [RCl #RCl] | #divreveal //who answer to him that we sleep// #divpopup #UL #LIAPI: ``mkRCl which_RP answer_V2S he_NP (mkS (mkCl we_NP sleep_V))`` #LIBul: //който отговарям му , че ние спим// #LICat: //que li responc que nosaltres dormim// #LIDan: //som svarer til ham at vi sover// #LIDut: //die hem antwoordt dat we slapen// #LIEng: //who answer to him that we sleep// #LIFin: //joka vastaan hänelle että me nukumme// #LIFre: //qui lui réponds que nous dormons// #LIGer: //der ihm antwortet daß wir schlafen// #LIIta: //che gli rispondo che noi dormiamo// #LINor: //som svarer til ham at vi sover// #LIPol: //który odpowiada jemu , że my śpimy// #LIRon: //care îi răspund cã noi dormim// #LIRus: //который отвечает , что мы спдим его// #LISpa: //que le respondo que nosotros dormimos// #LISwe: //som svarar till honom att vi sover// #LIUrd: //جو اس كو جواب دیتا ہوں كہ ہم سوتع ہیں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [RCl #RCl] | #divreveal //who ask him who sleeps// #divpopup #UL #LIAPI: ``mkRCl which_RP ask_V2Q he_NP (mkQS (mkQCl who_IP sleep_V))`` #LIBul: //който питам него кой спи// #LICat: //que li pregunto qui dorm// #LIDan: //som spørger ham hvem som sover// #LIDut: //die hem vraagt wie slaapt// #LIEng: //who ask him who sleeps// #LIFin: //joka kysyn häneltä kuka nukkuu// #LIFre: //qui lui demande qui dort// #LIGer: //der ihn fragt wer schläft// #LIIta: //che gli chiedo chi dorme// #LINor: //som spørr ham hvem som sover// #LIPol: //który pyta jego , kto śpi// #LIRon: //care îl întreb cine doarme// #LIRus: //который спрашивает кто спдит его// #LISpa: //que le pregunto quién duerme// #LISwe: //som frågar honom vem som sover// #LIUrd: //جو اس سے پوچھتا ہوں كہ كون سوتا ہے// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [RCl #RCl] | #divreveal //who beg him to sleep// #divpopup #UL #LIAPI: ``mkRCl which_RP beg_V2V he_NP (mkVP sleep_V)`` #LIBul: //който моля него да спи// #LICat: //que el demano a dormir// #LIDan: //som beder ham at sove// #LIDut: //die hem te slapen smeekt// #LIEng: //who beg him to sleep// #LIFin: //joka pyydän häntä nukkumaan// #LIFre: //qui le demande à dormir// #LIGer: //der ihn zu schlafen bittet// #LIIta: //che lo prego di dormire// #LINor: //som ber ham att sove// #LIPol: //atomic term beg_V2V// #LIRon: //care îl rog sã doarmă// #LIRus: //который просит спать его// #LISpa: //que lo rogo a dormir// #LISwe: //som ber honom att sova// #LIUrd: //جو اس سے سونا كی التجا كرتا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [A #A] ``->`` [RCl #RCl] | #divreveal //who am old// #divpopup #UL #LIAPI: ``mkRCl which_RP old_A`` #LIBul: //който съм стар// #LICat: //que sóc vell// #LIDan: //som er gammel// #LIDut: //die oud is// #LIEng: //who am old// #LIFin: //joka olen vanha// #LIFre: //qui suis vieux// #LIGer: //der alt ist// #LIIta: //che sono vecchio// #LINor: //som er gammel// #LIPol: //który jest stary// #LIRon: //care sunt vechi// #LIRus: //который старый// #LISpa: //que soy viejo// #LISwe: //som är gammal// #LIUrd: //جو بوڑھا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [A #A] ``->`` [NP #NP] ``->`` [RCl #RCl] | #divreveal //who am older than he// #divpopup #UL #LIAPI: ``mkRCl which_RP old_A he_NP`` #LIBul: //който съм по - стар от него// #LICat: //que sóc més vell que ell// #LIDan: //som er ældre end han// #LIDut: //die ouder dan hij is// #LIEng: //who am older than he// #LIFin: //joka olen vanhempi kuin hän// #LIFre: //qui suis plus vieux que lui// #LIGer: //der älter als er ist// #LIIta: //che sono più vecchio di lui// #LINor: //som er eldre enn han// #LIPol: //który jest starszy niż on// #LIRon: //care sunt mai vechi decât el// #LIRus: //который старше него// #LISpa: //que soy más viejo que él// #LISwe: //som är äldre än han// #LIUrd: //جو اس سے بوڑھا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [A2 #A2] ``->`` [NP #NP] ``->`` [RCl #RCl] | #divreveal //who am married to him// #divpopup #UL #LIAPI: ``mkRCl which_RP married_A2 he_NP`` #LIBul: //който съм женен за него// #LICat: //que sóc casat a ell// #LIDan: //som er gift med ham// #LIDut: //die getrouwd met hem is// #LIEng: //who am married to him// #LIFin: //joka olen avioitunut hänen kanssa// #LIFre: //qui suis marié à lui// #LIGer: //der verheiratet mit ihm ist// #LIIta: //che sono sposato con lui// #LINor: //som er gift med ham// #LIPol: //który jest zaślubiony jemu// #LIRon: //care sunt căsătorit cu el// #LIRus: //который замужем за им// #LISpa: //que soy casado a él// #LISwe: //som är gift med honom// #LIUrd: //جو اس سے شادy?كرنا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [AP #AP] ``->`` [RCl #RCl] | #divreveal //who am very old// #divpopup #UL #LIAPI: ``mkRCl which_RP (mkAP very_AdA old_A)`` #LIBul: //който съм много стар// #LICat: //que sóc molt vell// #LIDan: //som er meget gammel// #LIDut: //die erg oud is// #LIEng: //who am very old// #LIFin: //joka olen erittäin vanha// #LIFre: //qui suis très vieux// #LIGer: //der sehr alt ist// #LIIta: //che sono molto vecchio// #LINor: //som er mye gammel// #LIPol: //który jest bardzo stary// #LIRon: //care sunt foarte vechi// #LIRus: //который очень старый// #LISpa: //que soy muy viejo// #LISwe: //som är mycket gammal// #LIUrd: //جو بہت بوڑھا ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [NP #NP] ``->`` [RCl #RCl] | #divreveal //who am the woman// #divpopup #UL #LIAPI: ``mkRCl which_RP (mkNP the_Det woman_N)`` #LIBul: //който съм жената// #LICat: //que sóc la dona// #LIDan: //som er kvinden// #LIDut: //die de vrouw is// #LIEng: //who am the woman// #LIFin: //joka olen nainen// #LIFre: //qui suis la femme// #LIGer: //der die Frau ist// #LIIta: //che sono la donna// #LINor: //som er kvinna// #LIPol: //który jest kobietą// #LIRon: //care sunt femeia// #LIRus: //который женщина// #LISpa: //que soy la mujer// #LISwe: //som är kvinnan// #LIUrd: //جو عورت ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [N #N] ``->`` [RCl #RCl] | #divreveal //who am a woman// #divpopup #UL #LIAPI: ``mkRCl which_RP woman_N`` #LIBul: //който съм жена// #LICat: //que sóc dona// #LIDan: //som er en kvinde// #LIDut: //die vrouw is// #LIEng: //who am a woman// #LIFin: //joka olen nainen// #LIFre: //qui suis femme// #LIGer: //der eine Frau ist// #LIIta: //che sono donna// #LINor: //som er ei kvinne// #LIPol: //który jest kobieta// #LIRon: //care sunt femeie// #LIRus: //который женщина// #LISpa: //que soy mujer// #LISwe: //som är en kvinna// #LIUrd: //جو عورت ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [CN #CN] ``->`` [RCl #RCl] | #divreveal //who am an old woman// #divpopup #UL #LIAPI: ``mkRCl which_RP (mkCN old_A woman_N)`` #LIBul: //който съм стара жена// #LICat: //que sóc dona vell// #LIDan: //som er en gammel kvinde// #LIDut: //die oude vrouw is// #LIEng: //who am an old woman// #LIFin: //joka olen vanha nainen// #LIFre: //qui suis vieille femme// #LIGer: //der eine alte Frau ist// #LIIta: //che sono vecchia donna// #LINor: //som er ei gammel kvinne// #LIPol: //który jest stara kobieta// #LIRon: //care sunt femeie veche// #LIRus: //который старая женщина// #LISpa: //que soy vieja mujer// #LISwe: //som är en gammal kvinna// #LIUrd: //جو بوڑھی عورت ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [Adv #Adv] ``->`` [RCl #RCl] | #divreveal //who am here// #divpopup #UL #LIAPI: ``mkRCl which_RP here_Adv`` #LIBul: //който съм тук// #LICat: //que sóc aquí// #LIDan: //som er her// #LIDut: //die hier is// #LIEng: //who am here// #LIFin: //joka olen täällä// #LIFre: //qui suis ici// #LIGer: //der hier ist// #LIIta: //che sono quà// #LINor: //som er her// #LIPol: //który jest tutaj// #LIRon: //care sunt aici// #LIRus: //который здесь// #LISpa: //que soy aquí// #LISwe: //som är här// #LIUrd: //جو یہاں ہوں// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [NP #NP] ``->`` [V2 #V2] ``->`` [RCl #RCl] | #divreveal //whom she loves// #divpopup #UL #LIAPI: ``mkRCl which_RP she_NP love_V2`` #LIBul: //който тя обича// #LICat: //que ella estima// #LIDan: //som hun elsker// #LIDut: //die ze lief heeft// #LIEng: //whom she loves// #LIFin: //jota hän rakastaa// #LIFre: //qu' elle aime// #LIGer: //den sie liebt// #LIIta: //che lei ama// #LINor: //som hun elsker// #LIPol: //którego kocha ona// #LIRon: //pe care îl iubeşte ea// #LIRus: //которого она любдит// #LISpa: //que ella ama// #LISwe: //som hon älskar// #LIUrd: //جو كو وہ پیار كرتی ہے// #EUL #ediv #ediv |
| ``mkRCl`` | [RP #RP] ``->`` [ClSlash #ClSlash] ``->`` [RCl #RCl] | #divreveal //whom she loves today// #divpopup #UL #LIAPI: ``mkRCl which_RP (mkClSlash (mkClSlash she_NP love_V2) today_Adv)`` #LIBul: //който тя обича днес// #LICat: //que ella estima avui// #LIDan: //som hun elsker idag// #LIDut: //die ze lief heeft vandaag// #LIEng: //whom she loves today// #LIFin: //jota hän rakastaa tänään// #LIFre: //pre {"que"; "qu'" / strs {"a"; "à"; "â"; "e"; "é"; "è"; "ê¨"; "h";// #LIGer: //den sie liebt heute// #LIIta: //che lei ama oggi// #LINor: //som hun elsker idag// #LIPol: //którego dziś kocha ona// #LIRon: //pe care îl iubeşte ea astăzi// #LIRus: //atomic term today_Adv// #LISpa: //que ella ama hoy// #LISwe: //som hon älskar idag// #LIUrd: //جو كو آج وہ پیار كرتی ہے// #EUL #ediv #ediv |
| ``mkRCl`` | [Cl #Cl] ``->`` [RCl #RCl] | //such that she loves him// |
==RP - relative pronoun==[RP]
|| Function  | Type  | Example  ||
| ``mkRP`` | [Prep #Prep] ``->`` [NP #NP] ``->`` [RP #RP] ``->`` [RP #RP] | #divreveal //all the cities in whom// #divpopup #UL #LIAPI: ``mkRP in_Prep (mkNP all_Predet (mkNP the_Quant pluralNum city_N)) which_RP`` #LIBul: //всичките градовете в който// #LICat: //totes les ciutats en que// #LIDan: //alle byerne i hvilken// #LIDut: //alle de stadden in die// #LIEng: //all the cities in whom// #LIFin: //jossa kaikki kaupungit// #LIFre: //toutes les villes dans lequel// #LIGer: //alle die Städte in dem// #LIIta: //tutte le città in cui// #LINor: //alle byene i hvilken// #LIPol: //w którym wszystkie miast// #LIRon: //toate oraşele în care// #LIRus: //все городы в котором// #LISpa: //todas las ciudades en que// #LISwe: //alla städerna i vilken// #LIUrd: //جو تمام شہر معں// #EUL #ediv #ediv |
| ``which_RP`` | [RP #RP] | #divreveal //RelativeEng.IdRP// #divpopup #UL #LIAPI: ``which_RP`` #LIBul: //RelativeBul.IdRP// #LICat: //RelativeCat.IdRP// #LIDan: //RelativeDan.IdRP// #LIDut: //RelativeDut.IdRP// #LIEng: //RelativeEng.IdRP// #LIFin: //RelativeFin.IdRP// #LIFre: //RelativeFre.IdRP// #LIGer: //RelativeGer.IdRP// #LIIta: //RelativeIta.IdRP// #LINor: //RelativeNor.IdRP// #LIPol: //RelativePol.IdRP// #LIRon: //RelativeRon.IdRP// #LIRus: //RelativeRus.IdRP// #LISpa: //RelativeSpa.IdRP// #LISwe: //RelativeSwe.IdRP// #LIUrd: //RelativeUrd.IdRP// #EUL #ediv #ediv |
==RS - relative==[RS]
|| Function  | Type  | Example  ||
| ``mkRS`` | ([Tense #Tense]) ``->`` ([Ant #Ant]) ``->`` ([Pol #Pol]) ``->`` [RCl #RCl] ``->`` [RS #RS] | #divreveal //who wouldn't have slept// #divpopup #UL #LIAPI: ``mkRS conditionalTense anteriorAnt negativePol (mkRCl which_RP sleep_V)`` #LIBul: //който не бих спал// #LICat: //que no hauria dormit// #LIDan: //som ikke ville have sovet// #LIDut: //die niet geslapen hebben zou// #LIEng: //who wouldn't have slept// #LIFin: //joka en olisi nukkunut// #LIFre: //qui n' aurais pas dormi// #LIGer: //der nicht geschlafen haben würde// #LIIta: //che non avrei dormito// #LINor: //som ikke ville ha sovet// #LIPol: //który nie spałby// #LIRon: //care nu aş fi dormit// #LIRus: //который спал бы// #LISpa: //que no habría dormido// #LISwe: //som inte skulle ha sovit// #LIUrd: //جو نا ژاید سو وں// #EUL #ediv #ediv |
| ``mkRS`` | [Conj #Conj] ``->`` [RS #RS] ``->`` [RS #RS] ``->`` [RS #RS] | //who sleeps and whose mother runsx// |
| ``mkRS`` | [Conj #Conj] ``->`` [ListRS #ListRS] ``->`` [RS #RS] | //who sleeps, whom I see and who sleeps// |
==S - declarative sentence==[S]
|| Function  | Type  | Example  ||
| ``mkS`` | ([Tense #Tense]) ``->`` ([Ant #Ant]) ``->`` ([Pol #Pol]) ``->`` [Cl #Cl] ``->`` [S #S] | #divreveal //she wouldn't have slept// #divpopup #UL #LIAPI: ``mkS conditionalTense anteriorAnt negativePol (mkCl she_NP sleep_V)`` #LIBul: //тя не би спалa// #LICat: //ella no hauria dormit// #LIDan: //hun ville ikke have sovet// #LIDut: //ze zou niet geslapen hebben// #LIEng: //she wouldn't have slept// #LIFin: //hän ei olisi nukkunut// #LIFre: //elle n' aurait pas dormi// #LIGer: //sie würde nicht geschlafen haben// #LIIta: //lei non avrebbe dormito// #LINor: //hun ville ikke ha sovet// #LIPol: //ona nie spałaby// #LIRon: //ea nu ar fi dormit// #LIRus: //она не спала бы// #LISpa: //ella no habría dormido// #LISwe: //hon skulle inte ha sovit// #LIUrd: //وہ نا شاید سوئے// #EUL #ediv #ediv |
| ``mkS`` | [Conj #Conj] ``->`` [S #S] ``->`` [S #S] ``->`` [S #S] | #divreveal //she sleeps and I run// #divpopup #UL #LIAPI: ``mkS and_Conj (mkS (mkCl she_NP sleep_V)) (mkS (mkCl i_NP run_V))`` #LIBul: //тя спи и аз бягам// #LICat: //ella dorm i jo corro// #LIDan: //hun sover og jeg løber// #LIDut: //ze slaapt en ik ren// #LIEng: //she sleeps and I run// #LIFin: //hän nukkuu ja minä juoksen// #LIFre: //elle dort et je cours// #LIGer: //sie schläft und ich laufe// #LIIta: //lei dorme e io corro// #LINor: //hun sover og jeg springer// #LIPol: //ona śpi i ja biegnę// #LIRon: //ea doarme şi eu fug// #LIRus: //она спдит и я бегаю// #LISpa: //ella duerme y yo corro// #LISwe: //hon sover och jag springer// #LIUrd: //وہ سوتی ہے اور میں دوڑتا ہوں// #EUL #ediv #ediv |
| ``mkS`` | [Conj #Conj] ``->`` [ListS #ListS] ``->`` [S #S] | #divreveal //she sleeps , I run and you walk// #divpopup #UL #LIAPI: ``mkS and_Conj (mkListS (mkS (mkCl she_NP sleep_V)) (mkListS (mkS (mkCl i_NP run_V)) (mkS (mkCl (mkNP youSg_Pron) walk_V))))`` #LIBul: //тя спи , аз бягам и ти ходиш// #LICat: //ella dorm , jo corro i tu camines// #LIDan: //hun sover , jeg løber og du går// #LIDut: //ze slaapt , ik ren en je loopt// #LIEng: //she sleeps , I run and you walk// #LIFin: //hän nukkuu , minä juoksen ja sinä kävelet// #LIFre: //elle dort , je cours et tu marches// #LIGer: //sie schläft , ich laufe und du gehst// #LIIta: //lei dorme , io corro e tu cammini// #LINor: //hun sover , jeg springer og du går// #LIPol: //ona śpi , ja biegnę i ty spacerujesz// #LIRon: //ea doarme , eu fug şi tu mergi// #LIRus: //она спдит , я бегаю и ты гуляешь// #LISpa: //ella duerme , yo corro y tu caminas// #LISwe: //hon sover , jag springer och du går// #LIUrd: //وہ سوتی ہے , میں دوڑتا ہوں اور تم چلتا ہے// #EUL #ediv #ediv |
| ``mkS`` | [Adv #Adv] ``->`` [S #S] ``->`` [S #S] | #divreveal //today , she sleeps// #divpopup #UL #LIAPI: ``mkS today_Adv (mkS (mkCl she_NP sleep_V))`` #LIBul: //днес , тя спи// #LICat: //avui , ella dorm// #LIDan: //idag sover hun// #LIDut: //vandaag slaapt ze// #LIEng: //today , she sleeps// #LIFin: //tänään hän nukkuu// #LIFre: //aujourd'hui , elle dort// #LIGer: //heute schläft sie// #LIIta: //oggi , lei dorme// #LINor: //idag sover hun// #LIPol: //dziś ona śpi// #LIRon: //astăzi ea doarme// #LIRus: //atomic term today_Adv// #LISpa: //hoy , ella duerme// #LISwe: //idag sover hon// #LIUrd: //آج وہ سوتی ہے// #EUL #ediv #ediv |
==SC - embedded sentence or question==[SC]
|| Function  | Type  | Example  ||
| ``mkSC`` | [S #S] ``->`` [SC #SC] | #divreveal //that she sleeps// #divpopup #UL #LIAPI: ``mkSC (mkS (mkCl she_NP sleep_V))`` #LIBul: //че тя спи// #LICat: //que ella dorm// #LIDan: //at hun sover// #LIDut: //dat ze slaapt// #LIEng: //that she sleeps// #LIFin: //että hän nukkuu// #LIFre: //qu' elle dort// #LIGer: //daß sie schläft// #LIIta: //che lei dorme// #LINor: //at hun sover// #LIPol: //że ona śpi// #LIRon: //cã ea doarme// #LIRus: //что она спдит// #LISpa: //que ella duerme// #LISwe: //att hon sover// #LIUrd: //كہ وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkSC`` | [QS #QS] ``->`` [SC #SC] | #divreveal //who sleeps// #divpopup #UL #LIAPI: ``mkSC (mkQS (mkQCl who_IP sleep_V))`` #LIBul: //който спи// #LICat: //qui dorm// #LIDan: //hvem som sover// #LIDut: //wie slaapt// #LIEng: //who sleeps// #LIFin: //kuka nukkuu// #LIFre: //qui dort// #LIGer: //wer schläft// #LIIta: //chi dorme// #LINor: //hvem som sover// #LIPol: //kto śpi// #LIRon: //cine doarme// #LIRus: //кто спдит// #LISpa: //quién duerme// #LISwe: //vem som sover// #LIUrd: //كون سوتا ہے// #EUL #ediv #ediv |
| ``mkSC`` | [VP #VP] ``->`` [SC #SC] | #divreveal //to sleep// #divpopup #UL #LIAPI: ``mkSC (mkVP sleep_V)`` #LIBul: //да спя// #LICat: //dormir// #LIDan: //at sove// #LIDut: //te slapen// #LIEng: //to sleep// #LIFin: //nukkua// #LIFre: //dormir// #LIGer: //zu schlafen// #LIIta: //dormire// #LINor: //å sove// #LIPol: //spać// #LIRon: //sã doarmă// #LIRus: //спать// #LISpa: //dormir// #LISwe: //att sova// #LIUrd: //سونا// #EUL #ediv #ediv |
==SSlash==[SSlash]
|| Function  | Type  | Example  ||
| ``mkSSlash`` | [Temp #Temp] ``->`` [Pol #Pol] ``->`` [ClSlash #ClSlash] ``->`` [SSlash #SSlash] | //mkSSlash// |
==Sub100==[Sub100]
|| Function  | Type  | Example  ||
| ``mkSub100`` | [Unit #Unit] ``->`` [Sub100 #Sub100] | #divreveal //eight// #divpopup #UL #LIAPI: ``mkSub100 n8_Unit`` #LIBul: //осмина// #LICat: //vuit// #LIDan: //otte// #LIDut: //acht// #LIEng: //eight// #LIFin: //kahdeksan// #LIFre: //huit// #LIGer: //acht// #LIIta: //otto// #LINor: //åtte// #LIPol: //osiemm// #LIRon: //opt// #LIRus: //восемь// #LISpa: //ocho// #LISwe: //åtta// #LIUrd: //آتھ// #EUL #ediv #ediv |
| ``mkSub100`` | [Unit #Unit] ``->`` [Unit #Unit] ``->`` [Sub100 #Sub100] | #divreveal //eighty - three// #divpopup #UL #LIAPI: ``mkSub100 n8_Unit n3_Unit`` #LIBul: //осемдесет и трима// #LICat: //vuitanta- tres// #LIDan: //tre og firs// #LIDut: //drieëntachtig// #LIEng: //eighty - three// #LIFin: //kahdeksankymmentäkolme// #LIFre: //quatre-vingt - trois// #LIGer: //dreiundachzig// #LIIta: //ottantatre// #LINor: //åtti tre// #LIPol: //osiemdziesiąt trzy// #LIRon: //optzeci şi trei// #LIRus: //восемьдесят три// #LISpa: //ochenta y tres// #LISwe: //åttiotre// #LIUrd: //تراسی// #EUL #ediv #ediv |
| ``tenfoldSub100`` | [Unit #Unit] ``->`` [Sub100 #Sub100] | #divreveal //eight// #divpopup #UL #LIAPI: ``mkSub100 n8_Unit`` #LIBul: //осмина// #LICat: //vuit// #LIDan: //otte// #LIDut: //acht// #LIEng: //eight// #LIFin: //kahdeksan// #LIFre: //huit// #LIGer: //acht// #LIIta: //otto// #LINor: //åtte// #LIPol: //osiemm// #LIRon: //opt// #LIRus: //восемь// #LISpa: //ocho// #LISwe: //åtta// #LIUrd: //آتھ// #EUL #ediv #ediv |
==Sub1000==[Sub1000]
|| Function  | Type  | Example  ||
| ``mkSub1000`` | [Sub100 #Sub100] ``->`` [Sub1000 #Sub1000] | //coerce 1..99// |
| ``mkSub1000`` | [Unit #Unit] ``->`` [Sub1000 #Sub1000] | //100n// |
| ``mkSub1000`` | [Unit #Unit] ``->`` [Sub100 #Sub100] ``->`` [Sub1000 #Sub1000] | //100m + n// |
==Subj - subjunction==[Subj]
|| Function  | Type  | Example  ||
| ``although_Subj`` | [Subj #Subj] | //although// |
| ``because_Subj`` | [Subj #Subj] | //because// |
| ``if_Subj`` | [Subj #Subj] | //if// |
| ``that_Subj`` | [Subj #Subj] | //that// |
| ``when_Subj`` | [Subj #Subj] | //when// |
==Temp - temporal and aspectual features==[Temp]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==Tense - tense==[Tense]
|| Function  | Type  | Example  ||
| ``conditionalTense`` | [Tense #Tense] | #divreveal //she would sleep// #divpopup #UL #LIAPI: ``mkS conditionalTense (mkCl she_NP sleep_V)`` #LIBul: //тя би спалa// #LICat: //ella dormiria// #LIDan: //hun ville sove// #LIDut: //ze zou geslapen hebben// #LIEng: //she would sleep// #LIFin: //hän nukkuisi// #LIFre: //elle dormirait// #LIGer: //sie würde schlafen// #LIIta: //lei dormirebbe// #LINor: //hun ville sove// #LIPol: //ona spałaby// #LIRon: //ea ar dormi// #LIRus: //она спала бы// #LISpa: //ella dormiría// #LISwe: //hon skulle sova// #LIUrd: //وہ شاید سوئے// #EUL #ediv #ediv |
| ``futureTense`` | [Tense #Tense] | #divreveal //she will sleep// #divpopup #UL #LIAPI: ``mkS futureTense (mkCl she_NP sleep_V)`` #LIBul: //тя ще спи// #LICat: //ella dormirà// #LIDan: //hun vil sove// #LIDut: //ze zal geslapen hebben// #LIEng: //she will sleep// #LIFin: //hän nukkuu// #LIFre: //elle dormira// #LIGer: //sie wird schlafen// #LIIta: //lei dormirà// #LINor: //hun vil sove// #LIPol: //ona będzie spała// #LIRon: //ea va dormi// #LIRus: //она будет спать// #LISpa: //ella dormirá// #LISwe: //hon ska sova// #LIUrd: //وہ سوئے گی// #EUL #ediv #ediv |
| ``pastTense`` | [Tense #Tense] | #divreveal //she slept// #divpopup #UL #LIAPI: ``mkS pastTense (mkCl she_NP sleep_V)`` #LIBul: //тя спа// #LICat: //ella dormia// #LIDan: //hun sov// #LIDut: //ze sliep// #LIEng: //she slept// #LIFin: //hän nukkui// #LIFre: //elle dormait// #LIGer: //sie schlief// #LIIta: //lei dormiva// #LINor: //hun sov// #LIPol: //ona spała// #LIRon: //ea a dormit// #LIRus: //она спала// #LISpa: //ella dormía// #LISwe: //hon sov// #LIUrd: //وہ سوئی// #EUL #ediv #ediv |
| ``presentTense`` | [Tense #Tense] | #divreveal //she sleeps// #divpopup #UL #LIAPI: ``mkS presentTense (mkCl she_NP sleep_V)`` #LIBul: //тя спи// #LICat: //ella dorm// #LIDan: //hun sover// #LIDut: //ze slaapt// #LIEng: //she sleeps// #LIFin: //hän nukkuu// #LIFre: //elle dort// #LIGer: //sie schläft// #LIIta: //lei dorme// #LINor: //hun sover// #LIPol: //ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //hon sover// #LIUrd: //وہ سوتی ہے// #EUL #ediv #ediv |
==Text - text consisting of several phrases==[Text]
|| Function  | Type  | Example  ||
| ``emptyText`` | [Text #Text] | //(empty text)// |
| ``mkText`` | [Phr #Phr] ``->`` ([Punct #Punct]) ``->`` ([Text #Text]) ``->`` [Text #Text] | #divreveal //does she sleep ? yes .// #divpopup #UL #LIAPI: ``mkText (mkPhr (mkQS (mkCl she_NP sleep_V))) questMarkPunct (mkText (mkPhr yes_Utt) fullStopPunct)`` #LIBul: //тя спи ли ? да .// #LICat: //ella dorm ? sí .// #LIDan: //sover hun ? ja .// #LIDut: //slaapt ze ? ja .// #LIEng: //does she sleep ? yes .// #LIFin: //nukkuuko hän ? kyllä .// #LIFre: //elle dort ? oui .// #LIGer: //schläft sie ? ja .// #LIIta: //lei dorme ? sì .// #LINor: //sover hun ? ja .// #LIPol: //czy ona śpi ? tak .// #LIRon: //ea doarme ? da .// #LIRus: //она спдит ? Да .// #LISpa: //ella duerme ? sí .// #LISwe: //sover hon ? ja .// #LIUrd: //كیا وہ سوتی ہے ? ہاں .// #EUL #ediv #ediv |
| ``mkText`` | [Utt #Utt] ``->`` [Text #Text] | #divreveal //yes .// #divpopup #UL #LIAPI: ``mkText yes_Utt`` #LIBul: //да .// #LICat: //sí .// #LIDan: //ja .// #LIDut: //ja .// #LIEng: //yes .// #LIFin: //kyllä .// #LIFre: //oui .// #LIGer: //ja .// #LIIta: //sì .// #LINor: //ja .// #LIPol: //tak .// #LIRon: //da .// #LIRus: //Да .// #LISpa: //sí .// #LISwe: //ja .// #LIUrd: //ہاں .// #EUL #ediv #ediv |
| ``mkText`` | [S #S] ``->`` [Text #Text] | #divreveal //she slept .// #divpopup #UL #LIAPI: ``mkText (mkS pastTense (mkCl she_NP sleep_V))`` #LIBul: //тя спа .// #LICat: //ella dormia .// #LIDan: //hun sov .// #LIDut: //ze sliep .// #LIEng: //she slept .// #LIFin: //hän nukkui .// #LIFre: //elle dormait .// #LIGer: //sie schlief .// #LIIta: //lei dormiva .// #LINor: //hun sov .// #LIPol: //ona spała .// #LIRon: //ea a dormit .// #LIRus: //она спала .// #LISpa: //ella dormía .// #LISwe: //hon sov .// #LIUrd: //وہ سوئی .// #EUL #ediv #ediv |
| ``mkText`` | [Cl #Cl] ``->`` [Text #Text] | #divreveal //she sleeps .// #divpopup #UL #LIAPI: ``mkText (mkCl she_NP sleep_V)`` #LIBul: //тя спи .// #LICat: //ella dorm .// #LIDan: //hun sover .// #LIDut: //ze slaapt .// #LIEng: //she sleeps .// #LIFin: //hän nukkuu .// #LIFre: //elle dort .// #LIGer: //sie schläft .// #LIIta: //lei dorme .// #LINor: //hun sover .// #LIPol: //ona śpi .// #LIRon: //ea doarme .// #LIRus: //она спдит .// #LISpa: //ella duerme .// #LISwe: //hon sover .// #LIUrd: //وہ سوتی ہے .// #EUL #ediv #ediv |
| ``mkText`` | [QS #QS] ``->`` [Text #Text] | #divreveal //did she sleep ?// #divpopup #UL #LIAPI: ``mkText (mkQS pastTense (mkQCl (mkCl she_NP sleep_V)))`` #LIBul: //тя спа ли ?// #LICat: //ella dormia ?// #LIDan: //sov hun ?// #LIDut: //sliep ze ?// #LIEng: //did she sleep ?// #LIFin: //nukkuiko hän ?// #LIFre: //elle dormait ?// #LIGer: //schlief sie ?// #LIIta: //lei dormiva ?// #LINor: //sov hun ?// #LIPol: //czy ona spała ?// #LIRon: //ea a dormit ?// #LIRus: //она спала ?// #LISpa: //ella dormía ?// #LISwe: //sov hon ?// #LIUrd: //كیا وہ سوئی ?// #EUL #ediv #ediv |
| ``mkText`` | ([Pol #Pol]) ``->`` [Imp #Imp] ``->`` [Text #Text] | #divreveal //don't sleep !// #divpopup #UL #LIAPI: ``mkText negativePol (mkImp sleep_V)`` #LIBul: //не спи !// #LICat: //no dorm !// #LIDan: //sov ikke !// #LIDut: //slaap niet !// #LIEng: //don't sleep !// #LIFin: //älä nuku !// #LIFre: //ne dors pas !// #LIGer: //schlaf nicht !// #LIIta: //non dormire !// #LINor: //sov ikke !// #LIPol: //nie śpij !// #LIRon: //nu dormi !// #LIRus: //не спи !// #LISpa: //no duerme !// #LISwe: //sov inte !// #LIUrd: //مت سونا !// #EUL #ediv #ediv |
| ``mkText`` | [Text #Text] ``->`` [Text #Text] ``->`` [Text #Text] | #divreveal //where ? here . when ? now !// #divpopup #UL #LIAPI: ``mkText (mkText (mkPhr (mkUtt where_IAdv)) questMarkPunct (mkText (mkPhr (mkUtt here_Adv)))) (mkText (mkPhr (mkUtt when_IAdv)) questMarkPunct (mkText (mkPhr (mkUtt now_Adv)) exclMarkPunct))`` #LIBul: //къде ? тук . кога ? сега !// #LICat: //on ? aquí . quan ? ara !// #LIDan: //hvor ? her . hvornår ? nu !// #LIDut: //waar ? hier . wanneer ? nu !// #LIEng: //where ? here . when ? now !// #LIFin: //missä ? täällä . milloin ? nyt !// #LIFre: //où ? ici . quand ? maintenant !// #LIGer: //wo ? hier . wann ? jetzt !// #LIIta: //dove ? quà . quando ? adesso !// #LINor: //hvor ? her . når ? nå !// #LIPol: //gdzie ? tutaj . kiedy ? teraz !// #LIRon: //unde ? aici . când ? acum !// #LIRus: //где ? здесь . когда ? сейчас !// #LISpa: //donde ? aquí . ¿ cuando ? ¡ ahora !// #LISwe: //var ? här . när ? nu !// #LIUrd: //كہاں ? یہاں . كب ? اب !// #EUL #ediv #ediv |
==Unit==[Unit]
|| Function  | Type  | Example  ||
| ``n1_Unit`` | [Unit #Unit] | #divreveal //one// #divpopup #UL #LIAPI: ``mkNumeral n1_Unit`` #LIBul: //един// #LICat: //un// #LIDan: //en// #LIDut: //een// #LIEng: //one// #LIFin: //yksi// #LIFre: //un// #LIGer: //ein// #LIIta: //uno// #LINor: //en// #LIPol: //jeden// #LIRon: //un// #LIRus: //один// #LISpa: //uno// #LISwe: //en// #LIUrd: //ایك// #EUL #ediv #ediv |
| ``n2_Unit`` | [Unit #Unit] | #divreveal //two// #divpopup #UL #LIAPI: ``mkNumeral n2_Unit`` #LIBul: //двама// #LICat: //dos// #LIDan: //to// #LIDut: //twee// #LIEng: //two// #LIFin: //kaksi// #LIFre: //deux// #LIGer: //zwei// #LIIta: //due// #LINor: //to// #LIPol: //dwa// #LIRon: //doi// #LIRus: //два// #LISpa: //dos// #LISwe: //två// #LIUrd: //دو// #EUL #ediv #ediv |
| ``n3_Unit`` | [Unit #Unit] | #divreveal //three// #divpopup #UL #LIAPI: ``mkNumeral n3_Unit`` #LIBul: //трима// #LICat: //tres// #LIDan: //tre// #LIDut: //drie// #LIEng: //three// #LIFin: //kolme// #LIFre: //trois// #LIGer: //drei// #LIIta: //tre// #LINor: //tre// #LIPol: //trzy// #LIRon: //trei// #LIRus: //три// #LISpa: //tres// #LISwe: //tre// #LIUrd: //تین// #EUL #ediv #ediv |
| ``n4_Unit`` | [Unit #Unit] | #divreveal //four// #divpopup #UL #LIAPI: ``mkNumeral n4_Unit`` #LIBul: //четирима// #LICat: //quatre// #LIDan: //fire// #LIDut: //vier// #LIEng: //four// #LIFin: //neljä// #LIFre: //quatre// #LIGer: //vier// #LIIta: //quattro// #LINor: //fire// #LIPol: //cztery// #LIRon: //patru// #LIRus: //четыре// #LISpa: //cuatro// #LISwe: //fyra// #LIUrd: //چار// #EUL #ediv #ediv |
| ``n5_Unit`` | [Unit #Unit] | #divreveal //five// #divpopup #UL #LIAPI: ``mkNumeral n5_Unit`` #LIBul: //петима// #LICat: //cinc// #LIDan: //fem// #LIDut: //vijf// #LIEng: //five// #LIFin: //viisi// #LIFre: //cinq// #LIGer: //fünf// #LIIta: //cinque// #LINor: //fem// #LIPol: //pięć// #LIRon: //cinci// #LIRus: //пять// #LISpa: //cinco// #LISwe: //fem// #LIUrd: //پانچ// #EUL #ediv #ediv |
| ``n6_Unit`` | [Unit #Unit] | #divreveal //six// #divpopup #UL #LIAPI: ``mkNumeral n6_Unit`` #LIBul: //шестима// #LICat: //sis// #LIDan: //seks// #LIDut: //zes// #LIEng: //six// #LIFin: //kuusi// #LIFre: //six// #LIGer: //sechs// #LIIta: //sei// #LINor: //seks// #LIPol: //sześć// #LIRon: //şase// #LIRus: //шесть// #LISpa: //seis// #LISwe: //sex// #LIUrd: //چھ// #EUL #ediv #ediv |
| ``n7_Unit`` | [Unit #Unit] | #divreveal //seven// #divpopup #UL #LIAPI: ``mkNumeral n7_Unit`` #LIBul: //седмина// #LICat: //set// #LIDan: //syv// #LIDut: //zeven// #LIEng: //seven// #LIFin: //seitsemän// #LIFre: //sept// #LIGer: //sieben// #LIIta: //sette// #LINor: //sju// #LIPol: //siedem// #LIRon: //şapte// #LIRus: //семь// #LISpa: //siete// #LISwe: //sju// #LIUrd: //سات// #EUL #ediv #ediv |
| ``n8_Unit`` | [Unit #Unit] | #divreveal //eight// #divpopup #UL #LIAPI: ``mkNumeral n8_Unit`` #LIBul: //осмина// #LICat: //vuit// #LIDan: //otte// #LIDut: //acht// #LIEng: //eight// #LIFin: //kahdeksan// #LIFre: //huit// #LIGer: //acht// #LIIta: //otto// #LINor: //åtte// #LIPol: //osiemm// #LIRon: //opt// #LIRus: //восемь// #LISpa: //ocho// #LISwe: //åtta// #LIUrd: //آتھ// #EUL #ediv #ediv |
| ``n9_Unit`` | [Unit #Unit] | #divreveal //nine// #divpopup #UL #LIAPI: ``mkNumeral n9_Unit`` #LIBul: //деветима// #LICat: //nou// #LIDan: //ni// #LIDut: //negen// #LIEng: //nine// #LIFin: //yhdeksän// #LIFre: //neuf// #LIGer: //neun// #LIIta: //nove// #LINor: //ni// #LIPol: //dziewięć// #LIRon: //nouă// #LIRus: //девять// #LISpa: //nueve// #LISwe: //nio// #LIUrd: //نو// #EUL #ediv #ediv |
==Utt - sentence, question, word...==[Utt]
|| Function  | Type  | Example  ||
| ``lets_Utt`` | [VP #VP] ``->`` [Utt #Utt] | #divreveal //let's sleep// #divpopup #UL #LIAPI: ``mkPhr (lets_Utt (mkVP sleep_V))`` #LIBul: //нека да спим// #LICat: //dormim// #LIDan: //lad os sove// #LIDut: //laten we slapen// #LIEng: //let's sleep// #LIFin: //nukutaan// #LIFre: //dormons// #LIGer: //schlafen wir// #LIIta: //dormiamo// #LINor: //lat oss sove// #LIPol: //śpijmy// #LIRon: //sã dormim// #LIRus: //давайте будем спать// #LISpa: //durmamos// #LISwe: //låt oss sova// #LIUrd: //آو سونا// #EUL #ediv #ediv |
| ``mkUtt`` | [S #S] ``->`` [Utt #Utt] | #divreveal //she slept// #divpopup #UL #LIAPI: ``mkUtt (mkS pastTense (mkCl she_NP sleep_V))`` #LIBul: //тя спа// #LICat: //ella dormia// #LIDan: //hun sov// #LIDut: //ze sliep// #LIEng: //she slept// #LIFin: //hän nukkui// #LIFre: //elle dormait// #LIGer: //sie schlief// #LIIta: //lei dormiva// #LINor: //hun sov// #LIPol: //ona spała// #LIRon: //ea a dormit// #LIRus: //она спала// #LISpa: //ella dormía// #LISwe: //hon sov// #LIUrd: //وہ سوئی// #EUL #ediv #ediv |
| ``mkUtt`` | [Cl #Cl] ``->`` [Utt #Utt] | #divreveal //she sleeps// #divpopup #UL #LIAPI: ``mkUtt (mkCl she_NP sleep_V)`` #LIBul: //тя спи// #LICat: //ella dorm// #LIDan: //hun sover// #LIDut: //ze slaapt// #LIEng: //she sleeps// #LIFin: //hän nukkuu// #LIFre: //elle dort// #LIGer: //sie schläft// #LIIta: //lei dorme// #LINor: //hun sover// #LIPol: //ona śpi// #LIRon: //ea doarme// #LIRus: //она спдит// #LISpa: //ella duerme// #LISwe: //hon sover// #LIUrd: //وہ سوتی ہے// #EUL #ediv #ediv |
| ``mkUtt`` | [QS #QS] ``->`` [Utt #Utt] | #divreveal //who didn't sleep// #divpopup #UL #LIAPI: ``mkUtt (mkQS pastTense negativePol (mkQCl who_IP sleep_V))`` #LIBul: //кой не спа// #LICat: //qui no dormia// #LIDan: //hvem sov ikke// #LIDut: //wie sliep niet// #LIEng: //who didn't sleep// #LIFin: //kuka ei nukkunut// #LIFre: //qui ne dormait pas// #LIGer: //wer schlief nicht// #LIIta: //chi non dormiva// #LINor: //hvem sov ikke// #LIPol: //kto nie spał// #LIRon: //cine nu a dormit// #LIRus: //кто спал// #LISpa: //quién no dormía// #LISwe: //vem sov inte// #LIUrd: //كiس نے نہیں سویا// #EUL #ediv #ediv |
| ``mkUtt`` | [QCl #QCl] ``->`` [Utt #Utt] | #divreveal //who sleeps// #divpopup #UL #LIAPI: ``mkUtt (mkQCl who_IP sleep_V)`` #LIBul: //кой спи// #LICat: //qui dorm// #LIDan: //hvem sover// #LIDut: //wie slaapt// #LIEng: //who sleeps// #LIFin: //kuka nukkuu// #LIFre: //qui dort// #LIGer: //wer schläft// #LIIta: //chi dorme// #LINor: //hvem sover// #LIPol: //kto śpi// #LIRon: //cine doarme// #LIRus: //кто спдит// #LISpa: //quién duerme// #LISwe: //vem sover// #LIUrd: //كون سوتا ہے// #EUL #ediv #ediv |
| ``mkUtt`` | ([ImpForm #ImpForm]) ``->`` ([Pol #Pol]) ``->`` [Imp #Imp] ``->`` [Utt #Utt] | #divreveal //don't be men// #divpopup #UL #LIAPI: ``mkUtt pluralImpForm negativePol (mkImp (mkVP man_N))`` #LIBul: //не бъдете мъже// #LICat: //no sigueu homes// #LIDan: //var ikke mænd// #LIDut: //wezen mannen niet// #LIEng: //don't be men// #LIFin: //älkää olko miehiä// #LIFre: //ne soyez pas hommes// #LIGer: //seid Männer nicht// #LIIta: //non siate uomini// #LINor: //var ikke menn// #LIPol: //nie bądźcie mężczyzna// #LIRon: //nu sunteţi oameni// #LIRus: //не будьте человеками// #LISpa: //no sed hombres// #LISwe: //var inte män// #LIUrd: //مت آدمیاں// #EUL #ediv #ediv |
| ``mkUtt`` | [IP #IP] ``->`` [Utt #Utt] | #divreveal //who// #divpopup #UL #LIAPI: ``mkUtt who_IP`` #LIBul: //кой// #LICat: //qui// #LIDan: //hvem// #LIDut: //wie// #LIEng: //who// #LIFin: //kuka// #LIFre: //qui// #LIGer: //wer// #LIIta: //chi// #LINor: //hvem// #LIPol: //kto// #LIRon: //cine// #LIRus: //кто// #LISpa: //quién// #LISwe: //vem// #LIUrd: //كون// #EUL #ediv #ediv |
| ``mkUtt`` | [IAdv #IAdv] ``->`` [Utt #Utt] | #divreveal //why// #divpopup #UL #LIAPI: ``mkUtt why_IAdv`` #LIBul: //защо// #LICat: //per quË// #LIDan: //hvorfor// #LIDut: //waarom// #LIEng: //why// #LIFin: //miksi// #LIFre: //pourquoi// #LIGer: //warum// #LIIta: //perché// #LINor: //hvorfor// #LIPol: //dlaczego// #LIRon: //de ce// #LIRus: //почему// #LISpa: //porqué// #LISwe: //varför// #LIUrd: //كیوں// #EUL #ediv #ediv |
| ``mkUtt`` | [NP #NP] ``->`` [Utt #Utt] | #divreveal //this man// #divpopup #UL #LIAPI: ``mkUtt (mkNP this_Det man_N)`` #LIBul: //този мъж// #LICat: //aquest home// #LIDan: //denne mand// #LIDut: //deze man// #LIEng: //this man// #LIFin: //tämä mies// #LIFre: //cet homme// #LIGer: //dieser Mann// #LIIta: //questo uomo// #LINor: //denne mannen// #LIPol: //ten mężczyzna// #LIRon: //acest om// #LIRus: //этот человек// #LISpa: //este hombre// #LISwe: //den här mannen// #LIUrd: //یہ آدمی// #EUL #ediv #ediv |
| ``mkUtt`` | [Adv #Adv] ``->`` [Utt #Utt] | #divreveal //here// #divpopup #UL #LIAPI: ``mkUtt here_Adv`` #LIBul: //тук// #LICat: //aquí// #LIDan: //her// #LIDut: //hier// #LIEng: //here// #LIFin: //täällä// #LIFre: //ici// #LIGer: //hier// #LIIta: //quà// #LINor: //her// #LIPol: //tutaj// #LIRon: //aici// #LIRus: //здесь// #LISpa: //aquí// #LISwe: //här// #LIUrd: //یہاں// #EUL #ediv #ediv |
| ``mkUtt`` | [VP #VP] ``->`` [Utt #Utt] | #divreveal //to sleep// #divpopup #UL #LIAPI: ``mkUtt (mkVP sleep_V)`` #LIBul: //да спи// #LICat: //dormir// #LIDan: //at sove// #LIDut: //slapen// #LIEng: //to sleep// #LIFin: //nukkua// #LIFre: //dormir// #LIGer: //schlafen// #LIIta: //dormire// #LINor: //å sove// #LIPol: //spać// #LIRon: //sã doarmă// #LIRus: //спать// #LISpa: //dormir// #LISwe: //att sova// #LIUrd: //سونا// #EUL #ediv #ediv |
| ``mkUtt`` | [CN #CN] ``->`` [Utt #Utt] | #divreveal //beer// #divpopup #UL #LIAPI: ``mkUtt (mkCN beer_N)`` #LIBul: //бира// #LICat: //cervesa// #LIDan: //øl// #LIDut: //bier// #LIEng: //beer// #LIFin: //olut// #LIFre: //bière// #LIGer: //Bier// #LIIta: //birra// #LINor: //øl// #LIPol: //piwo// #LIRon: //bere// #LIRus: //пиво// #LISpa: //cerveza// #LISwe: //öl// #LIUrd: //بععر// #EUL #ediv #ediv |
| ``mkUtt`` | [AP #AP] ``->`` [Utt #Utt] | #divreveal //good// #divpopup #UL #LIAPI: ``mkUtt (mkAP good_A)`` #LIBul: //добър// #LICat: //bo// #LIDan: //god// #LIDut: //goed// #LIEng: //good// #LIFin: //hyvä// #LIFre: //bon// #LIGer: //gut// #LIIta: //buono// #LINor: //god// #LIPol: //dobry// #LIRon: //bun// #LIRus: //хорошее// #LISpa: //bueno// #LISwe: //god// #LIUrd: //اچھا// #EUL #ediv #ediv |
| ``mkUtt`` | [Card #Card] ``->`` [Utt #Utt] | #divreveal //five// #divpopup #UL #LIAPI: ``mkUtt (mkCard (mkNumeral n5_Unit))`` #LIBul: //пет// #LICat: //cinc// #LIDan: //fem// #LIDut: //vijf// #LIEng: //five// #LIFin: //viisi// #LIFre: //cinq// #LIGer: //fünf// #LIIta: //cinque// #LINor: //fem// #LIPol: //pięć// #LIRon: //cinci// #LIRus: //пять// #LISpa: //cinco// #LISwe: //fem// #LIUrd: //پانچ// #EUL #ediv #ediv |
| ``no_Utt`` | [Utt #Utt] | //no// |
| ``yes_Utt`` | [Utt #Utt] | //yes// |
==V - one-place verb==[V]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2 - two-place verb==[V2]
|| Function  | Type  | Example  ||
| ``have_V2`` | [V2 #V2] | //have// |
==V2A - verb with NP and AP complement==[V2A]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2Q - verb with NP and Q complement==[V2Q]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2S - verb with NP and S complement==[V2S]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V2V - verb with NP and V complement==[V2V]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==V3 - three-place verb==[V3]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VA - adjective-complement verb==[VA]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VP - verb phrase==[VP]
|| Function  | Type  | Example  ||
| ``mkVP`` | [V #V] ``->`` [VP #VP] | #divreveal //to sleep// #divpopup #UL #LIAPI: ``mkUtt (mkVP sleep_V)`` #LIBul: //да спи// #LICat: //dormir// #LIDan: //at sove// #LIDut: //slapen// #LIEng: //to sleep// #LIFin: //nukkua// #LIFre: //dormir// #LIGer: //schlafen// #LIIta: //dormire// #LINor: //å sove// #LIPol: //spać// #LIRon: //sã doarmă// #LIRus: //спать// #LISpa: //dormir// #LISwe: //att sova// #LIUrd: //سونا// #EUL #ediv #ediv |
| ``mkVP`` | [V2 #V2] ``->`` [NP #NP] ``->`` [VP #VP] | #divreveal //to love him// #divpopup #UL #LIAPI: ``mkUtt (mkVP love_V2 he_NP)`` #LIBul: //да обича него// #LICat: //estimar el// #LIDan: //at elske ham// #LIDut: //liefhebben// #LIEng: //to love him// #LIFin: //rakastaa häntä// #LIFre: //l' aimer// #LIGer: //ihn lieben// #LIIta: //amare lo// #LINor: //å elske ham// #LIPol: //kochać jego// #LIRon: //sã îl iubească// #LIRus: //любить его// #LISpa: //amar lo// #LISwe: //att älska honom// #LIUrd: //اس كو پیار كرنا// #EUL #ediv #ediv |
| ``mkVP`` | [V3 #V3] ``->`` [NP #NP] ``->`` [NP #NP] ``->`` [VP #VP] | #divreveal //to send it to him// #divpopup #UL #LIAPI: ``mkUtt (mkVP send_V3 it_NP he_NP)`` #LIBul: //да прати него до него// #LICat: //enviar ho li// #LIDan: //at sende det til ham// #LIDut: //hem sturen// #LIEng: //to send it to him// #LIFin: //lähettää sen hänelle// #LIFre: //l' envoyer lui// #LIGer: //es ihm schicken// #LIIta: //mandare lo gli// #LINor: //å sende det til ham// #LIPol: //wysłać do niego je// #LIRon: //sã i -l trimită// #LIRus: //посылать нему его// #LISpa: //mandar lo le// #LISwe: //att skicka det till honom// #LIUrd: //یہ بھیجنا اس كو// #EUL #ediv #ediv |
| ``mkVP`` | [VV #VV] ``->`` [VP #VP] ``->`` [VP #VP] | #divreveal //to want to sleep// #divpopup #UL #LIAPI: ``mkUtt (mkVP want_VV (mkVP sleep_V))`` #LIBul: //да иска да спи// #LICat: //voler dormir// #LIDan: //at ville sove// #LIDut: //slapen willen// #LIEng: //to want to sleep// #LIFin: //tahtoa nukkua// #LIFre: //vouloir dormir// #LIGer: //schlafen wollen// #LIIta: //volere dormire// #LINor: //å ville sove// #LIPol: //zechcieć spać// #LIRon: //sã vrea sã doarmă// #LIRus: //хотеть спать// #LISpa: //querer dormir// #LISwe: //att vilja sova// #LIUrd: //چاہنا سونا// #EUL #ediv #ediv |
| ``mkVP`` | [VS #VS] ``->`` [S #S] ``->`` [VP #VP] | #divreveal //to know that she sleeps// #divpopup #UL #LIAPI: ``mkUtt (mkVP know_VS (mkS (mkCl she_NP sleep_V)))`` #LIBul: //да знае , че тя спи// #LICat: //saber que ella dorm// #LIDan: //at vide at hun sover// #LIDut: //dat ze slaapt weten// #LIEng: //to know that she sleeps// #LIFin: //tietää että hän nukkuu// #LIFre: //savoir qu' elle dort// #LIGer: //daß sie schläft wissen// #LIIta: //sapere che lei dorme// #LINor: //å vite at hun sover// #LIPol: //wiedzieć , że ona śpi// #LIRon: //sã ştie cã ea doarme// #LIRus: //atomic term know_VS// #LISpa: //saber que ella duerme// #LISwe: //att veta att hon sover// #LIUrd: //جاننا// #EUL #ediv #ediv |
| ``mkVP`` | [VQ #VQ] ``->`` [QS #QS] ``->`` [VP #VP] | #divreveal //to wonder who sleeps// #divpopup #UL #LIAPI: ``mkUtt (mkVP wonder_VQ (mkQS (mkQCl who_IP sleep_V)))`` #LIBul: //да се чуди кой спи// #LICat: //preguntar qui dorm// #LIDan: //at undres hvem som sover// #LIDut: //wie slaapt afvragen// #LIEng: //to wonder who sleeps// #LIFin: //ihmetellä kuka nukkuu// #LIFre: //étonner qui dort// #LIGer: //sich wer schläft wundern// #LIIta: //domandare chi dorme// #LINor: //å undre hvem som sover// #LIPol: //zastanowić się , kto śpi// #LIRon: //sã se întrebe cine doarme// #LIRus: //интересовать кто спдит// #LISpa: //preguntar quién duerme// #LISwe: //att undra vem som sover// #LIUrd: //حعران ہونا// #EUL #ediv #ediv |
| ``mkVP`` | [VA #VA] ``->`` [AP #AP] ``->`` [VP #VP] | #divreveal //to become red// #divpopup #UL #LIAPI: ``mkUtt (mkVP become_VA (mkAP red_A))`` #LIBul: //да стане червено// #LICat: //tornar vermell// #LIDan: //at blive rød// #LIDut: //rood worden// #LIEng: //to become red// #LIFin: //tulla punaiseksi// #LIFre: //devenir rouge// #LIGer: //rot werden// #LIIta: //diventare rossa// #LINor: //å bli rød// #LIPol: //stać się czerwony// #LIRon: //sã devină roşu// #LIRus: //стать// #LISpa: //convertir roja// #LISwe: //att bli röd// #LIUrd: //بننا لال// #EUL #ediv #ediv |
| ``mkVP`` | [V2A #V2A] ``->`` [NP #NP] ``->`` [AP #AP] ``->`` [VP #VP] | #divreveal //to paint it red// #divpopup #UL #LIAPI: ``mkUtt (mkVP paint_V2A it_NP (mkAP red_A))`` #LIBul: //да нарисува него червено// #LICat: //pintar ho en vermell// #LIDan: //at male det rødt// #LIDut: //rood schilderen// #LIEng: //to paint it red// #LIFin: //maalata sen punaiseksi// #LIFre: //le peindre en rouge// #LIGer: //es rot malen// #LIIta: //dipingere lo rosso// #LINor: //å male det rødt// #LIPol: //pomalować je na czerwono// #LIRon: //sã îl picteze roşu// #LIRus: //рисовать красным его// #LISpa: //pintar lo en rojo// #LISwe: //att måla det rött// #LIUrd: //یہ كو رنگ كرنا لال// #EUL #ediv #ediv |
| ``mkVP`` | [V2S #V2S] ``->`` [NP #NP] ``->`` [S #S] ``->`` [VP #VP] | #divreveal //to answer to him that she sleeps// #divpopup #UL #LIAPI: ``mkUtt (mkVP answer_V2S he_NP (mkS (mkCl she_NP sleep_V)))`` #LIBul: //да отговори му , че тя спи// #LICat: //respondre li que ella dorm// #LIDan: //at svare til ham at hun sover// #LIDut: //dat ze slaapt antwoorden// #LIEng: //to answer to him that she sleeps// #LIFin: //vastata hänelle että hän nukkuu// #LIFre: //répondre lui qu' elle dort// #LIGer: //ihm daß sie schläft antworten// #LIIta: //rispondere gli che lei dorme// #LINor: //å svare til ham at hun sover// #LIPol: //odpowiedzieć jemu , że ona śpi// #LIRon: //sã îi răspundă cã ea doarme// #LIRus: //отвечать , что она спдит его// #LISpa: //responder le que ella duerme// #LISwe: //att svara till honom att hon sover// #LIUrd: //اس كو جواب دینا// #EUL #ediv #ediv |
| ``mkVP`` | [V2Q #V2Q] ``->`` [NP #NP] ``->`` [QS #QS] ``->`` [VP #VP] | #divreveal //to answer to him who sleeps// #divpopup #UL #LIAPI: ``mkUtt (mkVP answer_V2S he_NP (mkQS (mkQCl who_IP sleep_V)))`` #LIBul: //да отговори му кой спи// #LICat: //respondre li qui dorm// #LIDan: //at svare til ham hvem som sover// #LIDut: //wie slaapt antwoorden// #LIEng: //to answer to him who sleeps// #LIFin: //ambiguous overloading of mkVP for V2S NP QS// #LIFre: //répondre lui qui dort// #LIGer: //ihm wer schläft antworten// #LIIta: //rispondere gli chi dorme// #LINor: //å svare til ham hvem som sover// #LIPol: //ambiguous overloading of mkVP for V2S NP QS// #LIRon: //sã îi răspundă cine doarme// #LIRus: //отвечать кто спдит его// #LISpa: //responder le quién duerme// #LISwe: //att svara till honom vem som sover// #LIUrd: //اس سے جواب دینا// #EUL #ediv #ediv |
| ``mkVP`` | [V2V #V2V] ``->`` [NP #NP] ``->`` [VP #VP] ``->`` [VP #VP] | #divreveal //to beg him to sleep// #divpopup #UL #LIAPI: ``mkUtt (mkVP beg_V2V he_NP (mkVP sleep_V))`` #LIBul: //да моли него да спи// #LICat: //demanar el a dormir// #LIDan: //at bede ham at sove// #LIDut: //te slapen smeken// #LIEng: //to beg him to sleep// #LIFin: //pyytää häntä nukkumaan// #LIFre: //le demander à dormir// #LIGer: //ihn zu schlafen bitten// #LIIta: //pregare lo di dormire// #LINor: //å be ham att sove// #LIPol: //atomic term beg_V2V// #LIRon: //sã îl roage sã doarmă// #LIRus: //просить спать его// #LISpa: //rogar lo a dormir// #LISwe: //att be honom att sova// #LIUrd: //اس سے التجا كرنا سونا كی// #EUL #ediv #ediv |
| ``mkVP`` | [A #A] ``->`` [VP #VP] | #divreveal //to be old// #divpopup #UL #LIAPI: ``mkUtt (mkVP old_A)`` #LIBul: //да е старо// #LICat: //ser vell// #LIDan: //at være gammel// #LIDut: //oud zijn// #LIEng: //to be old// #LIFin: //olla vanha// #LIFre: //être vieille// #LIGer: //alt sein// #LIIta: //essere vecchia// #LINor: //å være gammel// #LIPol: //być stary// #LIRon: //sã fie vechi// #LIRus: //быть старым// #LISpa: //ser vieja// #LISwe: //att vara gammal// #LIUrd: //بوڑھا// #EUL #ediv #ediv |
| ``mkVP`` | [A #A] ``->`` [NP #NP] ``->`` [VP #VP] | #divreveal //to be older than he// #divpopup #UL #LIAPI: ``mkUtt (mkVP old_A he_NP)`` #LIBul: //да е по - старо от него// #LICat: //ser més vell que ell// #LIDan: //at være ældre end han// #LIDut: //ouder dan hij zijn// #LIEng: //to be older than he// #LIFin: //olla vanhempi kuin hän// #LIFre: //être plus vieille que lui// #LIGer: //älter als er sein// #LIIta: //essere più vecchia di lui// #LINor: //å være eldre enn han// #LIPol: //być starszy niż on// #LIRon: //sã fie mai vechi decât el// #LIRus: //быть старше него// #LISpa: //ser más vieja que él// #LISwe: //att vara äldre än han// #LIUrd: //اس سے بوڑھا// #EUL #ediv #ediv |
| ``mkVP`` | [A2 #A2] ``->`` [NP #NP] ``->`` [VP #VP] | #divreveal //to be married to him// #divpopup #UL #LIAPI: ``mkUtt (mkVP married_A2 he_NP)`` #LIBul: //да е женено за него// #LICat: //ser casata a ell// #LIDan: //at være gift med ham// #LIDut: //getrouwd met hem zijn// #LIEng: //to be married to him// #LIFin: //olla avioitunut hänen kanssa// #LIFre: //être mariée à lui// #LIGer: //verheiratet mit ihm sein// #LIIta: //essere sposata con lui// #LINor: //å være gift med ham// #LIPol: //być zaślubiony jemu// #LIRon: //sã fie căsătorit cu el// #LIRus: //быть замужем за им// #LISpa: //ser casada a él// #LISwe: //att vara gift med honom// #LIUrd: //اس سے شادy?كرنا// #EUL #ediv #ediv |
| ``mkVP`` | [AP #AP] ``->`` [VP #VP] | #divreveal //parse error// #divpopup #UL #LIAPI: ``mkUtt (mkVP (mkAP very_AdA old_A)`` #LIBul: //parse error// #LICat: //parse error// #LIDan: //parse error// #LIDut: //parse error// #LIEng: //parse error// #LIFin: //parse error// #LIFre: //parse error// #LIGer: //parse error// #LIIta: //parse error// #LINor: //parse error// #LIPol: //parse error// #LIRon: //parse error// #LIRus: //parse error// #LISpa: //parse error// #LISwe: //parse error// #LIUrd: //parse error// #EUL #ediv #ediv |
| ``mkVP`` | [N #N] ``->`` [VP #VP] | #divreveal //to be a woman// #divpopup #UL #LIAPI: ``mkUtt (mkVP woman_N)`` #LIBul: //да е жена// #LICat: //ser dona// #LIDan: //at være en kvinde// #LIDut: //vrouw zijn// #LIEng: //to be a woman// #LIFin: //olla nainen// #LIFre: //être femme// #LIGer: //eine Frau sein// #LIIta: //essere donna// #LINor: //å være ei kvinne// #LIPol: //być kobieta// #LIRon: //sã fie femeie// #LIRus: //быть женщиной// #LISpa: //ser mujer// #LISwe: //att vara en kvinna// #LIUrd: //عورت// #EUL #ediv #ediv |
| ``mkVP`` | [CN #CN] ``->`` [VP #VP] | #divreveal //to be an old woman// #divpopup #UL #LIAPI: ``mkUtt (mkVP (mkCN old_A woman_N))`` #LIBul: //да е стара жена// #LICat: //ser dona vell// #LIDan: //at være en gammel kvinde// #LIDut: //oude vrouw zijn// #LIEng: //to be an old woman// #LIFin: //olla vanha nainen// #LIFre: //être vieille femme// #LIGer: //eine alte Frau sein// #LIIta: //essere vecchia donna// #LINor: //å være ei gammel kvinne// #LIPol: //być stara kobieta// #LIRon: //sã fie femeie veche// #LIRus: //быть старой женщиной// #LISpa: //ser vieja mujer// #LISwe: //att vara en gammal kvinna// #LIUrd: //بوڑھی عورت// #EUL #ediv #ediv |
| ``mkVP`` | [NP #NP] ``->`` [VP #VP] | #divreveal //to be the woman// #divpopup #UL #LIAPI: ``mkUtt (mkVP (mkNP the_Det woman_N))`` #LIBul: //да е жената// #LICat: //ser la dona// #LIDan: //at være kvinden// #LIDut: //de vrouw zijn// #LIEng: //to be the woman// #LIFin: //olla nainen// #LIFre: //être la femme// #LIGer: //die Frau sein// #LIIta: //essere la donna// #LINor: //å være kvinna// #LIPol: //być kobietą// #LIRon: //sã fie femeia// #LIRus: //быть женщиной// #LISpa: //ser la mujer// #LISwe: //att vara kvinnan// #LIUrd: //عورت// #EUL #ediv #ediv |
| ``mkVP`` | [Adv #Adv] ``->`` [VP #VP] | #divreveal //to be here// #divpopup #UL #LIAPI: ``mkUtt (mkVP here_Adv)`` #LIBul: //да е тук// #LICat: //ser aquí// #LIDan: //at være her// #LIDut: //hier zijn// #LIEng: //to be here// #LIFin: //olla täällä// #LIFre: //être ici// #LIGer: //hier sein// #LIIta: //essere quà// #LINor: //å være her// #LIPol: //być tutaj// #LIRon: //sã fie aici// #LIRus: //быть здесь// #LISpa: //ser aquí// #LISwe: //att vara här// #LIUrd: //یہاں// #EUL #ediv #ediv |
| ``mkVP`` | [VP #VP] ``->`` [Adv #Adv] ``->`` [VP #VP] | #divreveal //to sleep here// #divpopup #UL #LIAPI: ``mkUtt (mkVP (mkVP sleep_V) here_Adv)`` #LIBul: //да спи тук// #LICat: //dormir aquí// #LIDan: //at sove her// #LIDut: //hier slapen// #LIEng: //to sleep here// #LIFin: //nukkua täällä// #LIFre: //dormir ici// #LIGer: //hier schlafen// #LIIta: //dormire quà// #LINor: //å sove her// #LIPol: //tutaj spać// #LIRon: //sã doarmă aici// #LIRus: //спать// #LISpa: //dormir aquí// #LISwe: //att sova här// #LIUrd: //سونا یہاں// #EUL #ediv #ediv |
| ``mkVP`` | [AdV #AdV] ``->`` [VP #VP] ``->`` [VP #VP] | #divreveal //always to sleep// #divpopup #UL #LIAPI: ``mkUtt (mkVP always_AdV (mkVP sleep_V))`` #LIBul: //винаги да спи// #LICat: //dormir sempre// #LIDan: //at altid sove// #LIDut: //altijd slapen// #LIEng: //always to sleep// #LIFin: //nukkua aina// #LIFre: //dormir toujours// #LIGer: //immer schlafen// #LIIta: //dormire sempre// #LINor: //å altid sove// #LIPol: //zawsze spać// #LIRon: //sã doarmă mereu// #LIRus: //спать// #LISpa: //dormir siempre// #LISwe: //att alltid sova// #LIUrd: //سونا// #EUL #ediv #ediv |
| ``mkVP`` | [VPSlash #VPSlash] ``->`` [NP #NP] ``->`` [VP #VP] | #divreveal //to paint it black// #divpopup #UL #LIAPI: ``mkUtt (mkVP (mkVPSlash paint_V2A (mkAP black_A)) it_NP)`` #LIBul: //да нарисува него черно// #LICat: //pintar ho en negre// #LIDan: //at male det sort// #LIDut: //zwart schilderen// #LIEng: //to paint it black// #LIFin: //maalata sen mustaksi// #LIFre: //le peindre en noir// #LIGer: //es schwarz malen// #LIIta: //dipingere lo nero// #LINor: //å male det svart// #LIPol: //pomalować je na czarno// #LIRon: //sã îl picteze negru// #LIRus: //рисовать чёрным его// #LISpa: //pintar lo en negro// #LISwe: //att måla det svart// #LIUrd: //یہ كو رنگ كرنا كالا// #EUL #ediv #ediv |
| ``mkVP`` | [VPSlash #VPSlash] ``->`` [VP #VP] | #divreveal //to paint itself black// #divpopup #UL #LIAPI: ``mkUtt (reflexiveVP (mkVPSlash paint_V2A (mkAP black_A)))`` #LIBul: //да се нарисува черно// #LICat: //pintar en negre// #LIDan: //at male sig sort// #LIDut: //zich zwart schilderen// #LIEng: //to paint itself black// #LIFin: //maalata itsensä mustaksi// #LIFre: //peindre en noir// #LIGer: //sich schwarz malen// #LIIta: //dipingere nero// #LINor: //å male seg svart// #LIPol: //pomalować siebie na czarno// #LIRon: //sã se picteze negru// #LIRus: //рисовать чёрным себя// #LISpa: //pintar en negro// #LISwe: //att måla sig svart// #LIUrd: //رنگ كرنا خود كو كالا// #EUL #ediv #ediv |
| ``mkVP`` | [Comp #Comp] ``->`` [VP #VP] | #divreveal //to be warm// #divpopup #UL #LIAPI: ``mkUtt (mkVP (mkComp (mkAP warm_A)))`` #LIBul: //да е топло// #LICat: //ser tebia// #LIDan: //at være varm// #LIDut: //warm zijn// #LIEng: //to be warm// #LIFin: //olla lämmin// #LIFre: //être chaude// #LIGer: //warm sein// #LIIta: //essere calda// #LINor: //å være varm// #LIPol: //być ciepły// #LIRon: //sã fie călduţ// #LIRus: //быть тёплым// #LISpa: //ser tibia// #LISwe: //att vara varm// #LIUrd: //گرم// #EUL #ediv #ediv |
| ``passiveVP`` | [V2 #V2] ``->`` [VP #VP] | #divreveal //to be loved// #divpopup #UL #LIAPI: ``mkUtt (passiveVP love_V2)`` #LIBul: //да е обичано// #LICat: //ser estimada// #LIDan: //at blive elsket// #LIDut: //liefgehad worden// #LIEng: //to be loved// #LIFin: //rakastetaan// #LIFre: //être aimée// #LIGer: //geliebt werden// #LIIta: //venire amata// #LINor: //å bli elska// #LIPol: //być kochany// #LIRon: //sã fie iubit// #LIRus: //любиться// #LISpa: //ser amada// #LISwe: //att bli älskad// #LIUrd: //پیار كرنا// #EUL #ediv #ediv |
| ``passiveVP`` | [V2 #V2] ``->`` [NP #NP] ``->`` [VP #VP] | #divreveal //to be loved by her// #divpopup #UL #LIAPI: ``mkUtt (passiveVP love_V2 she_NP)`` #LIBul: //да е обичано чрез нея// #LICat: //ser estimada per ella// #LIDan: //at blive elsket af hende// #LIDut: //door haar liefgehad worden// #LIEng: //to be loved by her// #LIFin: //rakastetaan hänen toimesta// #LIFre: //être aimée par elle// #LIGer: //durch sie geliebt werden// #LIIta: //venire amata da lei// #LINor: //å bli elska av henne// #LIPol: //przez nią być kochany// #LIRon: //sã fie iubit de către ea// #LIRus: //любиться// #LISpa: //ser amada por ella// #LISwe: //att bli älskad av henne// #LIUrd: //پیار كرنا اس// #EUL #ediv #ediv |
| ``progressiveVP`` | [VP #VP] ``->`` [VP #VP] | #divreveal //to be sleeping// #divpopup #UL #LIAPI: ``mkUtt (progressiveVP (mkVP sleep_V))`` #LIBul: //да спи// #LICat: //estar dormint// #LIDan: //at være ved å sove// #LIDut: //aan het slapen zijn// #LIEng: //to be sleeping// #LIFin: //olla nukkumassa// #LIFre: //être en train de dormir// #LIGer: //eben schlafen// #LIIta: //stare dormendo// #LINor: //å være ved å sove// #LIPol: //spać// #LIRon: //sã doarmă// #LIRus: //спать// #LISpa: //estar durmiendo// #LISwe: //att hålla på att sova// #LIUrd: //سونا// #EUL #ediv #ediv |
| ``reflexiveVP`` | [V2 #V2] ``->`` [VP #VP] | #divreveal //to love itself// #divpopup #UL #LIAPI: ``mkUtt (reflexiveVP love_V2)`` #LIBul: //да се обича// #LICat: //estimar// #LIDan: //at elske sig// #LIDut: //zich liefhebben// #LIEng: //to love itself// #LIFin: //rakastaa itseänsä// #LIFre: //aimer// #LIGer: //sich lieben// #LIIta: //amare// #LINor: //å elske seg// #LIPol: //kochać siebie// #LIRon: //sã se iubească// #LIRus: //любить себя// #LISpa: //amar// #LISwe: //att älska sig// #LIUrd: //پیار كرنا خود كو// #EUL #ediv #ediv |
| ``reflexiveVP`` | [VPSlash #VPSlash] ``->`` [VP #VP] | //paint itself black// |
==VPSlash - verb phrase missing complement==[VPSlash]
|| Function  | Type  | Example  ||
| ``mkVPSlash`` | [V2 #V2] ``->`` [VPSlash #VPSlash] | //(whom) (she) loves// |
| ``mkVPSlash`` | [V3 #V3] ``->`` [NP #NP] ``->`` [VPSlash #VPSlash] | //(whom) (she) gives an apple// |
| ``mkVPSlash`` | [V2A #V2A] ``->`` [AP #AP] ``->`` [VPSlash #VPSlash] | //(whom) (she) paints red// |
| ``mkVPSlash`` | [V2Q #V2Q] ``->`` [QS #QS] ``->`` [VPSlash #VPSlash] | //(whom) (she) asks who sleeps// |
| ``mkVPSlash`` | [V2S #V2S] ``->`` [S #S] ``->`` [VPSlash #VPSlash] | //(whom) (she) tells that we sleep// |
| ``mkVPSlash`` | [V2V #V2V] ``->`` [VP #VP] ``->`` [VPSlash #VPSlash] | //(whom) (she) forces to sleep// |
| ``mkVPSlash`` | [VV #VV] ``->`` [VPSlash #VPSlash] ``->`` [VPSlash #VPSlash] | //want always to buy// |
| ``mkVPSlash`` | [V2V #V2V] ``->`` [NP #NP] ``->`` [VPSlash #VPSlash] ``->`` [VPSlash #VPSlash] | //beg me always to buy// |
==VQ - question-complement verb==[VQ]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VS - sentence-complement verb==[VS]
Lexical category, constructors given in
[lexical paradigms #RParadigms].
==VV - verb-phrase-complement verb==[VV]
|| Function  | Type  | Example  ||
| ``can8know_VV`` | [VV #VV] | //can (capacity)// |
| ``can_VV`` | [VV #VV] | //can (possibility)// |
| ``must_VV`` | [VV #VV] | //must// |
| ``want_VV`` | [VV #VV] | //want// |
==Voc - vocative or "please"==[Voc]
|| Function  | Type  | Example  ||
| ``mkVoc`` | [NP #NP] ``->`` [Voc #Voc] | #divreveal //yes , my friend// #divpopup #UL #LIAPI: ``mkPhr yes_Utt (mkVoc (mkNP i_Pron friend_N))`` #LIBul: //да , мой приятелю// #LICat: //sí , el meu amic// #LIDan: //ja , min ven// #LIDut: //ja , mijn vriend// #LIEng: //yes , my friend// #LIFin: //kyllä , minun ystäväni// #LIFre: //oui , mon ami// #LIGer: //ja , mein Freund// #LIIta: //sì , il mio amico// #LINor: //ja , min venn// #LIPol: //tak , mój przyjacielu// #LIRon: //da , prietenul meu// #LIRus: //Да , мой друг// #LISpa: //sí , mi amigo// #LISwe: //ja , min vän// #LIUrd: //atomic term friend_N// #EUL #ediv #ediv |
| ``please_Voc`` | [Voc #Voc] | //please// |




=Lexical Paradigms=
==Paradigms for Bulgarian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/bulgarian/ParadigmsBul.gf`` ../src/bulgarian/ParadigmsBul.gf]




|| Function  | Type  | Explanation ||
| ``mkN001`` | ``Str`` ``->`` [N #N] | //numbers refer to Krustev, Bulg. Morph. in 187 Tables// |
| ``mkN002`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN002a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN003`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN004`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN005`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN006`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN007`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN007b`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN007a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN008`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN008b`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN008c`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN008a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN009`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN009a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN010`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN011`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN012`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN013`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN014`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN014a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN015`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN015a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN016`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN016a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN017`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN018`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN018a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN019`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN019a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN020`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN021`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN022`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN023`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN024a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN024`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN025`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN026`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN027`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN028`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN028a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN029`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN030`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN031`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN031a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN032`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN032a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN033`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN034`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN035`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN035a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN036`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN037`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN038`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN039`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN040`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN040a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN041`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN041a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN041b`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN042`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN043`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN043a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN044`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN045`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN046`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN047`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN048`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN049`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN050`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN051`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN052`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN052a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN053`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN054`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN055`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN056`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN057`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN057a`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN058`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN059`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN060`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN061`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN062`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN063`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN064`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN065`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN066`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN067`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN068`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN069`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN070`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN071`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN072`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN073`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN074`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN075`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkA076`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA077`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA078`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA079`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA080`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA081`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA082`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA082a`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA083`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA084`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA084a`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA085`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA086`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA087`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA088`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA089a`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkV142`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV143`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV144`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV145`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV145a`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV145b`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV146`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV146a`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV147`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV148`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV149`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV150`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV150a`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV151`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV152`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV152a`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV153`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV154`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV155`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV156`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV157`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV158`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV159`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV160`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV160a`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV161`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV161a`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV162`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV163`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV164`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV165`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV166`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV167`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV168`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV169`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV170`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV171`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV172`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV173`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV174`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV175`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV176`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV177`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV178`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV179`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV180`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV181`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV182`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV183`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV184`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV185`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV186`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV187`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``mkV188`` | ``Str`` ``->`` [VTable #VTable] | //-// |
| ``adjAdv`` | [A #A] ``->`` ``Str`` ``->`` [A #A] ``=`` | //-// |


==Paradigms for Catalan==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/catalan/ParadigmsCat.gf`` ../src/catalan/ParadigmsCat.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``accusative`` | [Prep #Prep] | //-// |
| ``genitive`` | [Prep #Prep] | //-// |
| ``dative`` | [Prep #Prep] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``mkN`` | ``(llum`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(disc,discos`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``compN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``deN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``aN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``(Anna`` ``:`` ``Str)`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``(Pilar`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(sol`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(fort,forta,forts,fortes,fortament`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(bo`` ``:`` ``A)`` ``->`` ``(millor`` ``:`` ``A)`` ``->`` [A #A] | //-// |
| ``prefixA`` | [A #A] ``->`` [A #A] | //-// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //-// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``(cantar`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | [Verbum #Verbum] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``special_ppV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``v2V`` | [V2 #V2] ``->`` [V #V] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //parlar, a, de// |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //donar,(accusative),a// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //donar,(dative),(accusative)// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //plain infinitive: "vull parlar"// |
| ``deVV`` | [V #V] ``->`` [VV #VV] | //"acabar de parlar"// |
| ``aVV`` | [V #V] ``->`` [VV #VV] | //"aprendre a parlar"// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Danish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/danish/ParadigmsDan.gf`` ../src/danish/ParadigmsDan.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``utrum`` | [Gender #Gender] | //-// |
| ``neutrum`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //-// |
| ``genitive`` | [Case #Case] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``noPrep`` | [Prep #Prep] | //empty string// |
| ``mkN`` | ``(bil`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(hus`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(bil,bilen`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(bil,bilen,biler`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(dreng,drengen,drenge,drengene`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``regN2`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //utrum// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkPN`` | [N #N] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(fin`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(fin,fint`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(galen,galet,galne`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(stor,stort,store,storre,storst`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | [A #A] ``->`` [A #A] | //-/mer/mest norsk// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //-// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``(snakke`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(leve,levde`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(drikke,`` ``drakk,`` ``drukket`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(spise,spiser,spises,spiste,spist,spis`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] | //-// |
| ``vaereV`` | [V #V] ``->`` [V #V] | //-// |
| ``depV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //snakke, med, om// |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //give,_,til// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //give,_,_// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //-// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Dutch==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/dutch/ParadigmsDut.gf`` ../src/dutch/ParadigmsDut.gf]




|| Function  | Type  | Explanation ||
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``neuter`` | [Gender #Gender] | //-// |
| ``utrum`` | [Gender #Gender] | //-// |
| ``de,het`` | [Gender #Gender] | //-// |
| ``mkN`` | ``(muis`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(bit`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(gat,gaten`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(vers`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(goed,goede,goeds,beter,best`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``invarA`` | ``Str`` ``->`` [A #A] | //prima// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``van_Prep`` | [Prep #Prep] | //-// |
| ``te_Prep`` | [Prep #Prep] | //-// |
| ``mkV`` | ``(aaien`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(breken,brak,gebroken`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(breken,brak,braken,gebroken`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(aai,aait,aaien,aaide,aaide,aaiden,geaaid`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] | //-// |
| ``zijnV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] | //give,accusative,dative// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //senden,(accusative),nach// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //sprechen, mit, über// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //-// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |


==Paradigms for English==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/english/ParadigmsEng.gf`` ../src/english/ParadigmsEng.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``human`` | [Gender #Gender] | //-// |
| ``nonhuman`` | [Gender #Gender] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //-// |
| ``genitive`` | [Case #Case] | //-// |
| ``npNumber`` | [NP #NP] ``->`` [Number #Number] | //-// |
| ``mkN`` | ``(flash`` ``:`` ``Str)`` ``->`` [N #N] | //plural s, incl. flash-flashes, fly-flies// |
| ``mkN`` | ``(man,men`` ``:`` ``Str)`` ``->`` [N #N] | //irregular plural// |
| ``mkN`` | ``(man,men,man's,men's`` ``:`` ``Str)`` ``->`` [N #N] | //irregular genitives// |
| ``mkN`` | [Gender #Gender] ``->`` [N #N] ``->`` [N #N] | //default nonhuman// |
| ``mkN`` | ``Str`` ``->`` [N #N] ``->`` [N #N] | //e.g. baby + boom// |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] | //e.g. wife of (default prep. to)// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //e.g. access to// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //e.g. connection from x to y// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(happy`` ``:`` ``Str)`` ``->`` [A #A] | //regular adj, incl. happy-happier, rude-ruder// |
| ``mkA`` | ``(fat,fatter`` ``:`` ``Str)`` ``->`` [A #A] | //irreg. comparative// |
| ``mkA`` | ``(good,better,best,well`` ``:`` ``Str)`` ``->`` [A #A] | //completely irreg.// |
| ``compoundA`` | [A #A] ``->`` [A #A] | //force comparison with more/most// |
| ``simpleA`` | [A #A] ``->`` [A #A] | //force comparison with -er,-est// |
| ``irregAdv`` | [A #A] ``->`` ``Str`` ``->`` [A #A] | //adverb irreg, e.g. "fast"// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //absent from// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //e.g. today// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //e.g. always// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //e.g. quite// |
| ``mkAdN`` | ``Str`` ``->`` [AdN #AdN] | //e.g. approximately// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //e.g. "in front of"// |
| ``noPrep`` | [Prep #Prep] | //no preposition// |
| ``mkV`` | ``(cry`` ``:`` ``Str)`` ``->`` [V #V] | //regular, incl. cry-cries, kiss-kisses etc// |
| ``mkV`` | ``(stop,`` ``stopped`` ``:`` ``Str)`` ``->`` [V #V] | //reg. with consonant duplication// |
| ``mkV`` | ``(drink,`` ``drank,`` ``drunk`` ``:`` ``Str)`` ``->`` [V #V] | //ordinary irregular// |
| ``mkV`` | ``(go,`` ``goes,`` ``went,`` ``gone,`` ``going`` ``:`` ``Str)`` ``->`` [V #V] | //totally irregular// |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] | //fix compound, e.g. under+take// |
| ``partV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] | //with particle, e.g. switch + on// |
| ``reflV`` | [V #V] ``->`` [V #V] | //reflexive e.g. behave oneself// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //transitive, e.g. hit// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //with preposiiton, e.g. believe in// |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] | //ditransitive, e.g. give,_,_// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //two prepositions, e.g. speak, with, about// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //sentence-compl e.g. say (that S)// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //e.g. tell (NP) (that S)// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //e.g. want (to VP)// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //e.g. want (NP) (to VP)// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //e.g. become (AP)// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //e.g. paint (NP) (AP)// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //e.g. wonder (QS)// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //e.g. ask (NP) (QS)// |


==Paradigms for Finnish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/finnish/ParadigmsFin.gf`` ../src/finnish/ParadigmsFin.gf]




|| Function  | Type  | Explanation ||
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //e.g. "talo"// |
| ``genitive`` | [Case #Case] | //e.g. "talon"// |
| ``partitive`` | [Case #Case] | //e.g. "taloa"// |
| ``essive`` | [Case #Case] | //e.g. "talona"// |
| ``translative`` | [Case #Case] | //e.g. "taloksi"// |
| ``inessive`` | [Case #Case] | //e.g. "talossa"// |
| ``elative`` | [Case #Case] | //e.g. "talosta"// |
| ``illative`` | [Case #Case] | //e.g. "taloon"// |
| ``adessive`` | [Case #Case] | //e.g. "talolla"// |
| ``ablative`` | [Case #Case] | //e.g. "talolta"// |
| ``allative`` | [Case #Case] | //e.g. "talolle"// |
| ``infFirst`` | [InfForm #InfForm] | //e.g. "tehdä"// |
| ``infElat`` | [InfForm #InfForm] | //e.g. "tekemästä"// |
| ``infIllat`` | [InfForm #InfForm] | //e.g. "tekemään"// |
| ``prePrep`` | [Case #Case] ``->`` ``Str`` ``->`` [Prep #Prep] | //preposition, e.g. partitive "ilman"// |
| ``postPrep`` | [Case #Case] ``->`` ``Str`` ``->`` [Prep #Prep] | //postposition, e.g. genitive "takana"// |
| ``postGenPrep`` | ``Str`` ``->`` [Prep #Prep] | //genitive postposition, e.g. "takana"// |
| ``casePrep`` | [Case #Case] ``->`` [Prep #Prep] | //just case, e.g. adessive// |
| ``mkN`` | ``(kukko`` ``:`` ``Str)`` ``->`` [N #N] | //predictable nouns, covers 82%// |
| ``mkN`` | ``(savi,savia`` ``:`` ``Str)`` ``->`` [N #N] | //different pl.part// |
| ``mkN`` | ``(vesi,veden,vesiä`` ``:`` ``Str)`` ``->`` [N #N] | //also different sg.gen// |
| ``mkN`` | ``(vesi,veden,vesiä,vettä`` ``:`` ``Str)`` ``->`` [N #N] | //also different sg.part// |
| ``mkN`` | ``(olo,n,na,a,oon,jen,ja,ina,issa,ihin`` ``:`` ``Str)`` ``->`` [N #N] | //worst case, 10 forms// |
| ``mkN`` | ``(pika`` ``:`` ``Str)`` ``->`` ``(juna`` ``:`` ``N)`` ``->`` [N #N] | //compound with invariable prefix// |
| ``mkN`` | ``(oma`` ``:`` ``N)`` ``->`` ``(tunto`` ``:`` ``N)`` ``->`` [N #N] | //compound with inflecting prefix// |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] | //relational noun with genitive// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //relational noun another prep.// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //relation with two complements// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //predictable noun made into name// |
| ``mkPN`` | [N #N] ``->`` [PN #PN] | //any noun made into name// |
| ``mkA`` | ``Str`` ``->`` [A #A] | //regular noun made into adjective// |
| ``mkA`` | [N #N] ``->`` [A #A] | //any noun made into adjective// |
| ``mkA`` | [N #N] ``->`` ``(kivempi,kivin`` ``:`` ``Str)`` ``->`` [A #A] | //deviating comparison forms// |
| ``mkA`` | ``(hyva,prmpi,pras`` ``:`` ``N)`` ``->`` ``(hyvin,pmmin,prhten`` ``:`` ``Str)`` ``->`` [A #A] | //worst case adj// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //e.g. "jaollinen" casePrep adessive// |
| ``mkV`` | ``(huutaa`` ``:`` ``Str)`` ``->`` [V #V] | //predictable verbs, covers 90%// |
| ``mkV`` | ``(huutaa,huusi`` ``:`` ``Str)`` ``->`` [V #V] | //deviating past 3sg// |
| ``mkV`` | ``(huutaa,huudan,huusi`` ``:`` ``Str)`` ``->`` [V #V] | //also deviating pres. 1sg// |
| ``mkV`` | ``(huutaa,dan,taa,tavat,takaa,detaan,sin,si,sisi,tanut,dettu,tanee`` ``:`` ``Str)`` ``->`` [V #V] | //worst-case verb// |
| ``caseV`` | [Case #Case] ``->`` [V #V] ``->`` [V #V] | //deviating subj. case, e.g. genitive "täytyä"// |
| ``vOlla`` | [V #V] | //the verb "be"// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //predictable direct transitive// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //direct transitive// |
| ``mkV2`` | [V #V] ``->`` [Case #Case] ``->`` [V2 #V2] | //complement just case// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //complement pre/postposition// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //e.g. puhua, allative, elative// |
| ``dirV3`` | [V #V] ``->`` [Case #Case] ``->`` [V3 #V3] | //siirtää, (accusative), illative// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //antaa, (accusative), (allative)// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //e.g. "sanoa" allative// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //e.g. "alkaa"// |
| ``mkVVf`` | [V #V] ``->`` [InfForm #InfForm] ``->`` [VV #VV] | //e.g. "ruveta" infIllat// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //e.g. "käskeä" genitive// |
| ``mkV2Vf`` | [V #V] ``->`` [Prep #Prep] ``->`` [InfForm #InfForm] ``->`` [V2V #V2V] | //e.g. "kieltää" partitive infElat// |
| ``mkVA`` | [V #V] ``->`` [Prep #Prep] ``->`` [VA #VA] | //e.g. "maistua" ablative// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //e.g. "maalata" accusative translative// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //e.g. "kysyä" ablative// |


==Paradigms for French==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/french/ParadigmsFre.gf`` ../src/french/ParadigmsFre.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``accusative`` | [Prep #Prep] | //-// |
| ``genitive`` | [Prep #Prep] | //-// |
| ``dative`` | [Prep #Prep] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``mkN`` | ``(cheval`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(foie`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(oeil,yeux`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``deN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``aN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(cher`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(sec,seche`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(banal,banale,banaux,banalement`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | [A #A] ``->`` [A #A] ``->`` [A #A] | //-// |
| ``prefixA`` | [A #A] ``->`` [A #A] | //-// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //-// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``(finir`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(jeter,jette,jettera`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | [V2 #V2] ``->`` [V #V] | //-// |
| ``etreV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] | //donner,_,_// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //placer,_,dans// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //parler, à, de// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //plain infinitive: "je veux parler"// |
| ``deVV`` | [V #V] ``->`` [VV #VV] | //"j'essaie de parler"// |
| ``aVV`` | [V #V] ``->`` [VV #VV] | //"j'arrive à parler"// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for German==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/german/ParadigmsGer.gf`` ../src/german/ParadigmsGer.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``neuter`` | [Gender #Gender] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //-// |
| ``accusative`` | [Case #Case] | //-// |
| ``dative`` | [Case #Case] | //-// |
| ``genitive`` | [Case #Case] | //-// |
| ``anDat_Case`` | [Case #Case] | //-// |
| ``inAcc_Case`` | [Case #Case] | //-// |
| ``inDat_Case`` | [Case #Case] | //-// |
| ``zuDat_Case`` | [Case #Case] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``mkN`` | ``(Stufe`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(Bild,Bilder`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(x1,_,_,_,_,x6`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] | //-// |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``(nom,gen`` ``:`` ``Str)`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``(nom,acc,dat,gen`` ``:`` ``Str)`` ``->`` [PN #PN] | //-// |
| ``mkA`` | ``Str`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(gut,besser,beste`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(gut,gute,besser,beste`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``invarA`` | ``Str`` ``->`` [A #A] | //prima// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [PCase #PCase] ``->`` [Prep #Prep] | //-// |
| ``accPrep`` | [Prep #Prep] | //-// |
| ``datPrep`` | [Prep #Prep] | //-// |
| ``genPrep`` | [Prep #Prep] | //-// |
| ``von_Prep`` | [Prep #Prep] | //-// |
| ``zu_Prep`` | [Prep #Prep] | //-// |
| ``anDat_Prep`` | [Prep #Prep] | //-// |
| ``inDat_Prep`` | [Prep #Prep] | //-// |
| ``inAcc_Prep`` | [Prep #Prep] | //-// |
| ``mkV`` | ``(führen`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(sehen,sieht,sah,sähe,gesehen`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(geben,`` ``gibt,`` ``gib,`` ``gab,`` ``gäbe,`` ``gegeben`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] | //-// |
| ``no_geV`` | [V #V] ``->`` [V #V] | //-// |
| ``fixprefixV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] | //-// |
| ``seinV`` | [V #V] ``->`` [V #V] | //-// |
| ``habenV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [Case #Case] ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Case #Case] ``->`` [V2 #V2] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //sprechen, mit, über// |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //senden,(accusative),nach// |
| ``accdatV3`` | [V #V] ``->`` [V3 #V3] | //give,accusative,dative// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //-// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Italian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/italian/ParadigmsIta.gf`` ../src/italian/ParadigmsIta.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``--Prep`` | [Type #Type] | //-// |
| ``accusative`` | [Prep #Prep] | //-// |
| ``genitive`` | [Prep #Prep] | //-// |
| ``dative`` | [Prep #Prep] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``mkN`` | ``(cane`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(carne`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(uomo,uomini`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] | //-// |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(bianco`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(solo,sola,soli,sole,solamente`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | [A #A] ``->`` [A #A] ``->`` [A #A] | //-// |
| ``prefixA`` | [A #A] ``->`` [A #A] ``=`` ``prefA`` | //-// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //-// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``Str`` ``->`` [V #V] | //-// |
| ``mkV`` | [Verbo #Verbo] ``->`` [V #V] | //-// |
| ``mkV`` | ``(udire,odo,ode,udiamo,udiro,udii,udisti,udi,udirono,odi,udito`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``essereV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``v2V`` | [V2 #V2] ``->`` [V #V] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //parlare, a, di// |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //dare,_,a// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //dare,_,_// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //plain infinitive: "voglio parlare"// |
| ``deVV`` | [V #V] ``->`` [VV #VV] | //"cerco di parlare"// |
| ``aVV`` | [V #V] ``->`` [VV #VV] | //"arrivo a parlare"// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Norwegian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/norwegian/ParadigmsNor.gf`` ../src/norwegian/ParadigmsNor.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``neutrum`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //-// |
| ``genitive`` | [Case #Case] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``noPrep`` | [Prep #Prep] | //empty string// |
| ``mkN`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(bil,bilen`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(dreng,drengen,drenger,drengene`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``regN2`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //masculine// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkPN`` | [N #N] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(fin`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(fin,fint`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(galen,galet,galne`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(stor,stort,store,storre,storst`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | [A #A] ``->`` [A #A] | //-/mer/mest norsk// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //e.g. her// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //e.g. altid// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``(snakke`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(leve,levde`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(drikke,`` ``drakk,`` ``drukket`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(spise,spiser,spises,spiste,spist,spis`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] | //-// |
| ``vaereV`` | [V #V] ``->`` [V #V] | //-// |
| ``depV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //snakke, med, om// |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //gi,_,til// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //gi,_,_// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //-// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Polish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/polish/ParadigmsPol.gf`` ../src/polish/ParadigmsPol.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | ``Type;`` | //-// |
| ``masculineP`` | ``Gender;`` | //personal// |
| ``masculineA`` | ``Gender;`` | //animate// |
| ``masculineI`` | ``Gender;`` | //inanimate// |
| ``feminine`` | ``Gender;`` | //-// |
| ``neuter`` | ``Gender;`` | //-// |
| ``personal`` | ``Animacy;`` | //-// |
| ``Case`` | ``Type;`` | //-// |
| ``nominative`` | ``Case;`` | //-// |
| ``genitive`` | ``Case;`` | //-// |
| ``dative`` | ``Case;`` | //-// |
| ``accusative`` | ``Case;`` | //-// |
| ``instrumental`` | ``Case;`` | //-// |
| ``locative`` | ``Case;`` | //-// |
| ``vocative`` | ``Case;`` | //-// |
| ``Number`` | ``Type;`` | //-// |
| ``singular`` | ``Number;`` | //-// |
| ``plural`` | ``Number;`` | //-// |
| ``nKapiel`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-l"// |
| ``nLodz`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-dÅº"// |
| ``nSul`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-l"// |
| ``nKonew`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-w"// |
| ``nWies`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-Å"// |
| ``nDlon`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-Å"// |
| ``nSiec`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-Ä" (sieÄ),"-ÅÄ" (miÅoÅÄ)// |
| ``nDrzwi`` | ``Str`` ``->`` ``N;`` | //drzwi, wnÄtrznoÅci, usta// |
| ``nKosc`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-ÅÄ"(koÅÄ), "-Ä" (niÄ),// |
| ``nNoc`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-c", "-cz", "-rz", "-Å¼"// |
| ``nWesz`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-sz"// |
| ``nKrolowa`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-wa", but also for "ksiÄÅ¼na"// |
| ``nReka`` | ``Str`` ``->`` ``N;`` | //feminine "rÄka", irregularly noun// |
| ``nApteka`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-k", -"g", consonant alternation k:c, g:dz// |
| ``nDroga`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "g", consonant alternation d:dz, vowel alternation o:Ã³// |
| ``nMatka`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in -k,consonant alternation k:c, fleeting e// |
| ``nZiemia`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-ia"// |
| ``nFala`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-l"// |
| ``nLilia`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-ia"// |
| ``nKobieta`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-t"// |
| ``nLiczba`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-b", "-p", "-n"// |
| ``nSila`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-Å", "-r"// |
| ``nDoba`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-b", "-p"// |
| ``nWoda`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-d"// |
| ``nSzkola`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-oÅa", "-ra"// |
| ``nWojna`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in two consonants: jn, Åz, Ån, Äm,Å¼w// |
| ``nWiosna`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in two consonants: sn// |
| ``nMgla`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-gÅ"// |
| ``nGwiazda`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-zd"// |
| ``nUlica`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending mainly in "-c", but also in "-Å¼", "-rz", "-dz"// |
| ``nOwca`` | ``Str`` ``->`` ``N;`` | //feminine, subject ending in "-c"// |
| ``nDanie`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-ni"// |
| ``nSerce`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in a hardened consonant "-c", "-rz"// |
| ``nNasienie`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-ni" (only for "nasienie")// |
| ``nMorze`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-rz", "-Å¼"// |
| ``nImie`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-Ä"// |
| ``nCiele`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-Ä"// |
| ``nUdo`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in hard consonant + "o"// |
| ``nPiwo`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in a hard consonant + "o"// |
| ``nZero`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-r"// |
| ``nNiebo`` | ``Str`` ``->`` ``N;`` | //neuter, declension for "niebo"// |
| ``nTlo`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-Åo"// |
| ``nZebro`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-r"// |
| ``nOkno`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-n"// |
| ``nGniazdo`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-zd", "-st"// |
| ``nWojsko`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-k"// |
| ``nJajo`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-j"// |
| ``nJablko`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-k"// |
| ``nStudio`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-n"// |
| ``nDziecko`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-n"// |
| ``nUcho`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-ch"// |
| ``nOko`` | ``Str`` ``->`` ``N;`` | //neuter, subject ending in "-k"// |
| ``nFacet`` | ``Str`` ``->`` ``N;`` | //masculine personal, subject ending in a hard consonant "-t", -"n", nom pl "-i"// |
| ``nArab`` | ``Str`` ``->`` ``N;`` | //masculine personal, subject ending in a hard consonant "-t", -"n", nom pl "-y"// |
| ``nPrzyjaciel`` | ``Str`` ``->`` ``N;`` | //masculine personal, subject ending in a hard consonant "-l"// |
| ``nKowal`` | ``Str`` ``->`` ``N;`` | //masculine personal, subject ending in a hard consonant "-l"// |
| ``nLekarz`` | ``Str`` ``->`` ``N;`` | //masculine personal ending in -rz, -Å¼, -cz, -sz (piekarz, lekarz, papieÅ¼, tÅumacz, piwosz)// |
| ``nKrol`` | ``Str`` ``->`` ``N;`` | //masculine personal, subject ending in "-ul"// |
| ``nMaz`` | ``Str`` ``->`` ``N;`` | //masculine personal// |
| ``nWrog`` | ``Str`` ``->`` ``N;`` | //masculine personal, subject ending in "-g"; only for "wrÃ³g"// |
| ``nKsiadz`` | ``Str`` ``->`` ``N;`` | //masculine personal// |
| ``nOjciec`` | ``Str`` ``->`` ``N;`` | //masculine personal for "ojciec"// |
| ``nBrat`` | ``Str`` ``->`` ``N;`` | //masculine personal// |
| ``nBog`` | ``Str`` ``->`` ``N;`` | //masculine personal// |
| ``nChlopiec`` | ``Str`` ``->`` ``N;`` | //masculine personal// |
| ``nMezczyzna`` | ``Str`` ``->`` ``N;`` | //masculine personal// |
| ``nKon`` | ``Str`` ``->`` ``N;`` | //masculine animate, for "koÅ"// |
| ``nWaz`` | ``Str`` ``->`` ``N;`` | //masculine animate, for "wÄÅ¼"// |
| ``nPtak`` | ``Str`` ``->`` ``N;`` | //masculine animate, subject ending in "-k"// |
| ``nKot`` | ``Str`` ``->`` ``N;`` | //masculine animate, for "kot"// |
| ``nPies`` | ``Str`` ``->`` ``N;`` | //masculine animate, for "pies"// |
| ``nBat`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nChleb`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nSer`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in "-r"// |
| ``nZab`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in "-Äb"// |
| ``nKosciol`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, for "kosciÃ³Å"// |
| ``nCien`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a week consonant// |
| ``nPien`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a week consonant// |
| ``nLisc`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nKoc`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a hardened consonant// |
| ``nWiersz`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a hardened consonant// |
| ``nDzien`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, for "dzieÅ"// |
| ``nKajak`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -g or -k// |
| ``nMlotek`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -ek// |
| ``nMiech`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -ch// |
| ``nSad`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a hard consonant// |
| ``nDym`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a hard consonant// |
| ``nWal`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nDol`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nOgrod`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nKwiat`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nLas`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nWiatr`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nPopiol`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant// |
| ``nPokoj`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -Ã³j// |
| ``nGaj`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in a vowel + hard consonant j// |
| ``nBrzeg`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -g or -k// |
| ``nRok`` | ``Str`` ``->`` ``Str`` ``->`` ``N;`` | //masculine inanimate for "rok", form in pl irregular// |
| ``nProg`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -Ã³g// |
| ``nStatek`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -ek// |
| ``nDom`` | ``Str`` ``->`` ``N;`` | //masculine inanimate, subject ending in -ch and for dom// |
| ``mkN`` | ``(nomSg,`` ``genSg,`` ``datSg,`` ``accSg,`` ``instrSg,`` ``locSg,`` ``vocSg,`` | //-// |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkFun`` | [N #N] ``->`` [Prep #Prep] ``->`` ``N2;`` | //-// |
| ``nullPrep`` | [Prep #Prep] ``=`` ``{s`` ``=`` ``[];`` ``c=`` ``GenNoPrep;`` ``lock_Prep=<>};`` | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` ``N3;`` | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Case #Case] ``->`` ``Prep;`` | //-// |
| ``genPrep`` | ``Prep;`` | //-// |
| ``datPrep`` | ``Prep;`` | //-// |
| ``accPrep`` | ``Prep;`` | //-// |
| ``instrPrep`` | ``Prep;`` | //-// |
| ``bez_Prep`` | ``Prep;`` ``--without`` | //-// |
| ``dla_Prep`` | ``Prep;`` ``--for`` | //-// |
| ``do_Prep`` | ``Prep;`` ``--to`` | //-// |
| ``dookola_Prep`` | ``Prep;`` ``--(a)round`` | //-// |
| ``kolo_Prep`` | ``Prep;`` ``--near`` | //-// |
| ``obok_Prep`` | ``Prep;`` ``--beside,`` ``next`` ``to`` | //-// |
| ``od_Prep`` | ``Prep;`` ``--from`` | //-// |
| ``oprocz_Prep`` | ``Prep;`` ``--out`` ``of`` | //-// |
| ``podczas_Prep`` | ``Prep;`` ``--during`` | //-// |
| ``mimo_Prep`` | ``Prep;`` | //despite// |
| ``spod_Prep`` | ``Prep;`` ``--under`` | //-// |
| ``u_Prep`` | ``Prep;`` ``--by,`` ``with`` ``(I`` ``was`` ``by`` [Peter #Peter] ``last`` ``sunday.)`` | //-// |
| ``wzdluz_Prep`` | ``Prep;`` ``--along`` | //-// |
| ``z_Prep`` | ``Prep;`` ``--from`` ``(I`` ``come`` ``from`` ``Italy.),`` ``of/`` ``from`` ``(The`` ``ring`` ``is`` ``made`` ``of`` ``silver.)`` | //-// |
| ``zamiast_Prep`` | ``Prep;`` ``--instead`` ``of`` | //-// |
| ``znad_Prep`` | ``Prep;`` ``--over,`` ``above`` | //-// |
| ``zza_Prep`` | ``Prep;`` ``--behind`` | //-// |
| ``dzieki_Prep`` | ``Prep;`` | //thanks for// |
| ``przeciw_Prep`` | ``Prep;`` | //against// |


==Paradigms for Romanian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/romanian/ParadigmsRon.gf`` ../src/romanian/ParadigmsRon.gf]




|| Function  | Type  | Explanation ||
| ``NGender`` | [Type #Type] | //-// |
| ``masculine`` | [NGender #NGender] | //-// |
| ``feminine`` | [NGender #NGender] | //-// |
| ``neuter`` | [NGender #NGender] | //-// |
| ``Gender`` | [Type #Type] | //-// |
| ``Masculine`` | [Gender #Gender] | //-// |
| ``Feminine`` | [Gender #Gender] | //-// |
| ``Anim`` | [Type #Type] | //-// |
| ``animate`` | [Anim #Anim] | //-// |
| ``inanimate`` | ``Anim;`` | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``Preposition`` | [Type #Type] | //-// |
| ``NCase`` | [Type #Type] | //-// |
| ``Acc`` | [NCase #NCase] | //-// |
| ``Dat`` | [NCase #NCase] | //-// |
| ``Gen`` | [NCase #NCase] | //-// |
| ``Nom`` | [NCase #NCase] | //-// |
| ``mkPrep`` | ``Str`` ``->`` ``NCase->`` [Bool #Bool] ``->`` [Prep #Prep] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [NCase #NCase] ``->`` ``Prep;`` | //-// |
| ``noPrep`` | [NCase #NCase] ``->`` [Prep #Prep] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``Str`` ``->`` ``Str`` ``->`` [Gender #Gender] ``->`` [Number #Number] ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [Number #Number] ``->`` [PN #PN] | //-// |
| ``mkInAn`` | [PN #PN] ``->`` [PN #PN] | //-// |
| ``mkPropNoun`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkV`` | ``Str`` ``->`` [V #V] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |


==Paradigms for Russian==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/russian/ParadigmsRus.gf`` ../src/russian/ParadigmsRus.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``neuter`` | [Gender #Gender] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //-// |
| ``genitive`` | [Case #Case] | //-// |
| ``dative`` | [Case #Case] | //-// |
| ``accusative`` | [Case #Case] | //-// |
| ``instructive`` | [Case #Case] | //-// |
| ``prepositional`` | [Case #Case] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``mkN`` | ``(karta`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(tigr`` ``:`` ``Str)`` ``->`` [Animacy #Animacy] ``->`` [N #N] | //-// |
| ``mkN`` | ``(nomSg,`` ``genSg,`` ``datSg,`` ``accSg,`` ``instSg,`` ``preposSg,`` ``prepos2Sg,`` ``nomPl,`` ``genPl,`` ``datPl,`` ``accPl,`` ``instPl,`` ``preposPl`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [Animacy #Animacy] ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [Animacy #Animacy] ``->`` [PN #PN] | //"ÐÐ²Ð°Ð½", "ÐÐ°ÑÐ°"// |
| ``nounPN`` | [N #N] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(positive`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(positive,`` ``comparative`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA2`` | [A #A] ``->`` ``Str`` ``->`` [Case #Case] ``->`` [A2 #A2] | //"Ð´ÐµÐ»Ð¸Ð¼ Ð½Ð°"// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkV`` | [Aspect #Aspect] ``->`` ``(presentSgP1,presentSgP2,presentSgP3,`` | //-// |
| ``pastSgP1,imperative,infinitive`` | ``Str)`` ``->`` [V #V] | //-// |
| ``mkV2`` | [V #V] ``->`` ``Str`` ``->`` [Case #Case] ``->`` [V2 #V2] | //"Ð²Ð¾Ð¹ÑÐ¸ Ð² Ð´Ð¾Ð¼"; "Ð²", accusative// |
| ``mkV3`` | [V #V] ``->`` ``Str`` ``->`` ``Str`` ``->`` [Case #Case] ``->`` [Case #Case] ``->`` [V3 #V3] | //"ÑÐ»Ð¾Ð¶Ð¸ÑÑ Ð¿Ð¸ÑÑÐ¼Ð¾ Ð² ÐºÐ¾Ð½Ð²ÐµÑÑ"// |
| ``dirV2`` | [V #V] ``->`` [V2 #V2] | //"Ð²Ð¸Ð´ÐµÑÑ", "Ð»ÑÐ±Ð¸ÑÑ"// |
| ``tvDirDir`` | [V #V] ``->`` [V3 #V3] | //-// |


==Paradigms for Spanish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/spanish/ParadigmsSpa.gf`` ../src/spanish/ParadigmsSpa.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``accusative`` | [Prep #Prep] | //-// |
| ``genitive`` | [Prep #Prep] | //-// |
| ``dative`` | [Prep #Prep] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``mkN`` | ``(luz`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(baston,bastones`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``compN`` | [N #N] ``->`` ``Str`` ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``deN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``aN2`` | [N #N] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``(Anna`` ``:`` ``Str)`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``(Pilar`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(util`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(solo,sola,solos,solas,solamente`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(bueno`` ``:`` ``A)`` ``->`` ``(mejor`` ``:`` ``A)`` ``->`` [A #A] | //-// |
| ``prefixA`` | [A #A] ``->`` [A #A] | //-// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //-// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``(pagar`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(mostrar,muestro`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | [Verbum #Verbum] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``special_ppV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``v2V`` | [V2 #V2] ``->`` [V #V] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //hablar, a, di// |
| ``dirV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //dar,(accusative),a// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //dar,(dative),(accusative)// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //plain infinitive: "quiero hablar"// |
| ``deVV`` | [V #V] ``->`` [VV #VV] | //"terminar de hablar"// |
| ``aVV`` | [V #V] ``->`` [VV #VV] | //"aprender a hablar"// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [Prep #Prep] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Swedish==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/swedish/ParadigmsSwe.gf`` ../src/swedish/ParadigmsSwe.gf]




|| Function  | Type  | Explanation ||
| ``Gender`` | [Type #Type] | //-// |
| ``utrum`` | [Gender #Gender] | //-// |
| ``neutrum`` | [Gender #Gender] | //-// |
| ``Number`` | [Type #Type] | //-// |
| ``singular`` | [Number #Number] | //-// |
| ``plural`` | [Number #Number] | //-// |
| ``Case`` | [Type #Type] | //-// |
| ``nominative`` | [Case #Case] | //-// |
| ``genitive`` | [Case #Case] | //-// |
| ``mkPrep`` | ``Str`` ``->`` [Prep #Prep] | //-// |
| ``noPrep`` | [Prep #Prep] | //empty string// |
| ``mkN`` | ``(apa`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(lik`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(nyckel,nycklar`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN`` | ``(museum,museet,museer,museerna`` ``:`` ``Str)`` ``->`` [N #N] | //-// |
| ``mkN2`` | ``Str`` ``->`` [N2 #N2] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` [N2 #N2] | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [N3 #N3] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkPN`` | ``(jesus,jesu`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [PN #PN] | //-// |
| ``mkA`` | ``(billig`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(bred,brett`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(tung,tyngre,tyngst`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(god,gott,goda,battre,bast`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``mkA`` | ``(liten,litet,lilla,sma,mindre,minst,minsta`` ``:`` ``Str)`` ``->`` [A #A] | //-// |
| ``compoundA`` | [A #A] ``->`` [A #A] | //-// |
| ``mkA2`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2 #A2] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //här// |
| ``mkAdV`` | ``Str`` ``->`` [AdV #AdV] | //alltid// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkV`` | ``(stämmer`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(dricka,drack,druckit`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | ``(gå,går,gå,gick,gått,gången`` ``:`` ``Str)`` ``->`` [V #V] | //-// |
| ``mkV`` | [V #V] ``->`` ``Str`` ``->`` [V #V] | //-// |
| ``depV`` | [V #V] ``->`` [V #V] | //-// |
| ``reflV`` | [V #V] ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | ``Str`` ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2 #V2] | //-// |
| ``mkV3`` | ``Str`` ``->`` [V3 #V3] | //-// |
| ``mkV3`` | [V #V] ``->`` [V3 #V3] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //-// |
| ``mkV3`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V3 #V3] | //-// |
| ``mkV0`` | [V #V] ``->`` [V0 #V0] | //-// |
| ``mkVS`` | [V #V] ``->`` [VS #VS] | //-// |
| ``mkV2S`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2S #V2S] | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //-// |
| ``mkV2V`` | [V #V] ``->`` [Prep #Prep] ``->`` [Prep #Prep] ``->`` [V2V #V2V] | //-// |
| ``mkVA`` | [V #V] ``->`` [VA #VA] | //-// |
| ``mkV2A`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2A #V2A] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkV2Q`` | [V #V] ``->`` [Prep #Prep] ``->`` [V2Q #V2Q] | //-// |
| ``mkAS`` | [A #A] ``->`` [AS #AS] | //-// |
| ``mkA2S`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2S #A2S] | //-// |
| ``mkAV`` | [A #A] ``->`` [AV #AV] | //-// |
| ``mkA2V`` | [A #A] ``->`` [Prep #Prep] ``->`` [A2V #A2V] | //-// |
| ``V0`` | [Type #Type] | //-// |


==Paradigms for Urdu==
#LParadigms


source [``http://www.grammaticalframework.org/lib/resource/src/urdu/ParadigmsUrd.gf`` ../src/urdu/ParadigmsUrd.gf]




|| Function  | Type  | Explanation ||
| ``masculine`` | [Gender #Gender] | //-// |
| ``feminine`` | [Gender #Gender] | //-// |
| ``singular`` | ``Number;`` | //-// |
| ``plural`` | ``Number;`` | //-// |
| ``mkN`` | ``Str`` ``->`` [N #N] | //-// |
| ``mkN`` | ``Str`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN`` | ``(x1,_,_,_,_,x6`` ``:`` ``Str)`` ``->`` [Gender #Gender] ``->`` [N #N] | //-// |
| ``mkN2`` | [N #N] ``->`` [Prep #Prep] ``->`` ``Str`` ``->`` ``N2;`` | //-// |
| ``mkN3`` | [N #N] ``->`` [Prep #Prep] ``->`` ``Str`` ``->`` ``Str->`` [N3 #N3] | //-// |
| ``mkCmpdNoun`` | ``Str`` ``->`` [N #N] ``->`` [N #N] | //-// |
| ``mkPN`` | ``Str`` ``->`` [PN #PN] | //-// |
| ``mkA`` | ``Str->`` [A #A] | //-// |
| ``mkA`` | ``Str`` ``->`` ``Str`` ``->`` [A2 #A2] | //-// |
| ``mkA2`` | [A #A] ``->`` ``Str`` ``->`` [A2 #A2] | //-// |
| ``mkV`` | ``Str`` ``->`` [V #V] | //-// |
| ``mkV2`` | ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` [V2 #V2] | //-// |
| ``mkV2`` | [V #V] ``->`` ``Str`` ``->`` [V2 #V2] | //-// |
| ``mkV3`` | [V #V] ``->`` ``Str`` ``->`` ``Str`` ``->`` ``V3;`` | //-// |
| ``mkV2V`` | [V #V] ``->`` ``Str`` ``->`` ``Str`` ``->`` [Bool #Bool] ``->`` [V2V #V2V] | //-// |
| ``dirdirV3`` | [V #V] ``->`` [V3 #V3] | //-// |
| ``compoundV`` | ``Str`` ``->`` [V #V] ``->`` [V #V] | //-// |
| ``compoundV`` | ``Str`` ``->`` [V2 #V2] ``->`` [V #V] | //-// |
| ``mkAdv`` | ``Str`` ``->`` [Adv #Adv] | //-// |
| ``mkPrep`` | ``Str`` ``->`` ``Str`` ``->`` [Prep #Prep] | //-// |
| ``mkConj`` | ``Str`` ``->`` [Conj #Conj] | //and (plural agreement)// |
| ``mkConj`` | ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] | //or (agrement number given as argument)// |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Conj #Conj] | //both ... and (plural)// |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] | //either ... or (agrement number given as argument)// |
| ``mkVS`` | [V #V] ``->`` ``VS;`` | //-// |
| ``mkVV`` | [V #V] ``->`` [VV #VV] | //-// |
| ``mkAdA`` | ``Str`` ``->`` [AdA #AdA] | //-// |
| ``mkVQ`` | [V #V] ``->`` [VQ #VQ] | //-// |
| ``mkConj`` | ``Str`` ``->`` [Conj #Conj] | //-// |
| ``mkConj`` | ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] | //-// |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Conj #Conj] | //-// |
| ``mkConj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] | //-// |
| ``mk2Conj`` | ``Str`` ``->`` ``Str`` ``->`` [Number #Number] ``->`` [Conj #Conj] ``=`` ``\x,y,n`` ``->`` | //-// |




%!include: synopsis-browse.txt


=An Example of Usage=


%!include: synopsis-example.txt


=Table of Contents=


%%toc

